import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as D,c as t,b as s,a,w as l,d as c,e as p}from"./app-FEcl1joV.js";const r={},y=s("h1",{id:"2-继承",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#2-继承"},[s("span",null,"2. 继承")])],-1),C={class:"table-of-contents"},i=c(`<h2 id="21-原型链继承" tabindex="-1"><a class="header-anchor" href="#21-原型链继承"><span>2.1 原型链继承</span></a></h2><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Animal</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;"> = [</span><span style="color:#CE9178;">&#39;black&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;white&#39;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">Animal</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getColor</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">() { }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">Dog</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Animal</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> test</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> dog1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  dog1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;brown&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> dog2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dog2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#6A9955;">  // [&#39;black&#39;, &#39;white&#39;, &#39;brown&#39;]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre></div><p>原型链继承存在的问题：</p><ol><li>原型中包含的引用类型属性将被所有实例共享</li><li>子类在实例化的时候不能给父类构造函数传参</li></ol><h2 id="22-借用构造函数实现继承" tabindex="-1"><a class="header-anchor" href="#22-借用构造函数实现继承"><span>2.2 借用构造函数实现继承</span></a></h2><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Animal</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">  Animal</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">Dog</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Animal</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre></div><p>借用构造函数实现继承解决了原型链继承的两个问题：引用类型共享问题以及传参问题。但是由于方法必须定义在构造函数中，所以会导致每次创建子类实例都会创建一遍方法。</p><h2 id="23-组合继承" tabindex="-1"><a class="header-anchor" href="#23-组合继承"><span>2.3 组合继承</span></a></h2><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Animal</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;"> = [</span><span style="color:#CE9178;">&#39;black&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;white&#39;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">Animal</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">  Animal</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">Dog</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Animal</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#4EC9B0;">Dog</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Dog</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> test</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> dog1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;奶昔&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">  dog1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;brown&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> dog2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;哈赤&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dog2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#6A9955;">  // Dog { name: &quot;哈赤&quot;, colors: [&quot;black&quot;, &quot;white&quot;], age: 1 }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre></div><p>组合继承结合了原型链和借用构造函数，将两者的优点集中了起来。基本的思路是使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。</p><h2 id="24-寄生式组合继承" tabindex="-1"><a class="header-anchor" href="#24-寄生式组合继承"><span>2.4 寄生式组合继承</span></a></h2><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Animal</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">colors</span><span style="color:#D4D4D4;"> = [</span><span style="color:#CE9178;">&#39;black&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;white&#39;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">Animal</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Dog</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">  Animal</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> object</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">o</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> F</span><span style="color:#D4D4D4;">() { }</span></span>
<span class="line"><span style="color:#4EC9B0;">  F</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">o</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> F</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> inheritPrototype</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">child</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">parent</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">object</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">parent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">  prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">child</span></span>
<span class="line"><span style="color:#4EC9B0;">  child</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">prototype</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">inheritPrototype</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Dog</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">Animal</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p>组合继承已经相对完善了，但还是存在问题，它的问题就是调用了两次父类构造函数，第一次是在 <code>new Animal()</code>，第二次是在 <code>Animal.call()</code> 这里。</p><p>所以解决方案就是不直接调用父类构造函数给子类原型赋值，而是通过创建空函数 <code>F</code> 获取父类原型的副本。</p><p>上方 12~22 行代码可替换为下面的寄生式组合式的代码：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;">Dog</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;"> =  </span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Animal</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#4EC9B0;">Dog</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Dog</span></span>
<span class="line"></span></code></pre></div><h2 id="25-es6-class-语法" tabindex="-1"><a class="header-anchor" href="#25-es6-class-语法"><span>2.5 ES6 class 语法</span></a></h2><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Animal</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">  getName</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> class</span><span style="color:#4EC9B0;"> Dog</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Animal</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    super</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">age</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div>`,18);function d(E,h){const n=e("router-link");return D(),t("div",null,[y,s("nav",C,[s("ul",null,[s("li",null,[a(n,{to:"#21-原型链继承"},{default:l(()=>[p("2.1 原型链继承")]),_:1})]),s("li",null,[a(n,{to:"#22-借用构造函数实现继承"},{default:l(()=>[p("2.2 借用构造函数实现继承")]),_:1})]),s("li",null,[a(n,{to:"#23-组合继承"},{default:l(()=>[p("2.3 组合继承")]),_:1})]),s("li",null,[a(n,{to:"#24-寄生式组合继承"},{default:l(()=>[p("2.4 寄生式组合继承")]),_:1})]),s("li",null,[a(n,{to:"#25-es6-class-语法"},{default:l(()=>[p("2.5 ES6 class 语法")]),_:1})])])]),i])}const u=o(r,[["render",d],["__file","02-prototype-chain-inheritance.html.vue"]]),m=JSON.parse('{"path":"/notebook/js/handwrite-36/02-prototype-chain-inheritance.html","title":"2. 继承","lang":"zh-CN","frontmatter":{"description":"2. 继承 2.1 原型链继承 原型链继承存在的问题： 原型中包含的引用类型属性将被所有实例共享 子类在实例化的时候不能给父类构造函数传参 2.2 借用构造函数实现继承 借用构造函数实现继承解决了原型链继承的两个问题：引用类型共享问题以及传参问题。但是由于方法必须定义在构造函数中，所以会导致每次创建子类实例都会创建一遍方法。 2.3 组合继承 组合继承...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/notebook/js/handwrite-36/02-prototype-chain-inheritance.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"2. 继承"}],["meta",{"property":"og:description","content":"2. 继承 2.1 原型链继承 原型链继承存在的问题： 原型中包含的引用类型属性将被所有实例共享 子类在实例化的时候不能给父类构造函数传参 2.2 借用构造函数实现继承 借用构造函数实现继承解决了原型链继承的两个问题：引用类型共享问题以及传参问题。但是由于方法必须定义在构造函数中，所以会导致每次创建子类实例都会创建一遍方法。 2.3 组合继承 组合继承..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T11:44:04.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-04T11:44:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. 继承\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-04T11:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"2.1 原型链继承","slug":"21-原型链继承","link":"#21-原型链继承","children":[]},{"level":2,"title":"2.2 借用构造函数实现继承","slug":"22-借用构造函数实现继承","link":"#22-借用构造函数实现继承","children":[]},{"level":2,"title":"2.3 组合继承","slug":"23-组合继承","link":"#23-组合继承","children":[]},{"level":2,"title":"2.4 寄生式组合继承","slug":"24-寄生式组合继承","link":"#24-寄生式组合继承","children":[]},{"level":2,"title":"2.5 ES6 class 语法","slug":"25-es6-class-语法","link":"#25-es6-class-语法","children":[]}],"git":{"createdTime":1675868983000,"updatedTime":1714823044000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":1.43,"words":428},"filePathRelative":"notebook/js/handwrite-36/02-prototype-chain-inheritance.md","localizedDate":"2023年2月8日","autoDesc":true}');export{u as comp,m as data};
