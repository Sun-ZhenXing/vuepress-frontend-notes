import{_ as s,o as n,c as a,e as l}from"./app-a0d7238b.js";const p={},o=l(`<h1 id="5-深拷贝" tabindex="-1"><a class="header-anchor" href="#5-深拷贝" aria-hidden="true">#</a> 5. 深拷贝</h1><p>浅拷贝：</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">shallowCopy</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;"> !== </span><span style="color:#CE9178;">&#39;object&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">newObj</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;"> ? [] : {}</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">key</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hasOwnProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">newObj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">newObj</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>简单的深拷贝，只考虑普通对象属性，不考虑内置对象和函数，不能解决循环引用问题：</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">deepClone</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;"> !== </span><span style="color:#CE9178;">&#39;object&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">newObj</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;"> ? [] : {};</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">key</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hasOwnProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">newObj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">] === </span><span style="color:#CE9178;">&#39;object&#39;</span><span style="color:#D4D4D4;"> ? </span><span style="color:#DCDCAA;">deepClone</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">]) : </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">newObj</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>复杂版深拷贝：基于简单版的基础上，还考虑了内置对象比如 <code>Date</code>、<code>RegExp</code> 等对象和函数以及解决了循环引用的问题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">isObject</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&quot;object&quot;</span><span style="color:#D4D4D4;"> || </span><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&quot;function&quot;</span><span style="color:#D4D4D4;">) &amp;&amp; </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> !== </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">deepClone</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">WeakMap</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 获取当前值的构造函数：获取它的类型</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">constructor</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 检测当前对象 target 是否与正则、日期格式对象匹配</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#D16969;">/</span><span style="color:#DCDCAA;">^</span><span style="color:#CE9178;">(</span><span style="color:#D16969;">RegExp</span><span style="color:#DCDCAA;">|</span><span style="color:#D16969;">Date</span><span style="color:#CE9178;">)</span><span style="color:#DCDCAA;">$</span><span style="color:#D16969;">/</span><span style="color:#569CD6;">i</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 创建一个新的特殊对象(正则类/日期类)的实例</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#DCDCAA;">isObject</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">);  </span><span style="color:#6A9955;">// 为循环引用的对象做标记</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">cloneTarget</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isArray</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) ? [] : {};</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">prop</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">hasOwnProperty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">prop</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">cloneTarget</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">prop</span><span style="color:#D4D4D4;">] = </span><span style="color:#DCDCAA;">deepClone</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">prop</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">map</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">cloneTarget</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),D=[o];function e(c,r){return n(),a("div",null,D)}const y=s(p,[["render",e],["__file","05-deep-copy.html.vue"]]);export{y as default};
