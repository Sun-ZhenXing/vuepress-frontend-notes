import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,d as e}from"./app-FEcl1joV.js";const p={},l=e(`<h1 id="8-字符串模板" tabindex="-1"><a class="header-anchor" href="#8-字符串模板"><span>8. 字符串模板</span></a></h1><p>使用 <code>{{name}}</code> 格式作为字符串模板。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> render</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">template</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> reg</span><span style="color:#D4D4D4;"> =</span><span style="color:#D16969;"> /</span><span style="color:#D7BA7D;">\\{\\{</span><span style="color:#CE9178;">(</span><span style="color:#D16969;">\\w</span><span style="color:#D7BA7D;">+</span><span style="color:#CE9178;">)</span><span style="color:#D7BA7D;">\\}\\}</span><span style="color:#D16969;">/</span><span style="color:#6A9955;"> // 模板字符串正则</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">reg</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">template</span><span style="color:#D4D4D4;">)) { </span><span style="color:#6A9955;">// 判断模板里是否有模板字符串</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">reg</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">exec</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">template</span><span style="color:#D4D4D4;">)[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] </span><span style="color:#6A9955;">// 查找当前模板里第一个模板字符串的字段</span></span>
<span class="line"><span style="color:#9CDCFE;">    template</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">template</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">reg</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">]) </span><span style="color:#6A9955;">// 将第一个模板字符串渲染</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#DCDCAA;"> render</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">template</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 递归的渲染并返回渲染后的结构</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> template</span><span style="color:#6A9955;"> // 如果模板没有模板字符串直接返回</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>测试代码：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> test</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> template</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;我是 {{name}}，年龄 {{age}}，性别 {{sex}}&#39;</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> person</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">    age:</span><span style="color:#B5CEA8;"> 12</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;Alex&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">render</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">template</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">)) </span><span style="color:#6A9955;">// 我是 Alex，年龄 12，性别 undefined</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">test</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre></div>`,5),o=[l];function t(r,c){return n(),a("div",null,o)}const i=s(p,[["render",t],["__file","08-string-template.html.vue"]]),C=JSON.parse('{"path":"/notebook/js/handwrite-36/08-string-template.html","title":"8. 字符串模板","lang":"zh-CN","frontmatter":{"description":"8. 字符串模板 使用 {{name}} 格式作为字符串模板。 测试代码：","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/notebook/js/handwrite-36/08-string-template.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"8. 字符串模板"}],["meta",{"property":"og:description","content":"8. 字符串模板 使用 {{name}} 格式作为字符串模板。 测试代码："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T11:44:04.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-04T11:44:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8. 字符串模板\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-04T11:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[],"git":{"createdTime":1675939447000,"updatedTime":1714823044000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":0.13,"words":38},"filePathRelative":"notebook/js/handwrite-36/08-string-template.md","localizedDate":"2023年2月9日","autoDesc":true}');export{i as comp,C as data};
