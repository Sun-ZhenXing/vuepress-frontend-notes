import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as p,c,b as e,a as o,e as s,d as a}from"./app-FEcl1joV.js";const i={},D=e("h1",{id:"1-file-和-blob-简介",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#1-file-和-blob-简介"},[e("span",null,"1. File 和 Blob 简介")])],-1),d=e("h2",{id:"11-blob-对象",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#11-blob-对象"},[e("span",null,"1.1 Blob 对象")])],-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"Blob",-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream",target:"_blank",rel:"noopener noreferrer"},C=e("code",null,"ReadableStream",-1),f=e("sup",{class:"footnote-ref"},[e("a",{href:"#footnote1"},"[1]"),e("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1),_=a(`<p><code>Blob</code> 更通俗的解释是大二进制对象。创建 <code>Blob</code> 对象的代码如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> blob</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Blob</span><span style="color:#D4D4D4;">([</span><span style="color:#CE9178;">&#39;Hello, world!&#39;</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"></span></code></pre></div><p>创建文件对象的代码如下，区别是文件必须要指定文件名称，而文件对象并不一定代表文件系统上的一个文件，它只是一个表示：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> file</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> File</span><span style="color:#D4D4D4;">([</span><span style="color:#CE9178;">&#39;Hello, world!&#39;</span><span style="color:#D4D4D4;">], </span><span style="color:#CE9178;">&#39;hello.txt&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre></div>`,4),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/File",target:"_blank",rel:"noopener noreferrer"},g=e("code",null,"File",-1),F=e("code",null,"Blob",-1),m=e("p",null,[e("code",null,"File"),s(" 类型继承于 "),e("code",null,"Blob"),s(" 类型：")],-1),A=e("p",null,[s("所以 "),e("code",null,"Blob"),s(" 的方法在 "),e("code",null,"File"),s(" 中都存在。")],-1),B=e("code",null,"Blob",-1),E={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"ArrayBuffer",-1),k=a(`<div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> arrayBuffer</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> blob</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">arrayBuffer</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre></div><h2 id="12-filereader-对象" tabindex="-1"><a class="header-anchor" href="#12-filereader-对象"><span>1.2 FileReader 对象</span></a></h2>`,2),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader",target:"_blank",rel:"noopener noreferrer"},w=e("code",null,"FileReader",-1),j=e("code",null,"onload",-1),z=e("code",null,"FileReader",-1),N=a(`<div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> fileReader</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> FileReader</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">fileReader</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onload</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fileReader</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">);     </span><span style="color:#6A9955;">// ArrayBuffer(13)</span></span>
<span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">);   </span><span style="color:#6A9955;">// ArrayBuffer(13)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">fileReader</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">readAsArrayBuffer</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">file</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre></div><p>我们调试后可以看到，<code>fileReader.result</code> 和 <code>event.target.result</code> 值是一样的。</p><h2 id="13-dateview-对象" tabindex="-1"><a class="header-anchor" href="#13-dateview-对象"><span>1.3 DateView 对象</span></a></h2>`,3),R={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",target:"_blank",rel:"noopener noreferrer"},V=e("code",null,"DataView",-1),S=e("code",null,"ArrayBuffer",-1),I=a(`<div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> arrayBuffer</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> blob</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">arrayBuffer</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> dataView</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> DataView</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arrayBuffer</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dataView</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dataView</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getUint8</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)); </span><span style="color:#6A9955;">// 72</span></span>
<span class="line"><span style="color:#9CDCFE;">dataView</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setUint8</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">104</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre></div><p><code>DataView</code> 对象有很多 <code>set</code> 或者 <code>get</code> 开头的方法，用于获取指定位置或修改指定位置的数据。</p><hr class="footnotes-sep">`,3),T={class:"footnotes"},W={class:"footnotes-list"},J={id:"footnote1",class:"footnote-item"},P={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob",target:"_blank",rel:"noopener noreferrer"},U=e("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function L(M,O){const l=n("ExternalLinkIcon"),t=n("Mermaid");return p(),c("div",null,[D,d,e("p",null,[e("a",y,[b,o(l)]),s(" 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 "),e("a",h,[C,o(l)]),s(" 来用于数据操作。"),f]),_,e("p",null,[e("a",u,[g,o(l)]),s(" 在 Node 端不可用，Node 端有自己的 FS 实现，而 Node 端可以使用 "),F,s("。")]),m,o(t,{id:"mermaid-23",code:"eJxLL0osyFAI8uFSAAJHjWgl/6Ss1OQSpVhNsIgTUMQpJz8JxncG8t0yc1LhfAVdXTsFJzDpyAUA5vURfA=="}),A,e("p",null,[B,s(" 可以获取 "),e("a",E,[v,o(l)]),s(" 对象：")]),k,e("p",null,[s("文件还有一个特殊的工具 "),e("a",x,[w,o(l)]),s(" 用于读取文件，当一个读取事件结束时，它会调用 "),j,s(" 函数来传递参数。"),z,s(" 同样在 Node 端不可用。")]),N,e("p",null,[e("a",R,[V,o(l)]),s(" 对象用于查看或修改 "),S,s(" 对象的内容。")]),I,e("section",T,[e("ol",W,[e("li",J,[e("p",null,[s("MDN，"),e("a",P,[s("https://developer.mozilla.org/zh-CN/docs/Web/API/Blob"),o(l)]),s(),U])])])])])}const H=r(i,[["render",L],["__file","1-file-blob-intro.html.vue"]]),q=JSON.parse('{"path":"/notebook/js/file-and-blob/1-file-blob-intro.html","title":"1. File 和 Blob 简介","lang":"zh-CN","frontmatter":{"description":"1. File 和 Blob 简介 1.1 Blob 对象 Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。[1] Blob 更通俗的解释是大二进制对象。创建 Blob 对象的代码如下： 创建文件对象的代码如下，区别是文件必须要指定文件名称，而文件...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/notebook/js/file-and-blob/1-file-blob-intro.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"1. File 和 Blob 简介"}],["meta",{"property":"og:description","content":"1. File 和 Blob 简介 1.1 Blob 对象 Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。[1] Blob 更通俗的解释是大二进制对象。创建 Blob 对象的代码如下： 创建文件对象的代码如下，区别是文件必须要指定文件名称，而文件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T11:44:04.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-04T11:44:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. File 和 Blob 简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-04T11:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1.1 Blob 对象","slug":"11-blob-对象","link":"#11-blob-对象","children":[]},{"level":2,"title":"1.2 FileReader 对象","slug":"12-filereader-对象","link":"#12-filereader-对象","children":[]},{"level":2,"title":"1.3 DateView 对象","slug":"13-dateview-对象","link":"#13-dateview-对象","children":[]}],"git":{"createdTime":1679388444000,"updatedTime":1714823044000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":1.37,"words":412},"filePathRelative":"notebook/js/file-and-blob/1-file-blob-intro.md","localizedDate":"2023年3月21日","autoDesc":true}');export{H as comp,q as data};
