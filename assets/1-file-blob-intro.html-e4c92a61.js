import{_ as t,r as n,o as r,c,d as s,b as o,e,f as l}from"./app-eaa63399.js";const D={},d=s("h1",{id:"_1-file-和-blob-简介",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-file-和-blob-简介","aria-hidden":"true"},"#"),e(" 1. File 和 Blob 简介")],-1),i=s("h2",{id:"_1-1-blob-对象",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-1-blob-对象","aria-hidden":"true"},"#"),e(" 1.1 Blob 对象")],-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob",target:"_blank",rel:"noopener noreferrer"},C=s("code",null,"Blob",-1),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream",target:"_blank",rel:"noopener noreferrer"},h=s("code",null,"ReadableStream",-1),f=s("sup",{class:"footnote-ref"},[s("a",{href:"#footnote1"},"[1]"),s("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1),b=l(`<p><code>Blob</code> 更通俗的解释是大二进制对象。创建 <code>Blob</code> 对象的代码如下：</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">blob</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Blob</span><span style="color:#D4D4D4;">([</span><span style="color:#CE9178;">&#39;Hello, world!&#39;</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"></span></code></pre></div><p>创建文件对象的代码如下，区别是文件必须要指定文件名称，而文件对象并不一定代表文件系统上的一个文件，它只是一个表示：</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">file</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">File</span><span style="color:#D4D4D4;">([</span><span style="color:#CE9178;">&#39;Hello, world!&#39;</span><span style="color:#D4D4D4;">], </span><span style="color:#CE9178;">&#39;hello.txt&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre></div>`,4),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/File",target:"_blank",rel:"noopener noreferrer"},A=s("code",null,"File",-1),F=s("code",null,"Blob",-1),E=s("p",null,[s("code",null,"File"),e(" 类型继承于 "),s("code",null,"Blob"),e(" 类型：")],-1),g=s("p",null,[e("所以 "),s("code",null,"Blob"),e(" 的方法在 "),s("code",null,"File"),e(" 中都存在。")],-1),v=s("code",null,"Blob",-1),B={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"ArrayBuffer",-1),m=l(`<div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">arrayBuffer</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">blob</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">arrayBuffer</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre></div><h2 id="_1-2-filereader-对象" tabindex="-1"><a class="header-anchor" href="#_1-2-filereader-对象" aria-hidden="true">#</a> 1.2 FileReader 对象</h2>`,2),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader",target:"_blank",rel:"noopener noreferrer"},w=s("code",null,"FileReader",-1),z=s("code",null,"onload",-1),N=s("code",null,"FileReader",-1),R=l(`<div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">fileReader</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">FileReader</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">fileReader</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onload</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fileReader</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">);     </span><span style="color:#6A9955;">// ArrayBuffer(13)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">);   </span><span style="color:#6A9955;">// ArrayBuffer(13)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">fileReader</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">readAsArrayBuffer</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">file</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre></div><p>我们调试后可以看到，<code>fileReader.result</code> 和 <code>event.target.result</code> 值是一样的。</p><h2 id="_1-3-dateview-对象" tabindex="-1"><a class="header-anchor" href="#_1-3-dateview-对象" aria-hidden="true">#</a> 1.3 DateView 对象</h2>`,3),V={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",target:"_blank",rel:"noopener noreferrer"},j=s("code",null,"DataView",-1),I=s("code",null,"ArrayBuffer",-1),S=l(`<div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">arrayBuffer</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">blob</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">arrayBuffer</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">dataView</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">DataView</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arrayBuffer</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dataView</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dataView</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getUint8</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)); </span><span style="color:#6A9955;">// 72</span></span>
<span class="line"><span style="color:#9CDCFE;">dataView</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setUint8</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">104</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span></code></pre></div><p><code>DataView</code> 对象有很多 <code>set</code> 或者 <code>get</code> 开头的方法，用于获取指定位置或修改指定位置的数据。</p><hr class="footnotes-sep">`,3),W={class:"footnotes"},J={class:"footnotes-list"},P={id:"footnote1",class:"footnote-item"},U={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob",target:"_blank",rel:"noopener noreferrer"},L=s("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function M(G,H){const a=n("ExternalLinkIcon"),p=n("Mermaid");return r(),c("div",null,[d,i,s("p",null,[s("a",y,[C,o(a)]),e(" 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 "),s("a",_,[h,o(a)]),e(" 来用于数据操作。"),f]),b,s("p",null,[s("a",u,[A,o(a)]),e(" 在 Node 端不可用，Node 端有自己的 FS 实现，而 Node 端可以使用 "),F,e("。")]),E,o(p,{id:"mermaid-23",code:"eJxLL0osyFAI8uFSAAJHjWgl/6Ss1OQSpVhNsIgTUMQpJz8JxncG8t0yc1LhfAVdXTsFJzDpyAUA5vURfA=="}),g,s("p",null,[v,e(" 可以获取 "),s("a",B,[k,o(a)]),e(" 对象：")]),m,s("p",null,[e("文件还有一个特殊的工具 "),s("a",x,[w,o(a)]),e(" 用于读取文件，当一个读取事件结束时，它会调用 "),z,e(" 函数来传递参数。"),N,e(" 同样在 Node 端不可用。")]),R,s("p",null,[s("a",V,[j,o(a)]),e(" 对象用于查看或修改 "),I,e(" 对象的内容。")]),S,s("section",W,[s("ol",J,[s("li",P,[s("p",null,[e("MDN，"),s("a",U,[e("https://developer.mozilla.org/zh-CN/docs/Web/API/Blob"),o(a)]),e(),L])])])])])}const T=t(D,[["render",M],["__file","1-file-blob-intro.html.vue"]]);export{T as default};
