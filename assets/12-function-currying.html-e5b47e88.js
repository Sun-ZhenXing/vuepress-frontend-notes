import{_ as s,o as a,c as n,f as l}from"./app-43912dd2.js";const o={},p=l(`<h1 id="_12-函数柯里化" tabindex="-1"><a class="header-anchor" href="#_12-函数柯里化" aria-hidden="true">#</a> 12. 函数柯里化</h1><p>函数柯里化就是将使用多个参数的函数转换成一系列使用一个参数的函数。</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">addCurry</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">curry</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">add</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">addCurry</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">addCurry</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">)(</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"></span></code></pre></div><p>我们将调用 <code>add(1, 2, 3)</code> 的过程转换为了 <code>addCurry(1)(2)(3)</code>，每次只传递一个参数，调用上一步返回的函数。</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">curry</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">judge</span><span style="color:#D4D4D4;"> = (...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> ? </span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) : (...</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">judge</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">judge</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div>`,5),D=[p];function e(c,r){return a(),n("div",null,D)}const y=s(o,[["render",e],["__file","12-function-currying.html.vue"]]);export{y as default};
