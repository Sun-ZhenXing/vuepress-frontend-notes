import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as p,b as s,e as a,d as o}from"./app-FEcl1joV.js";const t={},e=s("h1",{id:"13-偏函数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#13-偏函数"},[s("span",null,"13. 偏函数")])],-1),c=s("p",null,[a("偏函数就是将一个 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(" 参数的函数转换成固定 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"x")]),s("annotation",{encoding:"application/x-tex"},"x")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"x")])])]),a(" 参的函数，剩余 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mi",null,"x")]),s("annotation",{encoding:"application/x-tex"},"n - x")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"x")])])]),a(" 个参数将在下次调用全部传入。")],-1),r=o(`<p>样例如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> partialAdd</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">partial</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">add</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">partialAdd</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"></span></code></pre></div><p><code>partial()</code> 函数实现如下：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> partial</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (...</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p>有时候我们想要一个占位符功能，使用 <code>placeholder</code> 占据一个位置，然后在下一次传递即可：</p><p>用起来就像这样：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> partialAdd2</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">partial</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">add</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">placeholder</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">partialAdd</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"></span></code></pre></div><p>代码实现：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> placeholder</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Symbol</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;placeholder&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> partial</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (...</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> curr</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">val</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">placeholder</span><span style="color:#D4D4D4;">) ? </span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">curr</span><span style="color:#D4D4D4;">++] : </span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">), ...</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">slice</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">curr</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"></span></code></pre></div>`,9),D=[e,c,r];function y(i,C){return l(),p("div",null,D)}const h=n(t,[["render",y],["__file","13-partial-function.html.vue"]]),u=JSON.parse('{"path":"/notebook/js/handwrite-36/13-partial-function.html","title":"13. 偏函数","lang":"zh-CN","frontmatter":{"description":"13. 偏函数 偏函数就是将一个 n 参数的函数转换成固定 x 参的函数，剩余 n−x 个参数将在下次调用全部传入。 样例如下： partial() 函数实现如下： 有时候我们想要一个占位符功能，使用 placeholder 占据一个位置，然后在下一次传递即可： 用起来就像这样： 代码实现：","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/notebook/js/handwrite-36/13-partial-function.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"13. 偏函数"}],["meta",{"property":"og:description","content":"13. 偏函数 偏函数就是将一个 n 参数的函数转换成固定 x 参的函数，剩余 n−x 个参数将在下次调用全部传入。 样例如下： partial() 函数实现如下： 有时候我们想要一个占位符功能，使用 placeholder 占据一个位置，然后在下一次传递即可： 用起来就像这样： 代码实现："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T11:44:04.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-04T11:44:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"13. 偏函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-04T11:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[],"git":{"createdTime":1675939447000,"updatedTime":1714823044000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":0.52,"words":157},"filePathRelative":"notebook/js/handwrite-36/13-partial-function.md","localizedDate":"2023年2月9日","autoDesc":true}');export{h as comp,u as data};
