import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as u,c as r,b as n,a,w as e,e as s,d as c}from"./app-C-lF8Tfs.js";const d={},k=n("h1",{id:"6-服务端程序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#6-服务端程序"},[n("span",null,"6. 服务端程序")])],-1),v={class:"table-of-contents"},m=c(`<p><code>server/</code> 目录用于在应用中注册 API 和服务器处理程序。</p><p>每个文件应该默认导出由 <code>defineEventHandler()</code> 或 <code>eventHandler()</code> 定义的函数。</p><p>处理程序可以直接返回 JSON 数据、<code>Promise</code>，或使用 <code>event.node.res.end()</code> 发送响应。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// server/api/hello.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    hello<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="61-服务器路由" tabindex="-1"><a class="header-anchor" href="#61-服务器路由"><span>6.1 服务器路由</span></a></h2><h3 id="路由参数" tabindex="-1"><a class="header-anchor" href="#路由参数"><span>路由参数</span></a></h3><p>服务器路由可以使用文件名中括号内的动态参数，例如 <code>/api/hello/[name].ts</code>，并通过 <code>event.context.params</code> 访问。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// server/api/hello/[name].ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getRouterParam</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>也可以配合验证器使用：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// server/api/hello/[name].ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> z <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zod&#39;</span>

<span class="token keyword">const</span> userSchema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token string">&#39;Guest&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  email<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineEventHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readValidatedBody</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> body <span class="token operator">=&gt;</span> userSchema<span class="token punctuation">.</span><span class="token function">safeParse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// or \`.parse\` to directly throw an error</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>success<span class="token punctuation">)</span>
    <span class="token keyword">throw</span> result<span class="token punctuation">.</span>error<span class="token punctuation">.</span>issues

  <span class="token comment">// User object is validated and typed!</span>
  <span class="token keyword">return</span> result<span class="token punctuation">.</span>data
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配-http-方法" tabindex="-1"><a class="header-anchor" href="#匹配-http-方法"><span>匹配 HTTP 方法</span></a></h3><p>可以使用形如 <code>name.[method].ts</code> 的文件名来匹配 HTTP 方法，例如 <code>hello.get.ts</code>。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// server/api/hello.get.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;...&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="全局捕获路由" tabindex="-1"><a class="header-anchor" href="#全局捕获路由"><span>全局捕获路由</span></a></h3><p>使用形如 <code>[...].ts</code> 或 <code>[...slug].ts</code> 文件名来捕获所有路由，其中可以通过 <code>event.context.params.slug</code> 获得 <code>slug</code> 的值。</p><h3 id="读取请求体" tabindex="-1"><a class="header-anchor" href="#读取请求体"><span>读取请求体</span></a></h3><p>使用 <code>readBody(event)</code> 或者使用 <code>readValidatedBody(event)</code> 来读取请求体。</p><p>与 <code>$fetch()</code> 一起使用，可以自动包装/解包 JSON 数据。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果在 GET 等不支持请求体的方法中使用 <code>readBody(event)</code>，将会抛出错误并返回 405。</p></div><h3 id="读取查询参数" tabindex="-1"><a class="header-anchor" href="#读取查询参数"><span>读取查询参数</span></a></h3><p>使用 <code>getQuery(event)</code> 或者使用 <code>getValidatedQuery(event)</code> 来读取查询参数。</p><h3 id="读取-cookies" tabindex="-1"><a class="header-anchor" href="#读取-cookies"><span>读取 Cookies</span></a></h3><p>使用 <code>parseCookies(event)</code> 来读取请求中的 Cookies。</p><h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h3><p>在每个请求处理程序中，可以使用 <code>createError()</code> 来创建错误响应。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>context<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">number</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token function">createError</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      statusCode<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
      statusMessage<span class="token operator">:</span> <span class="token string">&#39;ID should be an integer&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token string">&#39;All good&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>setResponseStatus(event, code)</code> 来设置响应状态码。</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><p>可使用 <code>useRuntimeConfig()</code> 来读取运行时配置。</p><p>将事件作为参数提供给 <code>useRuntimeConfig()</code> 是可选的，但建议传递它以获取服务器路由在运行时被环境变量覆盖的运行时配置。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineEventHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">useRuntimeConfig</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>

  <span class="token keyword">const</span> repo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.github.com/repos/nuxt/nuxt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span>
      Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>githubToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> repo
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，环境变量 <code>NUXT_GITHUB_TOKEN</code> 将覆盖自定义的 <code>config.githubToken</code> 值。</p><h3 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向"><span>重定向</span></a></h3><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineEventHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">sendRedirect</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">&#39;/path/redirect/to&#39;</span><span class="token punctuation">,</span> <span class="token number">302</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="62-中间件" tabindex="-1"><a class="header-anchor" href="#62-中间件"><span>6.2 中间件</span></a></h2><h2 id="63-插件" tabindex="-1"><a class="header-anchor" href="#63-插件"><span>6.3 插件</span></a></h2><h2 id="64-高级" tabindex="-1"><a class="header-anchor" href="#64-高级"><span>6.4 高级</span></a></h2><h3 id="发送流" tabindex="-1"><a class="header-anchor" href="#发送流"><span>发送流</span></a></h3>`,38),h=n("code",null,"sendStream(event, stream)",-1),g=c(`<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> sendStream <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;h3&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">sendStream</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;/path/to/file&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="服务端-kv-存储" tabindex="-1"><a class="header-anchor" href="#服务端-kv-存储"><span>服务端 K/V 存储</span></a></h3>`,2),f={href:"https://unstorage.unjs.io/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://nitro.unjs.io/guide/storage",target:"_blank",rel:"noopener noreferrer"},y=c(`<p>下面以 Redis 为例：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// nuxt.config.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  nitro<span class="token operator">:</span> <span class="token punctuation">{</span>
    storage<span class="token operator">:</span> <span class="token punctuation">{</span>
      redis<span class="token operator">:</span> <span class="token punctuation">{</span>
        driver<span class="token operator">:</span> <span class="token string">&#39;redis&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">/* redis connector options */</span>
        port<span class="token operator">:</span> <span class="token number">6379</span><span class="token punctuation">,</span> <span class="token comment">// Redis port</span>
        host<span class="token operator">:</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Redis host</span>
        username<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token comment">// needs Redis &gt;= 6</span>
        password<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        db<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// Defaults to 0</span>
        tls<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// tls/ssl</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineEventHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// List all keys with</span>
  <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">&#39;redis&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Set a key with</span>
  <span class="token keyword">await</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">&#39;redis&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// Remove a key with</span>
  <span class="token keyword">await</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">&#39;redis&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>WebSocket</span></a></h3>`,5),w={href:"http://Socket.IO",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.npmjs.com/package/nuxt-socket-io",target:"_blank",rel:"noopener noreferrer"},x=n("br",null,null,-1);function S(H,T){const t=o("router-link"),l=o("Badge"),p=o("ExternalLinkIcon");return u(),r("div",null,[k,n("nav",v,[n("ul",null,[n("li",null,[a(t,{to:"#61-服务器路由"},{default:e(()=>[s("6.1 服务器路由")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#路由参数"},{default:e(()=>[s("路由参数")]),_:1})]),n("li",null,[a(t,{to:"#匹配-http-方法"},{default:e(()=>[s("匹配 HTTP 方法")]),_:1})]),n("li",null,[a(t,{to:"#全局捕获路由"},{default:e(()=>[s("全局捕获路由")]),_:1})]),n("li",null,[a(t,{to:"#读取请求体"},{default:e(()=>[s("读取请求体")]),_:1})]),n("li",null,[a(t,{to:"#读取查询参数"},{default:e(()=>[s("读取查询参数")]),_:1})]),n("li",null,[a(t,{to:"#读取-cookies"},{default:e(()=>[s("读取 Cookies")]),_:1})]),n("li",null,[a(t,{to:"#错误处理"},{default:e(()=>[s("错误处理")]),_:1})]),n("li",null,[a(t,{to:"#配置"},{default:e(()=>[s("配置")]),_:1})]),n("li",null,[a(t,{to:"#重定向"},{default:e(()=>[s("重定向")]),_:1})])])]),n("li",null,[a(t,{to:"#62-中间件"},{default:e(()=>[s("6.2 中间件")]),_:1})]),n("li",null,[a(t,{to:"#63-插件"},{default:e(()=>[s("6.3 插件")]),_:1})]),n("li",null,[a(t,{to:"#64-高级"},{default:e(()=>[s("6.4 高级")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#发送流"},{default:e(()=>[s("发送流")]),_:1})]),n("li",null,[a(t,{to:"#服务端-kv-存储"},{default:e(()=>[s("服务端 K/V 存储")]),_:1})]),n("li",null,[a(t,{to:"#websocket"},{default:e(()=>[s("WebSocket")]),_:1})])])])])]),m,n("p",null,[a(l,{style:{"user-select":"none"},type:"warning"},{default:e(()=>[s("实验性")]),_:1}),s(" 现在可以使用 "),h,s(" 来发送流。")]),g,n("p",null,[s("Nitro 集成了 "),n("a",f,[s("unjs/unstorage"),a(p)]),s("，支持在服务端存储 K/V 信息。可安装各种适配器以支持不同环境和中间件。请阅读 "),n("a",b,[s("官方文档"),a(p)]),s(" 了解详细信息。")]),y,n("p",null,[s("建议使用 "),n("a",w,[s("Socket.IO"),a(p)]),s(" 等成熟的库来处理 WebSocket，Nuxt3 可用的库如 "),n("a",_,[s("nuxt-socket-io"),x,a(p)]),s("。")])])}const C=i(d,[["render",S],["__file","6.server.html.vue"]]),P=JSON.parse('{"path":"/nuxt/nuxt-tutorial/6.server.html","title":"6. 服务端程序","lang":"zh-CN","frontmatter":{"description":"6. 服务端程序 server/ 目录用于在应用中注册 API 和服务器处理程序。 每个文件应该默认导出由 defineEventHandler() 或 eventHandler() 定义的函数。 处理程序可以直接返回 JSON 数据、Promise，或使用 event.node.res.end() 发送响应。 6.1 服务器路由 路由参数 服务器路由...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/nuxt/nuxt-tutorial/6.server.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"6. 服务端程序"}],["meta",{"property":"og:description","content":"6. 服务端程序 server/ 目录用于在应用中注册 API 和服务器处理程序。 每个文件应该默认导出由 defineEventHandler() 或 eventHandler() 定义的函数。 处理程序可以直接返回 JSON 数据、Promise，或使用 event.node.res.end() 发送响应。 6.1 服务器路由 路由参数 服务器路由..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-05T08:34:26.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-05T08:34:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6. 服务端程序\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-05T08:34:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"6.1 服务器路由","slug":"61-服务器路由","link":"#61-服务器路由","children":[{"level":3,"title":"路由参数","slug":"路由参数","link":"#路由参数","children":[]},{"level":3,"title":"匹配 HTTP 方法","slug":"匹配-http-方法","link":"#匹配-http-方法","children":[]},{"level":3,"title":"全局捕获路由","slug":"全局捕获路由","link":"#全局捕获路由","children":[]},{"level":3,"title":"读取请求体","slug":"读取请求体","link":"#读取请求体","children":[]},{"level":3,"title":"读取查询参数","slug":"读取查询参数","link":"#读取查询参数","children":[]},{"level":3,"title":"读取 Cookies","slug":"读取-cookies","link":"#读取-cookies","children":[]},{"level":3,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":3,"title":"重定向","slug":"重定向","link":"#重定向","children":[]}]},{"level":2,"title":"6.2 中间件","slug":"62-中间件","link":"#62-中间件","children":[]},{"level":2,"title":"6.3 插件","slug":"63-插件","link":"#63-插件","children":[]},{"level":2,"title":"6.4 高级","slug":"64-高级","link":"#64-高级","children":[{"level":3,"title":"发送流","slug":"发送流","link":"#发送流","children":[]},{"level":3,"title":"服务端 K/V 存储","slug":"服务端-kv-存储","link":"#服务端-kv-存储","children":[]},{"level":3,"title":"WebSocket","slug":"websocket","link":"#websocket","children":[]}]}],"git":{"createdTime":1714898066000,"updatedTime":1714898066000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":2.61,"words":783},"filePathRelative":"nuxt/nuxt-tutorial/6.server.md","localizedDate":"2024年5月5日","autoDesc":true}');export{C as comp,P as data};
