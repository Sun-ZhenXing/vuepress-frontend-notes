import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as D,c as i,b as s,a,w as l,e as n,d as t}from"./app-FEcl1joV.js";const y={},d=s("h1",{id:"6-服务端程序",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#6-服务端程序"},[s("span",null,"6. 服务端程序")])],-1),C={class:"table-of-contents"},u=t(`<p><code>server/</code> 目录用于在应用中注册 API 和服务器处理程序。</p><p>每个文件应该默认导出由 <code>defineEventHandler()</code> 或 <code>eventHandler()</code> 定义的函数。</p><p>处理程序可以直接返回 JSON 数据、<code>Promise</code>，或使用 <code>event.node.res.end()</code> 发送响应。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// server/api/hello.ts</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#DCDCAA;"> defineEventHandler</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    hello:</span><span style="color:#CE9178;"> &#39;world&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="61-服务器路由" tabindex="-1"><a class="header-anchor" href="#61-服务器路由"><span>6.1 服务器路由</span></a></h2><h3 id="路由参数" tabindex="-1"><a class="header-anchor" href="#路由参数"><span>路由参数</span></a></h3><p>服务器路由可以使用文件名中括号内的动态参数，例如 <code>/api/hello/[name].ts</code>，并通过 <code>event.context.params</code> 访问。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// server/api/hello/[name].ts</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#DCDCAA;"> defineEventHandler</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> name</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">getRouterParam</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;name&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#CE9178;"> \`Hello, </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">!\`</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><p>也可以配合验证器使用：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// server/api/hello/[name].ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">z</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;zod&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> userSchema</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">z</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">object</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  name:</span><span style="color:#9CDCFE;"> z</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">default</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Guest&#39;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#9CDCFE;">  email:</span><span style="color:#9CDCFE;"> z</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">string</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">email</span><span style="color:#D4D4D4;">(),</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#DCDCAA;"> defineEventHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> readValidatedBody</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">body</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#9CDCFE;"> userSchema</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">safeParse</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">body</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#6A9955;">  // or \`.parse\` to directly throw an error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">success</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    throw</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">issues</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // User object is validated and typed!</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><h3 id="匹配-http-方法" tabindex="-1"><a class="header-anchor" href="#匹配-http-方法"><span>匹配 HTTP 方法</span></a></h3><p>可以使用形如 <code>name.[method].ts</code> 的文件名来匹配 HTTP 方法，例如 <code>hello.get.ts</code>。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// server/api/hello.get.ts</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#DCDCAA;"> defineEventHandler</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#CE9178;"> &#39;...&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><h3 id="全局捕获路由" tabindex="-1"><a class="header-anchor" href="#全局捕获路由"><span>全局捕获路由</span></a></h3><p>使用形如 <code>[...].ts</code> 或 <code>[...slug].ts</code> 文件名来捕获所有路由，其中可以通过 <code>event.context.params.slug</code> 获得 <code>slug</code> 的值。</p><h3 id="读取请求体" tabindex="-1"><a class="header-anchor" href="#读取请求体"><span>读取请求体</span></a></h3><p>使用 <code>readBody(event)</code> 或者使用 <code>readValidatedBody(event)</code> 来读取请求体。</p><p>与 <code>$fetch()</code> 一起使用，可以自动包装/解包 JSON 数据。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果在 GET 等不支持请求体的方法中使用 <code>readBody(event)</code>，将会抛出错误并返回 405。</p></div><h3 id="读取查询参数" tabindex="-1"><a class="header-anchor" href="#读取查询参数"><span>读取查询参数</span></a></h3><p>使用 <code>getQuery(event)</code> 或者使用 <code>getValidatedQuery(event)</code> 来读取查询参数。</p><h3 id="读取-cookies" tabindex="-1"><a class="header-anchor" href="#读取-cookies"><span>读取 Cookies</span></a></h3><p>使用 <code>parseCookies(event)</code> 来读取请求中的 Cookies。</p><h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h3><p>在每个请求处理程序中，可以使用 <code>createError()</code> 来创建错误响应。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#DCDCAA;"> defineEventHandler</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> id</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">parseInt</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">params</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#4EC9B0;"> number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">Number</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isInteger</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#C586C0;">    throw</span><span style="color:#DCDCAA;"> createError</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">      statusCode:</span><span style="color:#B5CEA8;"> 400</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      statusMessage:</span><span style="color:#CE9178;"> &#39;ID should be an integer&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#CE9178;"> &#39;All good&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><p>可以使用 <code>setResponseStatus(event, code)</code> 来设置响应状态码。</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><p>可使用 <code>useRuntimeConfig()</code> 来读取运行时配置。</p><p>将事件作为参数提供给 <code>useRuntimeConfig()</code> 是可选的，但建议传递它以获取服务器路由在运行时被环境变量覆盖的运行时配置。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#DCDCAA;"> defineEventHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> config</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useRuntimeConfig</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> repo</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> $fetch</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;https://api.github.com/repos/nuxt/nuxt&#39;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#9CDCFE;">    headers:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      Authorization:</span><span style="color:#CE9178;"> \`token </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">config</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">githubToken</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> repo</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><p>现在，环境变量 <code>NUXT_GITHUB_TOKEN</code> 将覆盖自定义的 <code>config.githubToken</code> 值。</p><h3 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向"><span>重定向</span></a></h3><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#DCDCAA;"> defineEventHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#DCDCAA;"> sendRedirect</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;/path/redirect/to&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">302</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="62-中间件" tabindex="-1"><a class="header-anchor" href="#62-中间件"><span>6.2 中间件</span></a></h2><h2 id="63-插件" tabindex="-1"><a class="header-anchor" href="#63-插件"><span>6.3 插件</span></a></h2><h2 id="64-高级" tabindex="-1"><a class="header-anchor" href="#64-高级"><span>6.4 高级</span></a></h2><h3 id="发送流" tabindex="-1"><a class="header-anchor" href="#发送流"><span>发送流</span></a></h3>`,38),h=s("code",null,"sendStream(event, stream)",-1),E=t(`<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> fs</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;node:fs&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">sendStream</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;h3&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#DCDCAA;"> defineEventHandler</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#DCDCAA;"> sendStream</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">fs</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createReadStream</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/path/to/file&#39;</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><h3 id="服务端-kv-存储" tabindex="-1"><a class="header-anchor" href="#服务端-kv-存储"><span>服务端 K/V 存储</span></a></h3>`,2),g={href:"https://unstorage.unjs.io/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://nitro.unjs.io/guide/storage",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>下面以 Redis 为例：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// nuxt.config.ts</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#DCDCAA;"> defineNuxtConfig</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">  nitro:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    storage:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      redis:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        driver:</span><span style="color:#CE9178;"> &#39;redis&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">        /* redis connector options */</span></span>
<span class="line"><span style="color:#9CDCFE;">        port:</span><span style="color:#B5CEA8;"> 6379</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Redis port</span></span>
<span class="line"><span style="color:#9CDCFE;">        host:</span><span style="color:#CE9178;"> &quot;127.0.0.1&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Redis host</span></span>
<span class="line"><span style="color:#9CDCFE;">        username:</span><span style="color:#CE9178;"> &quot;&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// needs Redis &gt;= 6</span></span>
<span class="line"><span style="color:#9CDCFE;">        password:</span><span style="color:#CE9178;"> &quot;&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">        db:</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// Defaults to 0</span></span>
<span class="line"><span style="color:#9CDCFE;">        tls:</span><span style="color:#D4D4D4;"> {} </span><span style="color:#6A9955;">// tls/ssl</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><p>使用：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#DCDCAA;"> defineEventHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">  // List all keys with</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> keys</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#DCDCAA;"> useStorage</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;redis&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">getKeys</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // Set a key with</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#DCDCAA;"> useStorage</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;redis&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">setItem</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;foo&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;bar&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // Remove a key with</span></span>
<span class="line"><span style="color:#C586C0;">  await</span><span style="color:#DCDCAA;"> useStorage</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;redis&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">removeItem</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;foo&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> {}</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><h3 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>WebSocket</span></a></h3>`,5),k={href:"http://Socket.IO",target:"_blank",rel:"noopener noreferrer"},A={href:"https://www.npmjs.com/package/nuxt-socket-io",target:"_blank",rel:"noopener noreferrer"},m=s("br",null,null,-1);function F(x,_){const e=p("router-link"),c=p("Badge"),o=p("ExternalLinkIcon");return D(),i("div",null,[d,s("nav",C,[s("ul",null,[s("li",null,[a(e,{to:"#61-服务器路由"},{default:l(()=>[n("6.1 服务器路由")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#路由参数"},{default:l(()=>[n("路由参数")]),_:1})]),s("li",null,[a(e,{to:"#匹配-http-方法"},{default:l(()=>[n("匹配 HTTP 方法")]),_:1})]),s("li",null,[a(e,{to:"#全局捕获路由"},{default:l(()=>[n("全局捕获路由")]),_:1})]),s("li",null,[a(e,{to:"#读取请求体"},{default:l(()=>[n("读取请求体")]),_:1})]),s("li",null,[a(e,{to:"#读取查询参数"},{default:l(()=>[n("读取查询参数")]),_:1})]),s("li",null,[a(e,{to:"#读取-cookies"},{default:l(()=>[n("读取 Cookies")]),_:1})]),s("li",null,[a(e,{to:"#错误处理"},{default:l(()=>[n("错误处理")]),_:1})]),s("li",null,[a(e,{to:"#配置"},{default:l(()=>[n("配置")]),_:1})]),s("li",null,[a(e,{to:"#重定向"},{default:l(()=>[n("重定向")]),_:1})])])]),s("li",null,[a(e,{to:"#62-中间件"},{default:l(()=>[n("6.2 中间件")]),_:1})]),s("li",null,[a(e,{to:"#63-插件"},{default:l(()=>[n("6.3 插件")]),_:1})]),s("li",null,[a(e,{to:"#64-高级"},{default:l(()=>[n("6.4 高级")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#发送流"},{default:l(()=>[n("发送流")]),_:1})]),s("li",null,[a(e,{to:"#服务端-kv-存储"},{default:l(()=>[n("服务端 K/V 存储")]),_:1})]),s("li",null,[a(e,{to:"#websocket"},{default:l(()=>[n("WebSocket")]),_:1})])])])])]),u,s("p",null,[a(c,{style:{"user-select":"none"},type:"warning"},{default:l(()=>[n("实验性")]),_:1}),n(" 现在可以使用 "),h,n(" 来发送流。")]),E,s("p",null,[n("Nitro 集成了 "),s("a",g,[n("unjs/unstorage"),a(o)]),n("，支持在服务端存储 K/V 信息。可安装各种适配器以支持不同环境和中间件。请阅读 "),s("a",v,[n("官方文档"),a(o)]),n(" 了解详细信息。")]),f,s("p",null,[n("建议使用 "),s("a",k,[n("Socket.IO"),a(o)]),n(" 等成熟的库来处理 WebSocket，Nuxt3 可用的库如 "),s("a",A,[n("nuxt-socket-io"),m,a(o)]),n("。")])])}const S=r(y,[["render",F],["__file","6.server.html.vue"]]),H=JSON.parse('{"path":"/nuxt/nuxt-tutorial/6.server.html","title":"6. 服务端程序","lang":"zh-CN","frontmatter":{"description":"6. 服务端程序 server/ 目录用于在应用中注册 API 和服务器处理程序。 每个文件应该默认导出由 defineEventHandler() 或 eventHandler() 定义的函数。 处理程序可以直接返回 JSON 数据、Promise，或使用 event.node.res.end() 发送响应。 6.1 服务器路由 路由参数 服务器路由...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/nuxt/nuxt-tutorial/6.server.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"6. 服务端程序"}],["meta",{"property":"og:description","content":"6. 服务端程序 server/ 目录用于在应用中注册 API 和服务器处理程序。 每个文件应该默认导出由 defineEventHandler() 或 eventHandler() 定义的函数。 处理程序可以直接返回 JSON 数据、Promise，或使用 event.node.res.end() 发送响应。 6.1 服务器路由 路由参数 服务器路由..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-05T08:34:26.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-05T08:34:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6. 服务端程序\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-05T08:34:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"6.1 服务器路由","slug":"61-服务器路由","link":"#61-服务器路由","children":[{"level":3,"title":"路由参数","slug":"路由参数","link":"#路由参数","children":[]},{"level":3,"title":"匹配 HTTP 方法","slug":"匹配-http-方法","link":"#匹配-http-方法","children":[]},{"level":3,"title":"全局捕获路由","slug":"全局捕获路由","link":"#全局捕获路由","children":[]},{"level":3,"title":"读取请求体","slug":"读取请求体","link":"#读取请求体","children":[]},{"level":3,"title":"读取查询参数","slug":"读取查询参数","link":"#读取查询参数","children":[]},{"level":3,"title":"读取 Cookies","slug":"读取-cookies","link":"#读取-cookies","children":[]},{"level":3,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":3,"title":"重定向","slug":"重定向","link":"#重定向","children":[]}]},{"level":2,"title":"6.2 中间件","slug":"62-中间件","link":"#62-中间件","children":[]},{"level":2,"title":"6.3 插件","slug":"63-插件","link":"#63-插件","children":[]},{"level":2,"title":"6.4 高级","slug":"64-高级","link":"#64-高级","children":[{"level":3,"title":"发送流","slug":"发送流","link":"#发送流","children":[]},{"level":3,"title":"服务端 K/V 存储","slug":"服务端-kv-存储","link":"#服务端-kv-存储","children":[]},{"level":3,"title":"WebSocket","slug":"websocket","link":"#websocket","children":[]}]}],"git":{"createdTime":1714898066000,"updatedTime":1714898066000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":2.61,"words":783},"filePathRelative":"nuxt/nuxt-tutorial/6.server.md","localizedDate":"2024年5月5日","autoDesc":true}');export{S as comp,H as data};
