import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,d as t}from"./app-C-lF8Tfs.js";const e={},p=t(`<h1 id="6141-binary-to-decimal" tabindex="-1"><a class="header-anchor" href="#6141-binary-to-decimal"><span>6141. ⚡Binary To Decimal</span></a></h1><p>&lt;题目描述&gt;</p><p>::: playground#ts 6141. Binary To Decimal</p><p>@file index.ts</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// ============= Test Cases =============</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Equal<span class="token punctuation">,</span> Expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@type-challenges/utils&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">cases</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>BinaryToDecimal<span class="token operator">&lt;</span><span class="token string">&#39;10&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>BinaryToDecimal<span class="token operator">&lt;</span><span class="token string">&#39;0011&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>BinaryToDecimal<span class="token operator">&lt;</span><span class="token string">&#39;00000000&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>BinaryToDecimal<span class="token operator">&lt;</span><span class="token string">&#39;11111111&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>BinaryToDecimal<span class="token operator">&lt;</span><span class="token string">&#39;10101010&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token comment">// ============= Your Code Here =============</span>
<span class="token keyword">type</span> <span class="token class-name">BinaryToDecimal<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">any</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><details class="hint-container details"><summary>点击查看答案</summary><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 你的答案</span>
</code></pre></div></details>`,7),o=[p];function l(c,r){return n(),s("div",null,o)}const m=a(e,[["render",l],["__file","6141-binary-to-decimal.html.vue"]]),u=JSON.parse('{"path":"/notebook/typescript/type-challenges/6141-binary-to-decimal.html","title":"6141. ⚡Binary To Decimal","lang":"zh-CN","frontmatter":{"description":"6141. ⚡Binary To Decimal <题目描述> ::: playground#ts 6141. Binary To Decimal @file index.ts ::: 点击查看答案","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/notebook/typescript/type-challenges/6141-binary-to-decimal.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"6141. ⚡Binary To Decimal"}],["meta",{"property":"og:description","content":"6141. ⚡Binary To Decimal <题目描述> ::: playground#ts 6141. Binary To Decimal @file index.ts ::: 点击查看答案"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T11:44:04.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-04T11:44:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6141. ⚡Binary To Decimal\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-04T11:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[],"git":{"createdTime":1685259723000,"updatedTime":1714823044000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":0.26,"words":77},"filePathRelative":"notebook/typescript/type-challenges/6141-binary-to-decimal.md","localizedDate":"2023年5月28日","autoDesc":true}');export{m as comp,u as data};
