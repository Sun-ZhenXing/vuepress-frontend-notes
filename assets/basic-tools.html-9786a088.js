import{_ as s,o as n,c as a,f as l}from"./app-83cdb7a6.js";const p={},o=l(`<h1 id="typescript-基本工具" tabindex="-1"><a class="header-anchor" href="#typescript-基本工具" aria-hidden="true">#</a> TypeScript 基本工具</h1><h2 id="_1-函数类型" tabindex="-1"><a class="header-anchor" href="#_1-函数类型" aria-hidden="true">#</a> 1. 函数类型</h2><h3 id="_1-1-函数类型表达式" tabindex="-1"><a class="header-anchor" href="#_1-1-函数类型表达式" aria-hidden="true">#</a> 1.1 函数类型表达式</h3><p>函数类型表达式（Function Type Expressions）是声明函数的简单有效的方法，例如 <code>(s: string) =&gt; string</code>。</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">greeter</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Hello, World&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_1-2-函数调用签名" tabindex="-1"><a class="header-anchor" href="#_1-2-函数调用签名" aria-hidden="true">#</a> 1.2 函数调用签名</h3><p>可以声明函数的调用签名（Call Signatures）来声明函数类型。</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Func</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">boolean</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">description</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">greeter</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Func</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Hello, World&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">description</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p><code>Func</code> 也常常使用 <code>interface</code> 来声明。</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Func</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">boolean</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">description</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_1-3-函数构造签名" tabindex="-1"><a class="header-anchor" href="#_1-3-函数构造签名" aria-hidden="true">#</a> 1.3 函数构造签名</h3><p>如果函数需要支持 <code>new</code>，则需要使用 <code>new</code> 签名。</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Func</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  (</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">boolean</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">Func</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">greeter</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Func</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Hello, World&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Hello, World&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p><code>new</code> 签名和调用签名可以同时存在。</p><h3 id="_1-4-函数重载" tabindex="-1"><a class="header-anchor" href="#_1-4-函数重载" aria-hidden="true">#</a> 1.4 函数重载</h3><p>函数重载声明也比较简单：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">makeDate</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">timestamp</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">Date</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">makeDate</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">m</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">Date</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">makeDate</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">mOrTimestamp</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">Date</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;"> !== </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;"> !== </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Date</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">mOrTimestamp</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Date</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">mOrTimestamp</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-泛型函数" tabindex="-1"><a class="header-anchor" href="#_1-5-泛型函数" aria-hidden="true">#</a> 1.5 泛型函数</h3><p>最简单的泛型函数：</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">firstElement</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">[]): </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">undefined</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>也可以有多个参数：</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Input</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Output</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Input</span><span style="color:#D4D4D4;">[], </span><span style="color:#DCDCAA;">func</span><span style="color:#D4D4D4;">: (</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Input</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Output</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">Output</span><span style="color:#D4D4D4;">[] {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">func</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>泛型也可以像 Java 一样有约束类型：</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">longest</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Type</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }&gt;(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Type</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Type</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &gt;= </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">a</span></span>
<span class="line"><span style="color:#D4D4D4;">  } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">b</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-编写声明文件" tabindex="-1"><a class="header-anchor" href="#_2-编写声明文件" aria-hidden="true">#</a> 2. 编写声明文件</h2><h3 id="_2-1-描述全局命名空间" tabindex="-1"><a class="header-anchor" href="#_2-1-描述全局命名空间" aria-hidden="true">#</a> 2.1 描述全局命名空间</h3><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">declare</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">namespace</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">myLib</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">makeGreeting</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">s</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">numberOfGreetings</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-2-声明全局变量" tabindex="-1"><a class="header-anchor" href="#_2-2-声明全局变量" aria-hidden="true">#</a> 2.2 声明全局变量</h3><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">declare</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">myGlobal</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#569CD6;">declare</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">myConstant</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#569CD6;">declare</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">myFunction</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-3-声明重载函数" tabindex="-1"><a class="header-anchor" href="#_2-3-声明重载函数" aria-hidden="true">#</a> 2.3 声明重载函数</h3><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">declare</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#569CD6;">declare</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">number</span></span>
<span class="line"></span></code></pre></div><h2 id="_3-常见工具类型" tabindex="-1"><a class="header-anchor" href="#_3-常见工具类型" aria-hidden="true">#</a> 3. 常见工具类型</h2><p>一些定义参考：</p><ul><li><code>never</code> 类型是永远不会有值的类型</li><li><code>any</code> 类型是任意类型，任意类型都可以看做 <code>any</code> 类型</li><li><code>unknown</code> 类型是类型安全的 <code>any</code> 类型</li></ul><table><thead><tr><th>类型</th><th>描述</th><th>发布版本</th></tr></thead><tbody><tr><td><code>Awaited&lt;T&gt;</code></td><td>获取 <code>Promise</code> 的返回值</td><td>4.5</td></tr><tr><td><code>Partial&lt;T&gt;</code></td><td>将类型 <code>T</code> 的所有属性设置为可选</td><td>2.1</td></tr><tr><td><code>Required&lt;T&gt;</code></td><td>将类型 <code>T</code> 的所有属性设置为必选</td><td>2.8</td></tr><tr><td><code>Readonly&lt;T&gt;</code></td><td>将类型 <code>T</code> 的所有属性设置为只读</td><td>2.1</td></tr><tr><td><code>Record&lt;K, T&gt;</code></td><td>由 <code>K</code> 指定属性并由 <code>T</code> 指定类型的对象类型</td><td>2.1</td></tr><tr><td><code>Pick&lt;T, K&gt;</code></td><td>从 <code>T</code> 中选择属性 <code>K</code> 的类型</td><td>2.1</td></tr><tr><td><code>Omit&lt;T, K&gt;</code></td><td>从 <code>T</code> 中排除属性 <code>K</code> 的类型</td><td>3.5</td></tr><tr><td><code>Exclude&lt;UnionType, ExcludedUnion&gt;</code></td><td>从 <code>UnionType</code> 中排除 <code>ExcludedUnion</code></td><td>2.8</td></tr><tr><td><code>Extract&lt;UnionType, IncludedUnion&gt;</code></td><td>从 <code>UnionType</code> 中提取 <code>IncludedUnion</code></td><td>2.8</td></tr><tr><td><code>NonNullable&lt;T&gt;</code></td><td>从 <code>T</code> 中排除 <code>null</code> 和 <code>undefined</code></td><td>2.8</td></tr><tr><td><code>Parameters&lt;T&gt;</code></td><td>获取函数类型 <code>T</code> 的参数类型</td><td>3.1</td></tr><tr><td><code>ConstructorParameters&lt;T&gt;</code></td><td>获取构造函数类型 <code>T</code> 的参数类型</td><td>3.1</td></tr><tr><td><code>ReturnType&lt;T&gt;</code></td><td>获取函数类型 <code>T</code> 的返回值类型</td><td>2.8</td></tr><tr><td><code>InstanceType&lt;T&gt;</code></td><td>获取构造函数类型 <code>T</code> 的实例类型</td><td>3.1</td></tr><tr><td><code>ThisParameterType&lt;T&gt;</code></td><td>获取函数类型 <code>T</code> 的 <code>this</code> 类型</td><td>3.3</td></tr><tr><td><code>OmitThisParameter&lt;T&gt;</code></td><td>从函数类型 <code>T</code> 中排除 <code>this</code> 类型</td><td>3.3</td></tr><tr><td><code>ThisType&lt;T&gt;</code></td><td>用于指定 <code>this</code> 类型</td><td>2.3</td></tr></tbody></table><p>常见的类型等价表示：</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Pick</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">keyof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  [</span><span style="color:#4EC9B0;">P</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">]: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">P</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Omit</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">symbol</span><span style="color:#D4D4D4;">&gt; = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  [</span><span style="color:#4EC9B0;">P</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Exclude</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">keyof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">&gt;]: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">P</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>另外由几个工具是用于字符串的：</p><ul><li><code>Uppercase&lt;StringType&gt;</code></li><li><code>Lowercase&lt;StringType&gt;</code></li><li><code>Capitalize&lt;StringType&gt;</code></li><li><code>Uncapitalize&lt;StringType&gt;</code></li></ul><h2 id="_4-有用的类型" tabindex="-1"><a class="header-anchor" href="#_4-有用的类型" aria-hidden="true">#</a> 4. 有用的类型</h2><h3 id="_4-1-元组类型" tabindex="-1"><a class="header-anchor" href="#_4-1-元组类型" aria-hidden="true">#</a> 4.1 元组类型</h3><p>元组类型描述一个集合对象的特征，例如 <code>[string, number]</code> 也是一种类型。元组类型还包含一种一个或多个的语法，使用 <code>...</code> 来表示可变参数（不定参数），例如：<code>[...args: number]</code>，这在函数中很常见。</p><h3 id="_4-2-可空类型" tabindex="-1"><a class="header-anchor" href="#_4-2-可空类型" aria-hidden="true">#</a> 4.2 可空类型</h3><p>可空类型在类型后面加上 <code>?</code>，表示 <code>t | undefined</code> 的含义，注意不是 <code>t | null</code>。</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">A</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p><code>b</code> 的类型是 <code>t | undefined</code>。可空类型的设计和 C# 的可空类型（<code>Nullable</code> 类型）类似，原因是 TypeScript 的作者就是 C# 的作者，这使得两种语言的设计异常巧妙地吻合。</p><h3 id="_4-3-交叉类型" tabindex="-1"><a class="header-anchor" href="#_4-3-交叉类型" aria-hidden="true">#</a> 4.3 交叉类型</h3><p>如果要满足两种以上的类型，可以使用 <code>&amp;</code> 来交叉两种类型。交叉类型表示这个类型满足被交叉的所有类型。</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">A</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">B</span><span style="color:#D4D4D4;"> &amp; </span><span style="color:#4EC9B0;">C</span></span>
<span class="line"></span></code></pre></div><p>那么 <code>A</code> 同时具有 <code>B</code> 和 <code>C</code> 的结构。</p><p>例如：</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">A</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> | </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> | </span><span style="color:#B5CEA8;">3</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">B</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> | </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;"> | </span><span style="color:#B5CEA8;">4</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">C</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">A</span><span style="color:#D4D4D4;"> &amp; </span><span style="color:#4EC9B0;">B</span></span>
<span class="line"></span></code></pre></div><p>此时 <code>C</code> 的类型为 <code>1 | 3</code>，因为 <code>1 | 3</code> 同时满足 <code>A</code> 和 <code>B</code>。</p><p>但是 <code>interface</code> 的行为就有点不同了：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">I1</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">I2</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">I3</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">I1</span><span style="color:#D4D4D4;"> &amp; </span><span style="color:#4EC9B0;">I2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">a</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">I3</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">x:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">y:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">2</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了同时满足 <code>I1</code> 和 <code>I2</code>，<code>I3</code> 必须同时具有这两个接口的所有属性。</p><h3 id="_4-4-as-用法" tabindex="-1"><a class="header-anchor" href="#_4-4-as-用法" aria-hidden="true">#</a> 4.4 <code>as</code> 用法</h3><p><code>as</code> 总是将指定对象视为另一种类型的对象，并且这两种类型是可转换的。如果明显不能转换的类型将报错。</p><p>哪些类型可以转换？</p><ul><li>可空类型和对应的原类型</li><li><code>a | null</code> 转换为 <code>a</code></li><li><code>any</code> 的其他任意类型</li><li><code>unknown</code> 和其他任意类型</li><li>……</li></ul><p>如果明显不能转换的类型，需要强制转换时，可以借助 <code>any</code>。</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// 将 a 视为 string</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">a</span><span style="color:#D4D4D4;"> = (</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"></span></code></pre></div><p>例如：</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">canvas</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;canvas&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#6A9955;">// canvas: HTMLElement | null</span></span>
<span class="line"></span></code></pre></div><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">canvas2</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getElementById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;canvas&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HTMLCanvasElement</span></span>
<span class="line"><span style="color:#6A9955;">// canvas: HTMLCanvasElement</span></span>
<span class="line"></span></code></pre></div><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">ctx</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">canvas</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getContext</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;2d&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#6A9955;">// ctx: CanvasRenderingContext2D | null</span></span>
<span class="line"></span></code></pre></div><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">ctx</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">canvas</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getContext</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;2d&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">CanvasRenderingContext2D</span></span>
<span class="line"><span style="color:#6A9955;">// ctx: CanvasRenderingContext2D</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-5-高级特征" tabindex="-1"><a class="header-anchor" href="#_4-5-高级特征" aria-hidden="true">#</a> 4.5 高级特征</h3><ul><li>条件类型</li><li>映射类型</li><li>索引类型</li><li>区分类型</li><li>枚举类型</li><li>象征类型</li></ul><p>这些类型在本文不会详细讨论，我们只会举例一些情况来说明。</p>`,70),e=[o];function c(t,D){return n(),a("div",null,e)}const y=s(p,[["render",c],["__file","basic-tools.html.vue"]]);export{y as default};
