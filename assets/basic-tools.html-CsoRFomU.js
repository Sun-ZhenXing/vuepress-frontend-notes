import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-DaBZCpA_.js";const e={},p=t(`<h1 id="typescript-基本工具" tabindex="-1"><a class="header-anchor" href="#typescript-基本工具"><span>TypeScript 基本工具</span></a></h1><h2 id="1-函数类型" tabindex="-1"><a class="header-anchor" href="#1-函数类型"><span>1. 函数类型</span></a></h2><h3 id="11-函数类型表达式" tabindex="-1"><a class="header-anchor" href="#11-函数类型表达式"><span>1.1 函数类型表达式</span></a></h3><p>函数类型表达式（Function Type Expressions）是声明函数的简单有效的方法，例如 <code>(s: string) =&gt; string</code>。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">greeter</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="12-函数调用签名" tabindex="-1"><a class="header-anchor" href="#12-函数调用签名"><span>1.2 函数调用签名</span></a></h3><p>可以声明函数的调用签名（Call Signatures）来声明函数类型。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Func</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">greeter</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> Func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World&quot;</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>description<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>Func</code> 也常常使用 <code>interface</code> 来声明。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Func</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="13-函数构造签名" tabindex="-1"><a class="header-anchor" href="#13-函数构造签名"><span>1.3 函数构造签名</span></a></h3><p>如果函数需要支持 <code>new</code>，则需要使用 <code>new</code> 签名。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Func</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  <span class="token keyword">new</span> <span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Func
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">greeter</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> Func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">fn</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>new</code> 签名和调用签名可以同时存在。</p><h3 id="14-函数重载" tabindex="-1"><a class="header-anchor" href="#14-函数重载"><span>1.4 函数重载</span></a></h3><p>函数重载声明也比较简单：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">makeDate</span><span class="token punctuation">(</span>timestamp<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Date
<span class="token keyword">function</span> <span class="token function">makeDate</span><span class="token punctuation">(</span>m<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Date

<span class="token keyword">function</span> <span class="token function">makeDate</span><span class="token punctuation">(</span>mOrTimestamp<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> d<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Date <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> mOrTimestamp<span class="token punctuation">,</span> d<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>mOrTimestamp<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="15-泛型函数" tabindex="-1"><a class="header-anchor" href="#15-泛型函数"><span>1.5 泛型函数</span></a></h3><p>最简单的泛型函数：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">firstElement</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>也可以有多个参数：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">map</span><span class="token generic class-name"><span class="token operator">&lt;</span>Input<span class="token punctuation">,</span> Output<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Input<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> Input<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Output<span class="token punctuation">)</span><span class="token operator">:</span> Output<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>泛型也可以像 Java 一样有约束类型：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">longest</span><span class="token generic class-name"><span class="token operator">&lt;</span>Type <span class="token keyword">extends</span> <span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span> Type<span class="token punctuation">,</span> b<span class="token operator">:</span> Type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> b
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="2-编写声明文件" tabindex="-1"><a class="header-anchor" href="#2-编写声明文件"><span>2. 编写声明文件</span></a></h2><h3 id="21-描述全局命名空间" tabindex="-1"><a class="header-anchor" href="#21-描述全局命名空间"><span>2.1 描述全局命名空间</span></a></h3><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">namespace</span> myLib <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">makeGreeting</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">let</span> numberOfGreetings<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="22-声明全局变量" tabindex="-1"><a class="header-anchor" href="#22-声明全局变量"><span>2.2 声明全局变量</span></a></h3><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">let</span> myGlobal<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token keyword">declare</span> <span class="token keyword">const</span> myConstant<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
</code></pre></div><h3 id="23-声明重载函数" tabindex="-1"><a class="header-anchor" href="#23-声明重载函数"><span>2.3 声明重载函数</span></a></h3><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>
</code></pre></div><h2 id="3-常见工具类型" tabindex="-1"><a class="header-anchor" href="#3-常见工具类型"><span>3. 常见工具类型</span></a></h2><p>一些定义参考：</p><ul><li><code>never</code> 类型是永远不会有值的类型</li><li><code>any</code> 类型是任意类型，任意类型都可以看做 <code>any</code> 类型</li><li><code>unknown</code> 类型是类型安全的 <code>any</code> 类型</li></ul><table><thead><tr><th>类型</th><th>描述</th><th>发布版本</th></tr></thead><tbody><tr><td><code>Awaited&lt;T&gt;</code></td><td>获取 <code>Promise</code> 的返回值</td><td>4.5</td></tr><tr><td><code>Partial&lt;T&gt;</code></td><td>将类型 <code>T</code> 的所有属性设置为可选</td><td>2.1</td></tr><tr><td><code>Required&lt;T&gt;</code></td><td>将类型 <code>T</code> 的所有属性设置为必选</td><td>2.8</td></tr><tr><td><code>Readonly&lt;T&gt;</code></td><td>将类型 <code>T</code> 的所有属性设置为只读</td><td>2.1</td></tr><tr><td><code>Record&lt;K, T&gt;</code></td><td>由 <code>K</code> 指定属性并由 <code>T</code> 指定类型的对象类型</td><td>2.1</td></tr><tr><td><code>Pick&lt;T, K&gt;</code></td><td>从 <code>T</code> 中选择属性 <code>K</code> 的类型</td><td>2.1</td></tr><tr><td><code>Omit&lt;T, K&gt;</code></td><td>从 <code>T</code> 中排除属性 <code>K</code> 的类型</td><td>3.5</td></tr><tr><td><code>Exclude&lt;UnionType, ExcludedUnion&gt;</code></td><td>从 <code>UnionType</code> 中排除 <code>ExcludedUnion</code></td><td>2.8</td></tr><tr><td><code>Extract&lt;UnionType, IncludedUnion&gt;</code></td><td>从 <code>UnionType</code> 中提取 <code>IncludedUnion</code></td><td>2.8</td></tr><tr><td><code>NonNullable&lt;T&gt;</code></td><td>从 <code>T</code> 中排除 <code>null</code> 和 <code>undefined</code></td><td>2.8</td></tr><tr><td><code>Parameters&lt;T&gt;</code></td><td>获取函数类型 <code>T</code> 的参数类型</td><td>3.1</td></tr><tr><td><code>ConstructorParameters&lt;T&gt;</code></td><td>获取构造函数类型 <code>T</code> 的参数类型</td><td>3.1</td></tr><tr><td><code>ReturnType&lt;T&gt;</code></td><td>获取函数类型 <code>T</code> 的返回值类型</td><td>2.8</td></tr><tr><td><code>InstanceType&lt;T&gt;</code></td><td>获取构造函数类型 <code>T</code> 的实例类型</td><td>3.1</td></tr><tr><td><code>ThisParameterType&lt;T&gt;</code></td><td>获取函数类型 <code>T</code> 的 <code>this</code> 类型</td><td>3.3</td></tr><tr><td><code>OmitThisParameter&lt;T&gt;</code></td><td>从函数类型 <code>T</code> 中排除 <code>this</code> 类型</td><td>3.3</td></tr><tr><td><code>ThisType&lt;T&gt;</code></td><td>用于指定 <code>this</code> 类型</td><td>2.3</td></tr></tbody></table><p>常见的类型等价表示：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>另外由几个工具是用于字符串的：</p><ul><li><code>Uppercase&lt;StringType&gt;</code></li><li><code>Lowercase&lt;StringType&gt;</code></li><li><code>Capitalize&lt;StringType&gt;</code></li><li><code>Uncapitalize&lt;StringType&gt;</code></li></ul><h2 id="4-有用的类型" tabindex="-1"><a class="header-anchor" href="#4-有用的类型"><span>4. 有用的类型</span></a></h2><h3 id="41-元组类型" tabindex="-1"><a class="header-anchor" href="#41-元组类型"><span>4.1 元组类型</span></a></h3><p>元组类型描述一个集合对象的特征，例如 <code>[string, number]</code> 也是一种类型。元组类型还包含一种一个或多个的语法，使用 <code>...</code> 来表示可变参数（不定参数），例如：<code>[...args: number]</code>，这在函数中很常见。</p><h3 id="42-可空类型" tabindex="-1"><a class="header-anchor" href="#42-可空类型"><span>4.2 可空类型</span></a></h3><p>可空类型在类型后面加上 <code>?</code>，表示 <code>t | undefined</code> 的含义，注意不是 <code>t | null</code>。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">number</span>
  b<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>b</code> 的类型是 <code>t | undefined</code>。可空类型的设计和 C# 的可空类型（<code>Nullable</code> 类型）类似，原因是 TypeScript 的作者就是 C# 的作者，这使得两种语言的设计异常巧妙地吻合。</p><h3 id="43-交叉类型" tabindex="-1"><a class="header-anchor" href="#43-交叉类型"><span>4.3 交叉类型</span></a></h3><p>如果要满足两种以上的类型，可以使用 <code>&amp;</code> 来交叉两种类型。交叉类型表示这个类型满足被交叉的所有类型。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token constant">B</span> <span class="token operator">&amp;</span> <span class="token constant">C</span>
</code></pre></div><p>那么 <code>A</code> 同时具有 <code>B</code> 和 <code>C</code> 的结构。</p><p>例如：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> <span class="token constant">B</span>
</code></pre></div><p>此时 <code>C</code> 的类型为 <code>1 | 3</code>，因为 <code>1 | 3</code> 同时满足 <code>A</code> 和 <code>B</code>。</p><p>但是 <code>interface</code> 的行为就有点不同了：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">I1</span></span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">I2</span></span> <span class="token punctuation">{</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">I3</span></span> <span class="token operator">=</span> <span class="token constant">I1</span> <span class="token operator">&amp;</span> <span class="token constant">I2</span>

<span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token constant">I3</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了同时满足 <code>I1</code> 和 <code>I2</code>，<code>I3</code> 必须同时具有这两个接口的所有属性。</p><h3 id="44-as-用法" tabindex="-1"><a class="header-anchor" href="#44-as-用法"><span>4.4 <code>as</code> 用法</span></a></h3><p><code>as</code> 总是将指定对象视为另一种类型的对象，并且这两种类型是可转换的。如果明显不能转换的类型将报错。</p><p>哪些类型可以转换？</p><ul><li>可空类型和对应的原类型</li><li><code>a | null</code> 转换为 <code>a</code></li><li><code>any</code> 的其他任意类型</li><li><code>unknown</code> 和其他任意类型</li><li>……</li></ul><p>如果明显不能转换的类型，需要强制转换时，可以借助 <code>any</code>。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 将 a 视为 string</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span>
</code></pre></div><p>例如：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;canvas&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// canvas: HTMLElement | null</span>
</code></pre></div><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> canvas2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;canvas&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLCanvasElement
<span class="token comment">// canvas: HTMLCanvasElement</span>
</code></pre></div><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// ctx: CanvasRenderingContext2D | null</span>
</code></pre></div><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> CanvasRenderingContext2D
<span class="token comment">// ctx: CanvasRenderingContext2D</span>
</code></pre></div><h3 id="45-高级特征" tabindex="-1"><a class="header-anchor" href="#45-高级特征"><span>4.5 高级特征</span></a></h3><ul><li>条件类型</li><li>映射类型</li><li>索引类型</li><li>区分类型</li><li>枚举类型</li><li>象征类型</li></ul><p>这些类型在本文不会详细讨论，我们只会举例一些情况来说明。</p>`,70),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","basic-tools.html.vue"]]),k=JSON.parse('{"path":"/notebook/typescript/basic-tools.html","title":"TypeScript 基本工具","lang":"zh-CN","frontmatter":{"description":"TypeScript 基本工具 1. 函数类型 1.1 函数类型表达式 函数类型表达式（Function Type Expressions）是声明函数的简单有效的方法，例如 (s: string) => string。 1.2 函数调用签名 可以声明函数的调用签名（Call Signatures）来声明函数类型。 Func 也常常使用 interfac...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/notebook/typescript/basic-tools.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"TypeScript 基本工具"}],["meta",{"property":"og:description","content":"TypeScript 基本工具 1. 函数类型 1.1 函数类型表达式 函数类型表达式（Function Type Expressions）是声明函数的简单有效的方法，例如 (s: string) => string。 1.2 函数调用签名 可以声明函数的调用签名（Call Signatures）来声明函数类型。 Func 也常常使用 interfac..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T11:44:04.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-04T11:44:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript 基本工具\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-04T11:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 函数类型","slug":"1-函数类型","link":"#1-函数类型","children":[{"level":3,"title":"1.1 函数类型表达式","slug":"11-函数类型表达式","link":"#11-函数类型表达式","children":[]},{"level":3,"title":"1.2 函数调用签名","slug":"12-函数调用签名","link":"#12-函数调用签名","children":[]},{"level":3,"title":"1.3 函数构造签名","slug":"13-函数构造签名","link":"#13-函数构造签名","children":[]},{"level":3,"title":"1.4 函数重载","slug":"14-函数重载","link":"#14-函数重载","children":[]},{"level":3,"title":"1.5 泛型函数","slug":"15-泛型函数","link":"#15-泛型函数","children":[]}]},{"level":2,"title":"2. 编写声明文件","slug":"2-编写声明文件","link":"#2-编写声明文件","children":[{"level":3,"title":"2.1 描述全局命名空间","slug":"21-描述全局命名空间","link":"#21-描述全局命名空间","children":[]},{"level":3,"title":"2.2 声明全局变量","slug":"22-声明全局变量","link":"#22-声明全局变量","children":[]},{"level":3,"title":"2.3 声明重载函数","slug":"23-声明重载函数","link":"#23-声明重载函数","children":[]}]},{"level":2,"title":"3. 常见工具类型","slug":"3-常见工具类型","link":"#3-常见工具类型","children":[]},{"level":2,"title":"4. 有用的类型","slug":"4-有用的类型","link":"#4-有用的类型","children":[{"level":3,"title":"4.1 元组类型","slug":"41-元组类型","link":"#41-元组类型","children":[]},{"level":3,"title":"4.2 可空类型","slug":"42-可空类型","link":"#42-可空类型","children":[]},{"level":3,"title":"4.3 交叉类型","slug":"43-交叉类型","link":"#43-交叉类型","children":[]},{"level":3,"title":"4.4 as 用法","slug":"44-as-用法","link":"#44-as-用法","children":[]},{"level":3,"title":"4.5 高级特征","slug":"45-高级特征","link":"#45-高级特征","children":[]}]}],"git":{"createdTime":1684914817000,"updatedTime":1714823044000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":4.37,"words":1311},"filePathRelative":"notebook/typescript/basic-tools.md","localizedDate":"2023年5月24日","autoDesc":true}');export{u as comp,k as data};
