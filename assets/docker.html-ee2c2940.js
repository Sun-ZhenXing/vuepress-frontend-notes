import{_ as p,r as t,o as r,c as d,b as n,a,w as o,d as s,e as c}from"./app-54d12e78.js";const u={},k=n("h1",{id:"docker-部署前端项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#docker-部署前端项目","aria-hidden":"true"},"#"),s(" Docker 部署前端项目")],-1),v={class:"table-of-contents"},m=c(`<h2 id="_1-nginx-快速演示" tabindex="-1"><a class="header-anchor" href="#_1-nginx-快速演示" aria-hidden="true">#</a> 1. Nginx 快速演示</h2><p>为了快速演示，我们可以使用 Docker 快速部署一个前端项目。假设我们的项目构建输出在 <code>/dist/</code> 目录下。</p><p>我们需要在项目添加一个 <code>Dockerfile</code> 文件，内容如下：</p><div class="language-docker" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> nginx:1.24.0-alpine3.17-slim</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token variable">$PWD</span>/dist/ /usr/share/nginx/html/</span>

<span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;nginx&quot;</span>, <span class="token string">&quot;-g&quot;</span>, <span class="token string">&quot;daemon off;&quot;</span>]</span>
</code></pre></div><p>可以在 Linux/WSL2 中使用下面的命令构建：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> my_test:v1 <span class="token builtin class-name">.</span>
</code></pre></div><p>构建成功后运行容器：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 my_test:v1
</code></pre></div>`,8),h={href:"http://localhost/",target:"_blank",rel:"noopener noreferrer"},g=c(`<h2 id="_2-编译并部署" tabindex="-1"><a class="header-anchor" href="#_2-编译并部署" aria-hidden="true">#</a> 2. 编译并部署</h2><p>在同一个 <code>Dockerfile</code> 文件中，我们可以使用两个镜像来完成编译和部署。</p><p>如果项目的根目录不是 <code>/</code>，我们可以将 <code>index.html</code> 文件的内容设置为：</p><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;/docs/&#39;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>这样我们就会默认被定向到 <code>/docs/</code> 目录下，也可以使用 <code>nginx.conf</code> 文件来配置。</p><p>下面，我们构建一个基于 VuePress 的文档项目，默认页面是 <code>/vuepress-frontend-notes/</code>（即你现在正在看到的项目），使用 <code>pnpm</code> 编译。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># Builder</span>
<span class="token instruction"><span class="token keyword">FROM</span> node:18.16.0-bullseye-slim <span class="token keyword">as</span> builder</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token instruction"><span class="token keyword">COPY</span> *.* ./</span>
<span class="token instruction"><span class="token keyword">COPY</span> Dockerfile ./</span>
<span class="token instruction"><span class="token keyword">COPY</span> docs/ ./docs/</span>

<span class="token instruction"><span class="token keyword">ENV</span> NODE_OPTIONS=--max-old-space-size=4096</span>

<span class="token instruction"><span class="token keyword">RUN</span> npm install -g pnpm &amp;&amp; <span class="token operator">\\</span>
    pnpm install &amp;&amp; <span class="token operator">\\</span>
    pnpm build</span>

<span class="token comment"># Nginx Server</span>
<span class="token instruction"><span class="token keyword">FROM</span> nginx:1.24.0-alpine3.17-slim</span>

<span class="token instruction"><span class="token keyword">ENV</span> TZ=Asia/Shanghai <span class="token operator">\\</span>
    LANG=C.UTF-8 <span class="token operator">\\</span>
    LANGUAGE=C.UTF-8 <span class="token operator">\\</span>
    LC_ALL=C.UTF-8</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/share/nginx/html/vuepress-frontend-notes/</span>

<span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">&quot;&lt;script&gt;window.location.href = &#39;/vuepress-frontend-notes/&#39;&lt;/script&gt;&quot;</span> &gt; /usr/share/nginx/html/index.html</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /app/docs/.vuepress/dist/ ./</span>

<span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span>

<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;nginx&quot;</span>, <span class="token string">&quot;-g&quot;</span>, <span class="token string">&quot;daemon off;&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以克隆本项目，即上放的 GitHub 地址，本项目提供了上述 <code>Dockerfile</code> 文件，你可以构建镜像：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> vuepress-frontend-notes <span class="token builtin class-name">.</span>
</code></pre></div><p>构建成功后运行容器：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 vuepress-frontend-notes
</code></pre></div>`,11),_={href:"http://localhost/",target:"_blank",rel:"noopener noreferrer"},b={href:"http://localhost/vuepress-frontend-notes/",target:"_blank",rel:"noopener noreferrer"},f={class:"hint-container warning"},x=n("p",{class:"hint-container-title"},"溢出堆空间",-1),w=n("p",null,[s("如果你的项目比较大，或者服务器内存不足，可能在构建时出现 "),n("code",null,"FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory"),s(" 错误。")],-1),y=n("p",null,[s("几种解决方法，其中 "),n("code",null,"4096"),s("（4 GB）可改为你需要的空间大小：")],-1),O=n("li",null,[s("在 "),n("code",null,"Dockerfile"),s(" 中添加 "),n("code",null,"ENV NODE_OPTIONS=--max-old-space-size=4096")],-1),N=n("li",null,[s("添加命令 "),n("code",null,"export NODE_OPTIONS=--max_old_space_size=4096")],-1),D={href:"https://www.npmjs.com/package/increase-memory-limit",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"increase-memory-limit",-1);function q(C,P){const l=t("router-link"),e=t("ExternalLinkIcon"),i=t("Badge");return r(),d("div",null,[k,n("nav",v,[n("ul",null,[n("li",null,[a(l,{to:"#_1-nginx-快速演示"},{default:o(()=>[s("1. Nginx 快速演示")]),_:1})]),n("li",null,[a(l,{to:"#_2-编译并部署"},{default:o(()=>[s("2. 编译并部署")]),_:1})])])]),m,n("p",null,[s("打开 "),n("a",h,[s("http://localhost/"),a(e)]),s(" 即可看到内容。")]),g,n("p",null,[s("打开 "),n("a",_,[s("http://localhost/"),a(e)]),s(" 即可看到被重定向到 "),n("a",b,[s("http://localhost/vuepress-frontend-notes/"),a(e)]),s("，可以找到本页面的内容。")]),n("div",f,[x,w,y,n("ul",null,[O,N,n("li",null,[a(i,{type:"warning"},{default:o(()=>[s("已弃用")]),_:1}),s(" 使用 "),n("a",D,[E,a(e)]),s(" 插件")])])])])}const L=p(u,[["render",q],["__file","docker.html.vue"]]);export{L as default};
