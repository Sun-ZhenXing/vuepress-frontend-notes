import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as D,c as y,b as s,a as n,w as p,e as a,d as t}from"./app-FEcl1joV.js";const d={},C=s("h1",{id:"prisma-入门",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#prisma-入门"},[s("span",null,"Prisma 入门")])],-1),h={class:"table-of-contents"},E=s("h2",{id:"1-什么是-prisma",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#1-什么是-prisma"},[s("span",null,"1. 什么是 Prisma")])],-1),m=s("p",null,"Prisma 是一个开源的 ORM 框架，支持各类常见数据库系统，提供了数据模型、自动迁移、类型安全和自动补全支持，拥有活跃的社区和完善的支持。不同于传统的 ORM 框架，Prisma 使用了一些新方法来避免 ORM 的一些固有问题。",-1),u=s("p",null,"Prisma 现在不仅支持关系型数据库，也支持 NoSQL 数据库，如 MongoDB。此外还支持地理数据库 CockroachDB 等。",-1),g=s("p",null,"Prisma 适用于在各种架构中使用，如 REST API、GraphQL API、gRPC API 等。常见全栈应用：",-1),b={href:"https://nextjs.org/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://remix.run/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://kit.svelte.dev/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://nuxt.com/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://redwoodjs.com/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://create.t3.gg/",target:"_blank",rel:"noopener noreferrer"},x=t(`<h2 id="2-开始使用" tabindex="-1"><a class="header-anchor" href="#2-开始使用"><span>2. 开始使用</span></a></h2><h3 id="21-创建项目" tabindex="-1"><a class="header-anchor" href="#21-创建项目"><span>2.1 创建项目</span></a></h3><p>下面我们将创建一个 TypeScript 项目和一个本地 SQLite 数据库，从头开始使用 Prisma。它包括数据建模、迁移和查询数据库。</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">mkdir</span><span style="color:#CE9178;"> hello-prisma</span></span>
<span class="line"><span style="color:#DCDCAA;">cd</span><span style="color:#CE9178;"> hello-prisma</span></span>
<span class="line"></span></code></pre></div><p>下面我们将使用 <code>pnpm</code> 来创建和管理项目：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pnpm</span><span style="color:#CE9178;"> init</span></span>
<span class="line"><span style="color:#DCDCAA;">pnpm</span><span style="color:#CE9178;"> add</span><span style="color:#569CD6;"> -D</span><span style="color:#CE9178;"> typescript</span><span style="color:#CE9178;"> ts-node</span><span style="color:#CE9178;"> @types/node</span></span>
<span class="line"></span></code></pre></div><p>初始化 TypeScript 项目：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npx</span><span style="color:#CE9178;"> tsc</span><span style="color:#569CD6;"> --init</span></span>
<span class="line"></span></code></pre></div><p>添加 Prisma 依赖：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pnpm</span><span style="color:#CE9178;"> add</span><span style="color:#569CD6;"> -D</span><span style="color:#CE9178;"> prisma</span><span style="color:#CE9178;"> @prisma/client</span></span>
<span class="line"></span></code></pre></div><p>使用 Prisma CLI 初始化项目，数据库为 SQLite：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npx</span><span style="color:#CE9178;"> prisma</span><span style="color:#CE9178;"> init</span><span style="color:#569CD6;"> --datasource-provider</span><span style="color:#CE9178;"> sqlite</span></span>
<span class="line"></span></code></pre></div>`,12),f=s("code",null,"prisma/schema.prisma",-1),P={href:"https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>在 VS Code 中，我们可用使用插件 <code>Prisma.prisma</code> 获得 Prisma 的语法高亮和自动补全支持。</p><p>下面我们更新 <code>prisma/schema.prisma</code> 文件，定义数据模型：</p><div class="language-prisma" data-ext="prisma" data-title="prisma"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">generator</span><span style="color:#4EC9B0;"> client</span><span style="color:#808080;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  provider</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;prisma-client-js&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">datasource</span><span style="color:#4EC9B0;"> db</span><span style="color:#808080;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  provider</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;sqlite&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">  url</span><span style="color:#D4D4D4;">      = </span><span style="color:#DCDCAA;">env</span><span style="color:#808080;">(</span><span style="color:#CE9178;">&quot;DATABASE_URL&quot;</span><span style="color:#808080;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">model</span><span style="color:#4EC9B0;"> User</span><span style="color:#808080;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  id</span><span style="color:#4EC9B0;">    Int</span><span style="color:#DCDCAA;">     @id</span><span style="color:#DCDCAA;"> @default</span><span style="color:#808080;">(</span><span style="color:#DCDCAA;">autoincrement</span><span style="color:#808080;">())</span></span>
<span class="line"><span style="color:#9CDCFE;">  email</span><span style="color:#4EC9B0;"> String</span><span style="color:#DCDCAA;">  @unique</span></span>
<span class="line"><span style="color:#9CDCFE;">  name</span><span style="color:#4EC9B0;">  String</span><span style="color:#D4D4D4;">?</span></span>
<span class="line"><span style="color:#9CDCFE;">  posts</span><span style="color:#569CD6;"> Post</span><span style="color:#D4D4D4;">[]</span></span>
<span class="line"><span style="color:#808080;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">model</span><span style="color:#4EC9B0;"> Post</span><span style="color:#808080;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  id</span><span style="color:#4EC9B0;">        Int</span><span style="color:#DCDCAA;">     @id</span><span style="color:#DCDCAA;"> @default</span><span style="color:#808080;">(</span><span style="color:#DCDCAA;">autoincrement</span><span style="color:#808080;">())</span></span>
<span class="line"><span style="color:#9CDCFE;">  title</span><span style="color:#4EC9B0;">     String</span></span>
<span class="line"><span style="color:#9CDCFE;">  content</span><span style="color:#4EC9B0;">   String</span><span style="color:#D4D4D4;">?</span></span>
<span class="line"><span style="color:#9CDCFE;">  published</span><span style="color:#4EC9B0;"> Boolean</span><span style="color:#DCDCAA;"> @default</span><span style="color:#808080;">(</span><span style="color:#569CD6;">false</span><span style="color:#808080;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">  author</span><span style="color:#569CD6;">    User</span><span style="color:#DCDCAA;">    @relation</span><span style="color:#808080;">(</span><span style="color:#9CDCFE;">fields</span><span style="color:#D4D4D4;">: [authorId], </span><span style="color:#9CDCFE;">references</span><span style="color:#D4D4D4;">: [id]</span><span style="color:#808080;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">  authorId</span><span style="color:#4EC9B0;">  Int</span></span>
<span class="line"><span style="color:#808080;">}</span></span>
<span class="line"></span></code></pre></div><p>上述模型非常直观，表述的模型结构如下：</p>`,4),S=t(`<h3 id="22-数据迁移" tabindex="-1"><a class="header-anchor" href="#22-数据迁移"><span>2.2 数据迁移</span></a></h3><p>现在你已经有了模型对象，但数据库中还没有对应结构。类似于 Django 的迁移，Prisma 也提供了迁移工具，可以将模型结构映射到数据库中。</p><p>在 <code>.env</code> 文件中，定义了数据库的连接信息：</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">DATABASE_URL</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;file:./dev.db&quot;</span></span>
<span class="line"></span></code></pre></div><p>如果你需要更改，可以在此处修改。</p><p>现在我们可以使用 Prisma CLI 来创建迁移文件：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npx</span><span style="color:#CE9178;"> prisma</span><span style="color:#CE9178;"> migrate</span><span style="color:#CE9178;"> dev</span><span style="color:#569CD6;"> --name</span><span style="color:#CE9178;"> init</span></span>
<span class="line"></span></code></pre></div><p>现在 SQLite 数据库中已经创建了对应的表结构。</p><h3 id="23-查询数据库" tabindex="-1"><a class="header-anchor" href="#23-查询数据库"><span>2.3 查询数据库</span></a></h3><p>我们验证一下数据库是否可用，创建 <code>script.ts</code> 文件：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">PrismaClient</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;@prisma/client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> prisma</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> PrismaClient</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> user</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> prisma</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">    data:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      name:</span><span style="color:#CE9178;"> &#39;Alice&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      email:</span><span style="color:#CE9178;"> &#39;alice@prisma.io&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> users</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> prisma</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">findMany</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">users</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    await</span><span style="color:#9CDCFE;"> prisma</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$disconnect</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    await</span><span style="color:#9CDCFE;"> prisma</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">$disconnect</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">    process</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">exit</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br></div></div><p>它将创建一个用户，并查询所有用户，我们运行一下：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npx</span><span style="color:#CE9178;"> ts-node</span><span style="color:#CE9178;"> script.ts</span></span>
<span class="line"></span></code></pre></div><p>输出结果如下，表示我们已经成功连接到数据库：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">[ { </span><span style="color:#9CDCFE;">id:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">email:</span><span style="color:#CE9178;"> &#39;alice@prisma.io&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;Alice&#39;</span><span style="color:#D4D4D4;"> } ]</span></span>
<span class="line"></span></code></pre></div><p>我们再插入一个用户，这时候我们使用关联字段创建一个 <code>Post</code> 对象：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> user</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> prisma</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">    data:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      name:</span><span style="color:#CE9178;"> &#39;Bob&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      email:</span><span style="color:#CE9178;"> &#39;bob@prisma.io&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">      posts:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">        create:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">          title:</span><span style="color:#CE9178;"> &#39;Hello World&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">        },</span></span>
<span class="line"><span style="color:#D4D4D4;">      },</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> users</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> prisma</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">findMany</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">users</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br></div></div><p>现在输出结果是：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">[</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">id:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">email:</span><span style="color:#CE9178;"> &#39;alice@prisma.io&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;Alice&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">id:</span><span style="color:#B5CEA8;"> 2</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">email:</span><span style="color:#CE9178;"> &#39;bob@prisma.io&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;Bob&#39;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span></code></pre></div><p>我们注意到，<code>User</code> 对象中并没有 <code>Post</code> 成员，这是因为默认情况下，Prisma 只在查询的结果对象中返回 <strong>标量</strong> 字段。</p><p>为了同时检索属于一个用户的帖子记录，你可以通过帖子关系字段使用 <code>include</code> 选项：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">async</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> usersWithPosts</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#9CDCFE;"> prisma</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">findMany</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#9CDCFE;">    include:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      posts:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">dir</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">usersWithPosts</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">depth:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div></div><p>此时我们已经能正确看到数据库中的关联信息：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">[</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">id:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">email:</span><span style="color:#CE9178;"> &#39;alice@prisma.io&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;Alice&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">posts:</span><span style="color:#D4D4D4;"> [] },</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#9CDCFE;">    id:</span><span style="color:#B5CEA8;"> 2</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    email:</span><span style="color:#CE9178;"> &#39;bob@prisma.io&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;Bob&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    posts:</span><span style="color:#D4D4D4;"> [</span></span>
<span class="line"><span style="color:#D4D4D4;">      {</span></span>
<span class="line"><span style="color:#9CDCFE;">        id:</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">        title:</span><span style="color:#CE9178;"> &#39;Hello World&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">        content:</span><span style="color:#569CD6;"> null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">        published:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">        authorId:</span><span style="color:#B5CEA8;"> 2</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    ]</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span></code></pre></div><p>如果需要管理和可视化数据库中的信息，可用使用 Navicat 等工具。如果没有安装相应工具，Prisma 也提供了 Prism Studio 来支持简易地管理数据库：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;color:#D4D4D4;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npx</span><span style="color:#CE9178;"> prisma</span><span style="color:#CE9178;"> studio</span></span>
<span class="line"></span></code></pre></div>`,26),w={href:"http://localhost:5555",target:"_blank",rel:"noopener noreferrer"},R={class:"hint-container tip"},q=s("p",{class:"hint-container-title"},"更多信息",-1),L={href:"https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch",target:"_blank",rel:"noopener noreferrer"};function M(N,T){const o=e("router-link"),l=e("ExternalLinkIcon"),r=e("Mermaid"),c=e("RouteLink");return D(),y("div",null,[C,s("nav",h,[s("ul",null,[s("li",null,[n(o,{to:"#1-什么是-prisma"},{default:p(()=>[a("1. 什么是 Prisma")]),_:1})]),s("li",null,[n(o,{to:"#2-开始使用"},{default:p(()=>[a("2. 开始使用")]),_:1}),s("ul",null,[s("li",null,[n(o,{to:"#21-创建项目"},{default:p(()=>[a("2.1 创建项目")]),_:1})]),s("li",null,[n(o,{to:"#22-数据迁移"},{default:p(()=>[a("2.2 数据迁移")]),_:1})]),s("li",null,[n(o,{to:"#23-查询数据库"},{default:p(()=>[a("2.3 查询数据库")]),_:1})])])])])]),E,m,u,g,s("ul",null,[s("li",null,[s("a",b,[a("Next.js"),n(l)])]),s("li",null,[s("a",A,[a("Remix"),n(l)])]),s("li",null,[s("a",v,[a("SvelteKit"),n(l)])]),s("li",null,[s("a",F,[a("Nuxt"),n(l)])]),s("li",null,[s("a",k,[a("Redwood"),n(l)])]),s("li",null,[s("a",_,[a("t3 stack — using tRPC"),n(l)])])]),x,s("p",null,[a("现在我们已经创建了 "),f,a(" 文件，它是 Prisma 的数据模型定义文件，我们可以在其中定义数据模型和数据源。如果你希望在已的数据库中逆向创建 Prisma 请参考 "),s("a",P,[a("官方文档：添加到已有项目"),n(l)]),a("。")]),B,n(r,{id:"mermaid-89",code:"eJx9jDEKwzAMRXef4l8gF+hcCqVLlh5AqUUssK1iK1OSu9cxNHTqINB/0n9crkJzoeSAZ+WCbRsGXTFqNVwQqLrvZW0LINkgHuOjp2pF8gxOJPEXZErc8t6mm/50TSwevyd4aTbO1tGkGpky3ssUpQb2p4cWC1ruHrfDtrsPkCE78w=="}),S,s("p",null,[a("现在打开 "),s("a",w,[a("http://localhost:5555"),n(l)]),a("，即可看到数据库中的信息。")]),s("div",R,[q,s("ul",null,[s("li",null,[n(c,{to:"/notebook/library/prisma/cli.html"},{default:p(()=>[a("命令行参考")]),_:1})]),s("li",null,[s("a",L,[a("官方文档：在项目中使用关系数据库或 MongoDB"),n(l)])])])])])}const j=i(d,[["render",M],["__file","get-started.html.vue"]]),Q=JSON.parse('{"path":"/notebook/library/prisma/get-started.html","title":"Prisma 入门","lang":"zh-CN","frontmatter":{"description":"Prisma 入门 1. 什么是 Prisma Prisma 是一个开源的 ORM 框架，支持各类常见数据库系统，提供了数据模型、自动迁移、类型安全和自动补全支持，拥有活跃的社区和完善的支持。不同于传统的 ORM 框架，Prisma 使用了一些新方法来避免 ORM 的一些固有问题。 Prisma 现在不仅支持关系型数据库，也支持 NoSQL 数据库，如...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/notebook/library/prisma/get-started.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"Prisma 入门"}],["meta",{"property":"og:description","content":"Prisma 入门 1. 什么是 Prisma Prisma 是一个开源的 ORM 框架，支持各类常见数据库系统，提供了数据模型、自动迁移、类型安全和自动补全支持，拥有活跃的社区和完善的支持。不同于传统的 ORM 框架，Prisma 使用了一些新方法来避免 ORM 的一些固有问题。 Prisma 现在不仅支持关系型数据库，也支持 NoSQL 数据库，如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T11:44:04.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-04T11:44:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Prisma 入门\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-04T11:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 什么是 Prisma","slug":"1-什么是-prisma","link":"#1-什么是-prisma","children":[]},{"level":2,"title":"2. 开始使用","slug":"2-开始使用","link":"#2-开始使用","children":[{"level":3,"title":"2.1 创建项目","slug":"21-创建项目","link":"#21-创建项目","children":[]},{"level":3,"title":"2.2 数据迁移","slug":"22-数据迁移","link":"#22-数据迁移","children":[]},{"level":3,"title":"2.3 查询数据库","slug":"23-查询数据库","link":"#23-查询数据库","children":[]}]}],"git":{"createdTime":1685756058000,"updatedTime":1714823044000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":3.65,"words":1096},"filePathRelative":"notebook/library/prisma/get-started.md","localizedDate":"2023年6月3日","autoDesc":true}');export{j as comp,Q as data};
