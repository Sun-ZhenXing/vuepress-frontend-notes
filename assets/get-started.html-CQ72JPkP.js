import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c as i,b as s,a,w as t,e as n,d as r}from"./app-BdnEjZx0.js";const d={},u=s("h1",{id:"typescript-快速入门",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#typescript-快速入门"},[s("span",null,"TypeScript 快速入门")])],-1),k={class:"table-of-contents"},m=s("h2",{id:"1-类型推断",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#1-类型推断"},[s("span",null,"1. 类型推断")])],-1),y={class:"hint-container info"},g=s("p",{class:"hint-container-title"},"说明",-1),v={href:"https://www.typescriptlang.org/zh/docs/handbook/typescript-in-5-minutes.html",target:"_blank",rel:"noopener noreferrer"},b=s("em",null,"为 JavaScript 程序员准备的 TypeScript",-1),h=r(`<p>TypeScript 提供了 JavaScript 的所有功能，并在这些功能之上添加了一层：TypeScript 的类型系统。</p><p>TypeScript 的主要好处是，它可以检查代码中的意外行为，从而降低出现错误的机会。</p><p>TypeScript 可以识别 JavaScript 语言，在许多情况下可以推断类型。例如，在创建变量并将其赋值给特定值时，TypeScript 将使用该值作为其类型。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> helloWorld <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>
</code></pre></div><p><code>helloWorld</code> 变量是 <code>string</code> 类型的。</p><p>TypeScript 能通过上下文得知变量类型的能力，例如：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// declare 语句用于声明一个变量</span>
<span class="token keyword">declare</span> <span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token builtin">any</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此时 TypeScript 知道 a 的类型是 number</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>基于上下文，我们可以排除一些情况，关于联合类型的内容将在后面介绍。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 此时 a 也是 number 类型</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="2-定义类型" tabindex="-1"><a class="header-anchor" href="#2-定义类型"><span>2. 定义类型</span></a></h2><p><code>interface</code> 用于定义接口，<strong>接口用于描述对象的结构</strong>，即接口约束了对象应该具有什么成员，而不约束对象不包含什么成员。</p><p>因此，TypeScript 的 <code>interface</code> 实际上是鸭子类型的，即只要对象的结构和接口一致，那么这个对象就是这个接口的实例。这一点区别于 Java 的 <code>interface</code>。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
</code></pre></div><p>被这个接口描述的对象都具有和这个接口所有的成员，否则将在静态检查中报错。</p><p>要给变量标注类型，使用 TypeScript 类型注解的语法，<code>variable: type</code>：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> user<span class="token operator">:</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;Hayes&#39;</span><span class="token punctuation">,</span>
  id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果不满足，TypeScript 将给出错误和理由：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  username<span class="token operator">:</span> <span class="token string">&#39;Hayes&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// Error:</span>
  <span class="token comment">// Type &#39;{ username: string; id: number; }&#39; is not assignable to type &#39;User&#39;.</span>
  <span class="token comment">// Object literal may only specify known properties, and &#39;username&#39; does not exist in type &#39;User&#39;.</span>
  id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上面的写法也可以使用 <code>class</code> 来创建：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">UserAccount</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> user<span class="token operator">:</span> User <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserAccount</span><span class="token punctuation">(</span><span class="token string">&#39;Murphy&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 TypeScript 中，每一个类和函数的参数都需要声明成员或参数的类型。</p><p>如果需要声明返回值类型，可以：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getAdminUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="3-组合类型" tabindex="-1"><a class="header-anchor" href="#3-组合类型"><span>3. 组合类型</span></a></h2><p>在 TypeScript 中，类型可以通过简单的组合产生复杂类型。复杂的类型的产生方式：</p><ul><li>通过联合类型（Union）产生</li><li>通过交叉类型（Intersect）产生</li><li>通过元组类型（Tuple）产生</li><li>通过可空类型（Nullable）产生</li><li>通过泛型（Generic）产生</li></ul><p>常量（Literal）、内置（Built-in）类型或用户定义类型通过上述方式组合可以产生更多新的类型。</p><p>如果需要将组合类型绑定到一个名字上，使用 <code>type</code> 关键字。<code>type</code> 的行为和 <code>interface</code> 有点相似，但是接口和类型是两种不同的对象。</p><h3 id="31-联合类型" tabindex="-1"><a class="header-anchor" href="#31-联合类型"><span>3.1 联合类型</span></a></h3><p>联合类型使用 <code>|</code> 组合，表示可以是多个中的任意一个。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">LockStates</span> <span class="token operator">=</span> <span class="token string">&#39;locked&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;unlocked&#39;</span>
</code></pre></div><p>联合类型的一个流行用法是描述 <code>string</code> 或者 <code>number</code> 的字面量的合法值。</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">WindowStates</span> <span class="token operator">=</span> <span class="token string">&quot;open&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;closed&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;minimized&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">LockStates</span> <span class="token operator">=</span> <span class="token string">&quot;locked&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;unlocked&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">PositiveOddNumbersUnderTen</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">7</span> <span class="token operator">|</span> <span class="token number">9</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="32-泛型" tabindex="-1"><a class="header-anchor" href="#32-泛型"><span>3.2 泛型</span></a></h3><p>泛型编程是普遍的程序设计模式。泛型是类型的模板（也就是泛化的类型，一个类型可以表示很多类型），通过泛型可以随时创建灵活的类型。同样， TypeScript 的泛型和 C# 的泛型类似。</p><p>泛型通常可以理解为一个类型模板，即新的类型是通过这个模板复制出来的（实际上的行为和语言有关），<code>&lt;&gt;</code> 的内容为模板的参数，给定参数即产出一个新的类型。</p><p>在 TypeScript 中，参数可以有默认值，这意味着 <code>&lt;&gt;</code> 也不是必须的。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token constant">T</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token constant">T</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">A_string</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">B_string</span> <span class="token operator">=</span> <span class="token constant">B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一些例子：</p><ul><li><code>number[]</code> 数字型的数组</li><li><code>(number | string)[]</code> 数字或字符串数组</li><li><code>(a: string, ...args: number) =&gt; string</code> 以一个字符串和多个数字为参数的函数，返回字符串</li><li><code>Promise&lt;{ data: User[], message: string }&gt;</code> 一个 <code>Promise</code> 对象</li><li><code>A&lt;B&lt;string&gt;&gt;</code> 嵌套的泛型类型</li></ul><h2 id="4-结构化的类型系统" tabindex="-1"><a class="header-anchor" href="#4-结构化的类型系统"><span>4. 结构化的类型系统</span></a></h2><p>TypeScript 的一个核心原则是类型检查基于对象的属性和行为（type checking focuses on the shape that values have）。这有时被叫做“鸭子类型”或“结构类型”（structural typing）。</p>`,42);function f(S,T){const e=p("router-link"),o=p("ExternalLinkIcon");return l(),i("div",null,[u,s("nav",k,[s("ul",null,[s("li",null,[a(e,{to:"#1-类型推断"},{default:t(()=>[n("1. 类型推断")]),_:1})]),s("li",null,[a(e,{to:"#2-定义类型"},{default:t(()=>[n("2. 定义类型")]),_:1})]),s("li",null,[a(e,{to:"#3-组合类型"},{default:t(()=>[n("3. 组合类型")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#31-联合类型"},{default:t(()=>[n("3.1 联合类型")]),_:1})]),s("li",null,[a(e,{to:"#32-泛型"},{default:t(()=>[n("3.2 泛型")]),_:1})])])]),s("li",null,[a(e,{to:"#4-结构化的类型系统"},{default:t(()=>[n("4. 结构化的类型系统")]),_:1})])])]),m,s("div",y,[g,s("p",null,[n("本文参考了 "),s("a",v,[n("官方文档："),b,a(o)]),n("，目标是给只熟悉 JavaScript 的开发者快速入门 TypeScript。")])]),h])}const x=c(d,[["render",f],["__file","get-started.html.vue"]]),q=JSON.parse('{"path":"/notebook/typescript/get-started.html","title":"TypeScript 快速入门","lang":"zh-CN","frontmatter":{"description":"TypeScript 快速入门 1. 类型推断 说明 本文参考了 官方文档：为 JavaScript 程序员准备的 TypeScript，目标是给只熟悉 JavaScript 的开发者快速入门 TypeScript。 TypeScript 提供了 JavaScript 的所有功能，并在这些功能之上添加了一层：TypeScript 的类型系统。 Type...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/notebook/typescript/get-started.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"TypeScript 快速入门"}],["meta",{"property":"og:description","content":"TypeScript 快速入门 1. 类型推断 说明 本文参考了 官方文档：为 JavaScript 程序员准备的 TypeScript，目标是给只熟悉 JavaScript 的开发者快速入门 TypeScript。 TypeScript 提供了 JavaScript 的所有功能，并在这些功能之上添加了一层：TypeScript 的类型系统。 Type..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T11:44:04.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-04T11:44:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript 快速入门\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-04T11:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 类型推断","slug":"1-类型推断","link":"#1-类型推断","children":[]},{"level":2,"title":"2. 定义类型","slug":"2-定义类型","link":"#2-定义类型","children":[]},{"level":2,"title":"3. 组合类型","slug":"3-组合类型","link":"#3-组合类型","children":[{"level":3,"title":"3.1 联合类型","slug":"31-联合类型","link":"#31-联合类型","children":[]},{"level":3,"title":"3.2 泛型","slug":"32-泛型","link":"#32-泛型","children":[]}]},{"level":2,"title":"4. 结构化的类型系统","slug":"4-结构化的类型系统","link":"#4-结构化的类型系统","children":[]}],"git":{"createdTime":1685149544000,"updatedTime":1714823044000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":3.76,"words":1129},"filePathRelative":"notebook/typescript/get-started.md","localizedDate":"2023年5月27日","autoDesc":true}');export{x as comp,q as data};
