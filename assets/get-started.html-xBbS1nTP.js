import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as u,c as d,b as n,a,w as e,e as s,d as o}from"./app-C-lF8Tfs.js";const k={},m=n("h1",{id:"prisma-入门",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#prisma-入门"},[n("span",null,"Prisma 入门")])],-1),v={class:"table-of-contents"},h=n("h2",{id:"1-什么是-prisma",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#1-什么是-prisma"},[n("span",null,"1. 什么是 Prisma")])],-1),b=n("p",null,"Prisma 是一个开源的 ORM 框架，支持各类常见数据库系统，提供了数据模型、自动迁移、类型安全和自动补全支持，拥有活跃的社区和完善的支持。不同于传统的 ORM 框架，Prisma 使用了一些新方法来避免 ORM 的一些固有问题。",-1),g=n("p",null,"Prisma 现在不仅支持关系型数据库，也支持 NoSQL 数据库，如 MongoDB。此外还支持地理数据库 CockroachDB 等。",-1),f=n("p",null,"Prisma 适用于在各种架构中使用，如 REST API、GraphQL API、gRPC API 等。常见全栈应用：",-1),_={href:"https://nextjs.org/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://remix.run/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://kit.svelte.dev/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://nuxt.com/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://redwoodjs.com/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://create.t3.gg/",target:"_blank",rel:"noopener noreferrer"},R=o(`<h2 id="2-开始使用" tabindex="-1"><a class="header-anchor" href="#2-开始使用"><span>2. 开始使用</span></a></h2><h3 id="21-创建项目" tabindex="-1"><a class="header-anchor" href="#21-创建项目"><span>2.1 创建项目</span></a></h3><p>下面我们将创建一个 TypeScript 项目和一个本地 SQLite 数据库，从头开始使用 Prisma。它包括数据建模、迁移和查询数据库。</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> hello-prisma
<span class="token builtin class-name">cd</span> hello-prisma
</code></pre></div><p>下面我们将使用 <code>pnpm</code> 来创建和管理项目：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> init
<span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> typescript ts-node @types/node
</code></pre></div><p>初始化 TypeScript 项目：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx tsc <span class="token parameter variable">--init</span>
</code></pre></div><p>添加 Prisma 依赖：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> prisma @prisma/client
</code></pre></div><p>使用 Prisma CLI 初始化项目，数据库为 SQLite：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma init --datasource-provider sqlite
</code></pre></div>`,12),q=n("code",null,"prisma/schema.prisma",-1),L={href:"https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project",target:"_blank",rel:"noopener noreferrer"},M=o(`<p>在 VS Code 中，我们可用使用插件 <code>Prisma.prisma</code> 获得 Prisma 的语法高亮和自动补全支持。</p><p>下面我们更新 <code>prisma/schema.prisma</code> 文件，定义数据模型：</p><div class="language-prisma line-numbers-mode" data-ext="prisma" data-title="prisma"><pre class="language-prisma"><code>generator client {
  provider = &quot;prisma-client-js&quot;
}

datasource db {
  provider = &quot;sqlite&quot;
  url      = env(&quot;DATABASE_URL&quot;)
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述模型非常直观，表述的模型结构如下：</p>`,4),A=o(`<h3 id="22-数据迁移" tabindex="-1"><a class="header-anchor" href="#22-数据迁移"><span>2.2 数据迁移</span></a></h3><p>现在你已经有了模型对象，但数据库中还没有对应结构。类似于 Django 的迁移，Prisma 也提供了迁移工具，可以将模型结构映射到数据库中。</p><p>在 <code>.env</code> 文件中，定义了数据库的连接信息：</p><div class="language-properties" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">DATABASE_URL</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;file:./dev.db&quot;</span>
</code></pre></div><p>如果你需要更改，可以在此处修改。</p><p>现在我们可以使用 Prisma CLI 来创建迁移文件：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma migrate dev <span class="token parameter variable">--name</span> init
</code></pre></div><p>现在 SQLite 数据库中已经创建了对应的表结构。</p><h3 id="23-查询数据库" tabindex="-1"><a class="header-anchor" href="#23-查询数据库"><span>2.3 查询数据库</span></a></h3><p>我们验证一下数据库是否可用，创建 <code>script.ts</code> 文件：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PrismaClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@prisma/client&#39;</span>

<span class="token keyword">const</span> prisma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrismaClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span>
      email<span class="token operator">:</span> <span class="token string">&#39;alice@prisma.io&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> prisma<span class="token punctuation">.</span><span class="token function">$disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token keyword">await</span> prisma<span class="token punctuation">.</span><span class="token function">$disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它将创建一个用户，并查询所有用户，我们运行一下：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx ts-node script.ts
</code></pre></div><p>输出结果如下，表示我们已经成功连接到数据库：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">[</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token string">&#39;alice@prisma.io&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span>
</code></pre></div><p>我们再插入一个用户，这时候我们使用关联字段创建一个 <code>Post</code> 对象：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span>
      email<span class="token operator">:</span> <span class="token string">&#39;bob@prisma.io&#39;</span><span class="token punctuation">,</span>
      posts<span class="token operator">:</span> <span class="token punctuation">{</span>
        create<span class="token operator">:</span> <span class="token punctuation">{</span>
          title<span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在输出结果是：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token string">&#39;alice@prisma.io&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token string">&#39;bob@prisma.io&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre></div><p>我们注意到，<code>User</code> 对象中并没有 <code>Post</code> 成员，这是因为默认情况下，Prisma 只在查询的结果对象中返回 <strong>标量</strong> 字段。</p><p>为了同时检索属于一个用户的帖子记录，你可以通过帖子关系字段使用 <code>include</code> 选项：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> usersWithPosts <span class="token operator">=</span> <span class="token keyword">await</span> prisma<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    include<span class="token operator">:</span> <span class="token punctuation">{</span>
      posts<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>usersWithPosts<span class="token punctuation">,</span> <span class="token punctuation">{</span> depth<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div></div><p>此时我们已经能正确看到数据库中的关联信息：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token string">&#39;alice@prisma.io&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> posts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    email<span class="token operator">:</span> <span class="token string">&#39;bob@prisma.io&#39;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span>
    posts<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        title<span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">,</span>
        content<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        published<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        authorId<span class="token operator">:</span> <span class="token number">2</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要管理和可视化数据库中的信息，可用使用 Navicat 等工具。如果没有安装相应工具，Prisma 也提供了 Prism Studio 来支持简易地管理数据库：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx prisma studio
</code></pre></div>`,26),N={href:"http://localhost:5555",target:"_blank",rel:"noopener noreferrer"},C={class:"hint-container tip"},T=n("p",{class:"hint-container-title"},"更多信息",-1),I={href:"https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch",target:"_blank",rel:"noopener noreferrer"};function O(B,D){const p=i("router-link"),t=i("ExternalLinkIcon"),l=i("Mermaid"),c=i("RouteLink");return u(),d("div",null,[m,n("nav",v,[n("ul",null,[n("li",null,[a(p,{to:"#1-什么是-prisma"},{default:e(()=>[s("1. 什么是 Prisma")]),_:1})]),n("li",null,[a(p,{to:"#2-开始使用"},{default:e(()=>[s("2. 开始使用")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#21-创建项目"},{default:e(()=>[s("2.1 创建项目")]),_:1})]),n("li",null,[a(p,{to:"#22-数据迁移"},{default:e(()=>[s("2.2 数据迁移")]),_:1})]),n("li",null,[a(p,{to:"#23-查询数据库"},{default:e(()=>[s("2.3 查询数据库")]),_:1})])])])])]),h,b,g,f,n("ul",null,[n("li",null,[n("a",_,[s("Next.js"),a(t)])]),n("li",null,[n("a",y,[s("Remix"),a(t)])]),n("li",null,[n("a",P,[s("SvelteKit"),a(t)])]),n("li",null,[n("a",w,[s("Nuxt"),a(t)])]),n("li",null,[n("a",x,[s("Redwood"),a(t)])]),n("li",null,[n("a",S,[s("t3 stack — using tRPC"),a(t)])])]),R,n("p",null,[s("现在我们已经创建了 "),q,s(" 文件，它是 Prisma 的数据模型定义文件，我们可以在其中定义数据模型和数据源。如果你希望在已的数据库中逆向创建 Prisma 请参考 "),n("a",L,[s("官方文档：添加到已有项目"),a(t)]),s("。")]),M,a(l,{id:"mermaid-89",code:"eJx9jDEKwzAMRXef4l8gF+hcCqVLlh5AqUUssK1iK1OSu9cxNHTqINB/0n9crkJzoeSAZ+WCbRsGXTFqNVwQqLrvZW0LINkgHuOjp2pF8gxOJPEXZErc8t6mm/50TSwevyd4aTbO1tGkGpky3ssUpQb2p4cWC1ruHrfDtrsPkCE78w=="}),A,n("p",null,[s("现在打开 "),n("a",N,[s("http://localhost:5555"),a(t)]),s("，即可看到数据库中的信息。")]),n("div",C,[T,n("ul",null,[n("li",null,[a(c,{to:"/notebook/library/prisma/cli.html"},{default:e(()=>[s("命令行参考")]),_:1})]),n("li",null,[n("a",I,[s("官方文档：在项目中使用关系数据库或 MongoDB"),a(t)])])])])])}const Q=r(k,[["render",O],["__file","get-started.html.vue"]]),U=JSON.parse('{"path":"/notebook/library/prisma/get-started.html","title":"Prisma 入门","lang":"zh-CN","frontmatter":{"description":"Prisma 入门 1. 什么是 Prisma Prisma 是一个开源的 ORM 框架，支持各类常见数据库系统，提供了数据模型、自动迁移、类型安全和自动补全支持，拥有活跃的社区和完善的支持。不同于传统的 ORM 框架，Prisma 使用了一些新方法来避免 ORM 的一些固有问题。 Prisma 现在不仅支持关系型数据库，也支持 NoSQL 数据库，如...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/notebook/library/prisma/get-started.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"Prisma 入门"}],["meta",{"property":"og:description","content":"Prisma 入门 1. 什么是 Prisma Prisma 是一个开源的 ORM 框架，支持各类常见数据库系统，提供了数据模型、自动迁移、类型安全和自动补全支持，拥有活跃的社区和完善的支持。不同于传统的 ORM 框架，Prisma 使用了一些新方法来避免 ORM 的一些固有问题。 Prisma 现在不仅支持关系型数据库，也支持 NoSQL 数据库，如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T11:44:04.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-04T11:44:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Prisma 入门\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-04T11:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 什么是 Prisma","slug":"1-什么是-prisma","link":"#1-什么是-prisma","children":[]},{"level":2,"title":"2. 开始使用","slug":"2-开始使用","link":"#2-开始使用","children":[{"level":3,"title":"2.1 创建项目","slug":"21-创建项目","link":"#21-创建项目","children":[]},{"level":3,"title":"2.2 数据迁移","slug":"22-数据迁移","link":"#22-数据迁移","children":[]},{"level":3,"title":"2.3 查询数据库","slug":"23-查询数据库","link":"#23-查询数据库","children":[]}]}],"git":{"createdTime":1685756058000,"updatedTime":1714823044000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":3.65,"words":1096},"filePathRelative":"notebook/library/prisma/get-started.md","localizedDate":"2023年6月3日","autoDesc":true}');export{Q as comp,U as data};
