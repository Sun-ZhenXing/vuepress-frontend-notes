import{_ as o,r as e,o as c,c as D,d as s,b as l,w as p,e as n,f as t}from"./app-6e2c49c0.js";const r={},i=s("h1",{id:"_2-kotlin-语法概述",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-kotlin-语法概述","aria-hidden":"true"},"#"),n(" 2. Kotlin 语法概述")],-1),y={class:"table-of-contents"},d=t(`<h2 id="_2-1-基本语法" tabindex="-1"><a class="header-anchor" href="#_2-1-基本语法" aria-hidden="true">#</a> 2.1 基本语法</h2><p>Kotlin 文件以 <code>.kt</code> 为后缀。</p><p>和 Java 一样，<code>package</code> 用于包声明，不过是可选的，默认为 <code>default</code>。</p><p>下面的包都会默认导入：</p><ul><li><code>kotlin.*</code></li><li><code>kotlin.annotation.*</code></li><li><code>kotlin.collections.*</code></li><li><code>kotlin.comparisons.*</code></li><li><code>kotlin.io.*</code></li><li><code>kotlin.ranges.*</code></li><li><code>kotlin.sequences.*</code></li><li><code>kotlin.text.*</code></li></ul><p>使用 <code>var</code> 定义变量，使用 <code>val</code> 定义常量，Kotlin 支持声明时自动推导类型：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> a: </span><span style="color:#4EC9B0;">Int</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> b = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">       </span><span style="color:#6A9955;">// 系统自动推断变量类型为 Int</span></span>
<span class="line"><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> c: </span><span style="color:#4EC9B0;">Int</span><span style="color:#D4D4D4;">      </span><span style="color:#6A9955;">// 如果不在声明时初始化则必须提供变量类型</span></span>
<span class="line"><span style="color:#D4D4D4;">c = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">           </span><span style="color:#6A9955;">// 明确赋值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> x = </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 系统自动推断变量类型为Int</span></span>
<span class="line"><span style="color:#D4D4D4;">x += </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">           </span><span style="color:#6A9955;">// 变量可修改</span></span>
<span class="line"></span></code></pre></div><p>和类 C 语言一样，注释可以有单行注释（<code>// ...</code>）和多行的注释（<code>/* ... */</code>）。</p><p>类似于 C#，Kotlin 支持可空类型：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> age: </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">? = </span><span style="color:#CE9178;">&quot;23&quot;</span></span>
<span class="line"></span></code></pre></div><p>和 JavaScript 一样，如果需要对象为空时保留空，则加上 <code>?</code>，例如：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> ages2 = age?.</span><span style="color:#DCDCAA;">toInt</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre></div><p>如果需要断言为非空则使用 <code>!!</code>，这样为空时将抛出空指针异常。</p><p>类似于 Python，Kotlin 使用 <code>is</code> 判断对象是对象的实例，相当于 Java 的关键字 <code>instanceof</code>，但是不是对象的实例也可以表示为 <code>!is</code>。</p><p>Kotlin 支持 <code>Any</code> 类型，表示任何类型。</p><h2 id="_2-2-数据类型" tabindex="-1"><a class="header-anchor" href="#_2-2-数据类型" aria-hidden="true">#</a> 2.2 数据类型</h2><p>下面是基本类型：</p><table><thead><tr><th>类型</th><th>位宽度</th></tr></thead><tbody><tr><td><code>Double</code></td><td>64</td></tr><tr><td><code>Float</code></td><td>32</td></tr><tr><td><code>Long</code></td><td>64</td></tr><tr><td><code>Int</code></td><td>32</td></tr><tr><td><code>Short</code></td><td>16</td></tr><tr><td><code>Byte</code></td><td>8</td></tr></tbody></table><ul><li><code>Float</code> 类型使用 <code>f</code> 或者 <code>F</code> 作为后缀：<code>123.5f</code></li><li>不支持八进制字面值，<code>0x</code> 和 <code>0b</code> 可以表示十六进制和二进制</li><li>大写 <code>L</code> 结尾为长整型</li></ul><p>类型转换：较小类型并不是较大类型的子类型，较小的类型不能隐式转换为较大的类型。这意味着在不进行显式转换的情况下我们不能把 <code>Byte</code> 型值赋给一个 <code>Int</code> 变量。</p><p>可以使用 <code>byte.toInt()</code> 来转换。每种基本类型都可以转换：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">toByte</span><span style="color:#D4D4D4;">(): </span><span style="color:#4EC9B0;">Byte</span></span>
<span class="line"><span style="color:#DCDCAA;">toShort</span><span style="color:#D4D4D4;">(): </span><span style="color:#4EC9B0;">Short</span></span>
<span class="line"><span style="color:#DCDCAA;">toInt</span><span style="color:#D4D4D4;">(): </span><span style="color:#4EC9B0;">Int</span></span>
<span class="line"><span style="color:#DCDCAA;">toLong</span><span style="color:#D4D4D4;">(): </span><span style="color:#4EC9B0;">Long</span></span>
<span class="line"><span style="color:#DCDCAA;">toFloat</span><span style="color:#D4D4D4;">(): </span><span style="color:#4EC9B0;">Float</span></span>
<span class="line"><span style="color:#DCDCAA;">toDouble</span><span style="color:#D4D4D4;">(): </span><span style="color:#4EC9B0;">Double</span></span>
<span class="line"><span style="color:#DCDCAA;">toChar</span><span style="color:#D4D4D4;">(): </span><span style="color:#4EC9B0;">Char</span></span>
<span class="line"></span></code></pre></div><p>Kotlin 会自动根据上下文推断类型，默认情况下不损失精度。</p><p>类似于 JavaScript，在 Kotlin 中，三个等号 <code>===</code> 表示比较对象地址是否相等，两个 <code>==</code> 表示比较对象的值是否相等。</p><p>Kotlin 的位运算符也和 Java 不同：</p><table><thead><tr><th>运算符</th><th>说明</th><th>对应 Java 的运算符</th></tr></thead><tbody><tr><td><code>shl</code></td><td>左移</td><td><code>&lt;&lt;</code></td></tr><tr><td><code>shr</code></td><td>右移</td><td><code>&gt;&gt;</code></td></tr><tr><td><code>ushr</code></td><td>无符号右移</td><td><code>&gt;&gt;&gt;</code></td></tr><tr><td><code>and</code></td><td>与</td><td><code>&amp;</code></td></tr><tr><td><code>or</code></td><td>或</td><td><code>|</code></td></tr><tr><td><code>xor</code></td><td>异或</td><td><code>^</code></td></tr><tr><td><code>inv</code></td><td>翻转</td><td><code>~</code></td></tr></tbody></table><p>支持布尔运算符 <code>&amp;&amp;</code>、<code>||</code> 和 <code>!</code>。</p><p>和 Java 不一样，Kotlin 中的 <code>Char</code> 不能直接和数字操作，<code>Char</code> 必需是单引号 <code>&#39;</code> 包含起来的。比如普通字符 <code>&#39;0&#39;</code>，<code>&#39;a&#39;</code>。</p><p>数组用类 <code>Array</code> 实现，并且还有一个 <code>size</code> 属性及 <code>get</code> 和 <code>set</code> 方法，由于使用 <code>[]</code> 重载了 <code>get</code> 和 <code>set</code> 方法，所以我们可以通过下标很方便的获取或者设置数组对应位置的值。</p><p>数组的创建两种方式：一种是使用函数 <code>arrayOf()</code>，另外一种是使用工厂函数：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(args: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> a = </span><span style="color:#DCDCAA;">arrayOf</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// [0, 2, 4]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> b = </span><span style="color:#DCDCAA;">Array</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, { i </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> (i * </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 读取数组内容</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(a[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">])    </span><span style="color:#6A9955;">// 输出结果: 1</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(b[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">])    </span><span style="color:#6A9955;">// 输出结果: 2</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Array</code> 工厂函数支持直接加上 Lambda 函数，这也是推荐的写法：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> b = </span><span style="color:#DCDCAA;">Array</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">) { i </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> (i * </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) }</span></span>
<span class="line"></span></code></pre></div><p>类似于 Python，字符串可以使用 <code>[]</code> 获取指定位置的字符，另外字符串是可迭代的：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (c </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> str) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(c)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>和 Python 一样，字符串支持使用三个双引号来表示多行字符串 <code>&quot;&quot;&quot;</code>。</p><p>字符串有 <code>.trimMargin()</code> 方法用于删除两边空白，类似于 Java 的 <code>.trim()</code> 方法。但是 <code>.trimMargin()</code> 默认以 <code>|</code> 作为边界前缀：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(args: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> text = </span><span style="color:#CE9178;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#CE9178;">    |多行字符串</span></span>
<span class="line"><span style="color:#CE9178;">    |我是多行字符串</span></span>
<span class="line"><span style="color:#CE9178;">    |多行字符串</span></span>
<span class="line"><span style="color:#CE9178;">    |Alex</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;&quot;&quot;</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">trimMargin</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(text)    </span><span style="color:#6A9955;">// 前置空格删除了</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>这也可以指定。比如 <code>trimMargin(&quot;&gt;&quot;)</code>。</p><p>类似于 JavaScript，字符串天生支持模板，例如：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(args: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> s = </span><span style="color:#CE9178;">&quot;Alex&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> str = </span><span style="color:#CE9178;">&quot;</span><span style="color:#9CDCFE;">$s</span><span style="color:#CE9178;">.length is </span><span style="color:#569CD6;">\${</span><span style="color:#D4D4D4;">s.length</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 输出 &quot;Alex.length is 4&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(str)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>多数特殊字符支持 <code>\\</code> 转义，但是 <code>$</code>，不支持，如果需要表示 <code>$</code> 则需要这样 <code>&quot;\${&#39;$&#39;}&quot;</code>。</p><h2 id="_2-3-函数语法" tabindex="-1"><a class="header-anchor" href="#_2-3-函数语法" aria-hidden="true">#</a> 2.3 函数语法</h2><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">sum</span><span style="color:#D4D4D4;">(a: </span><span style="color:#4EC9B0;">Int</span><span style="color:#D4D4D4;">, b: </span><span style="color:#4EC9B0;">Int</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">Int</span><span style="color:#D4D4D4;"> {   </span><span style="color:#6A9955;">// Int 参数，返回值 Int</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> a + b</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>表达式作为函数体：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">sum</span><span style="color:#D4D4D4;">(a: </span><span style="color:#4EC9B0;">Int</span><span style="color:#D4D4D4;">, b: </span><span style="color:#4EC9B0;">Int</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">Int</span><span style="color:#D4D4D4;"> = a + b </span></span>
<span class="line"></span></code></pre></div><p>类型推断支持不写返回值类型，但是 <code>public</code> 修饰的函数必须写。</p><p>空类型为 <code>Unit</code>，如果返回值为空可以省略。</p><p>函数的参数可以是可变长的：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">vars</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">vararg</span><span style="color:#D4D4D4;"> v: </span><span style="color:#4EC9B0;">Int</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (vt </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> v) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(vt)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(args: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">vars</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">)  </span><span style="color:#6A9955;">// 输出 12345</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-4-条件语句" tabindex="-1"><a class="header-anchor" href="#_2-4-条件语句" aria-hidden="true">#</a> 2.4 条件语句</h2><p>If 语句：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> max = a</span></span>
<span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (a &lt; b) max = b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 使用 else </span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> max: </span><span style="color:#4EC9B0;">Int</span></span>
<span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (a &gt; b) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    max = a</span></span>
<span class="line"><span style="color:#D4D4D4;">} </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    max = b</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以把 If 语句返回的值赋值给变量：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> max = </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (a &gt; b) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Choose a&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    a</span></span>
<span class="line"><span style="color:#D4D4D4;">} </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Choose b&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    b</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>Kotlin 支持区间表达式 <code>a..b</code>，类似于 Python / Go 的 <code>range</code>：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(args: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> x = </span><span style="color:#B5CEA8;">5</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> y = </span><span style="color:#B5CEA8;">9</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (x </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">..</span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;x 在区间内&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>Kotlin 的 When 表达式类似于类 C 语言的 <code>switch</code>，使用 <code>else</code> 表示其他情况：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">when</span><span style="color:#D4D4D4;"> (x) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;x == 1&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;x == 2&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;x 不是 1 ，也不是 2&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>更复杂的示例：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(args: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> x = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">when</span><span style="color:#D4D4D4;"> (x) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;x == 0 or x == 1&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;otherwise&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">when</span><span style="color:#D4D4D4;"> (x) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;x == 1&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;x == 2&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;x 不是 1 ，也不是 2&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">when</span><span style="color:#D4D4D4;"> (x) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">..</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;x 在该区间范围内&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;x 不在该区间范围内&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When 甚至可以这样写，用来代替大量的 <code>if...else...</code>：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(args: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> items = </span><span style="color:#DCDCAA;">setOf</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;apple&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;banana&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;kiwi&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">when</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#CE9178;">&quot;orange&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> items </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;juicy&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#CE9178;">&quot;apple&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> items </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;apple is fine too&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-5-循环语句" tabindex="-1"><a class="header-anchor" href="#_2-5-循环语句" aria-hidden="true">#</a> 2.5 循环语句</h2><p>类似于 Python / Go，For 语句可以遍历任何迭代器和其他可迭代类型：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (item: </span><span style="color:#4EC9B0;">Int</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int_array</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>如果你想要通过索引遍历一个数组或者一个 <code>list</code>，你可以这么做：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (i </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> array.indices) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(array[i])</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>类似于 Python 的 <code>enumerate</code>，Kotlin 的 For 也具有类似功能：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> ((index, </span><span style="color:#569CD6;">value</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> array.</span><span style="color:#DCDCAA;">withIndex</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;the element at </span><span style="color:#9CDCFE;">$index</span><span style="color:#CE9178;"> is </span><span style="color:#9CDCFE;">$value</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(args: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> items = </span><span style="color:#DCDCAA;">listOf</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;apple&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;banana&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;kiwi&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (item </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> items) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(item)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (index </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> items.indices) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;item at </span><span style="color:#9CDCFE;">$index</span><span style="color:#CE9178;"> is </span><span style="color:#569CD6;">\${</span><span style="color:#D4D4D4;">items[index]</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者增加步长，反向循环：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(args: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (i </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">..</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;"> step </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(i)       </span><span style="color:#6A9955;">// 打印结果为: &quot;13&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (i </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;"> downTo </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> step </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(i) </span><span style="color:#6A9955;">// 打印结果为: &quot;42&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>如果不包含最后一个可以：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(args: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (i </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> until </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">) { </span><span style="color:#6A9955;">// i in [1, 10), 不包含 10</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(i)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>Kotlin 支持 <code>while() { }</code> 和 <code>do { } while()</code>。也支持 <code>break</code> 和 <code>continue</code> 控制循环。</p><p>如果在 Lambda 函数中使用 <code>return</code> 则会返回上层函数，如果只返回 Lambda 函数可以返回到标签：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(args: </span><span style="color:#4EC9B0;">Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt;) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">val</span><span style="color:#D4D4D4;"> ints = </span><span style="color:#DCDCAA;">arrayListOf</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    ints.forEach lit@ {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (it == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;">@lit</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(it)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;still running&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用带 <code>fun</code> 的匿名函数：</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">fun</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">foo</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    ints.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">fun</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">value</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Int</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">value</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">value</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>如果有多个 <code>return</code>，当要返一个回值的时候，解析器优先选用标签限制的 <code>return</code>，即</p><div class="language-kotlin" data-ext="kt"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;">@a </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"></span></code></pre></div>`,83);function C(u,v){const a=e("router-link");return c(),D("div",null,[i,s("nav",y,[s("ul",null,[s("li",null,[l(a,{to:"#_2-1-基本语法"},{default:p(()=>[n("2.1 基本语法")]),_:1})]),s("li",null,[l(a,{to:"#_2-2-数据类型"},{default:p(()=>[n("2.2 数据类型")]),_:1})]),s("li",null,[l(a,{to:"#_2-3-函数语法"},{default:p(()=>[n("2.3 函数语法")]),_:1})]),s("li",null,[l(a,{to:"#_2-4-条件语句"},{default:p(()=>[n("2.4 条件语句")]),_:1})]),s("li",null,[l(a,{to:"#_2-5-循环语句"},{default:p(()=>[n("2.5 循环语句")]),_:1})])])]),d])}const E=o(r,[["render",C],["__file","index.html.vue"]]);export{E as default};
