import{_ as i,M as l,p as r,q as u,Q as n,N as s,V as t,t as a,a1 as c}from"./framework-d2b9082c.js";const d={},k=n("h1",{id:"_1-kotlin-教程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-kotlin-教程","aria-hidden":"true"},"#"),a(" 1. Kotlin 教程")],-1),h={class:"table-of-contents"},g=c('<h2 id="_1-1-kotalin-简介" tabindex="-1"><a class="header-anchor" href="#_1-1-kotalin-简介" aria-hidden="true">#</a> 1.1 Kotalin 简介</h2><p>Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，被称之为 Android 世界的 Swift，由 JetBrains 设计开发并开源。</p><p>Kotlin 可以编译成 Java 字节码，也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。</p><p>在 Google I/O 2017 中，Google 宣布 Kotlin 成为 Android 官方开发语言。</p><p>为什么选择 Kotlin？</p><ul><li>简洁: 大大减少样板代码的数量</li><li>安全: 避免空指针异常等整个类的错误</li><li>互操作性: 充分利用 JVM、Android 和浏览器的现有库。</li><li>工具友好: 可用任何 Java IDE 或者使用命令行构建</li></ul>',6),_={class:"hint-container info"},f=n("p",{class:"hint-container-title"},"重要信息",-1),m={href:"https://kotlinlang.org/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://kotlinlang.org/docs/getting-started.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://book.kotlincn.net/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://play.kotlinlang.org/",target:"_blank",rel:"noopener noreferrer"},K=n("h2",{id:"_1-2-开发环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-2-开发环境","aria-hidden":"true"},"#"),a(" 1.2 开发环境")],-1),w={href:"https://www.jetbrains.com/idea/download/index.html",target:"_blank",rel:"noopener noreferrer"},y=c(`<p>创建项目流程：</p><ol><li>创建项目，选择 Java 项目，模板选择 Kotlin (Java) 即可</li><li>任意名称保存创建即可，主意要选择正确的 JDK 版本</li><li>等待 Sync 结束即可运行 Hello World</li></ol><h2 id="_1-3-hello-kotlin" tabindex="-1"><a class="header-anchor" href="#_1-3-hello-kotlin" aria-hidden="true">#</a> 1.3 Hello Kotlin</h2><p>和 Java 不同的是，Kotlin 允许顶级的函数，因此 <code>main()</code> 函数可以这样写：</p><div class="language-kotlin" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> hello                       <span class="token comment">//  可选的包头</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 包级可见的函数，接受一个字符串数组作为参数</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello World!&quot;</span></span><span class="token punctuation">)</span>         <span class="token comment">// 分号可以省略</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果您习惯面向对象，可以这样：</p><div class="language-kotlin" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Greeter</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Greeter</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;World!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// 创建一个对象不用 new 关键字</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_1-4-命令行运行" tabindex="-1"><a class="header-anchor" href="#_1-4-命令行运行" aria-hidden="true">#</a> 1.4 命令行运行</h2><p>在 Linux 上，可以用下面的命令安装 Kotlin 工具：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://get.sdkman.io <span class="token operator">|</span> <span class="token function">bash</span>
sdk <span class="token function">install</span> kotlin
</code></pre></div><p>编译应用：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>kotlinc hello.kt -include-runtime <span class="token parameter variable">-d</span> hello.jar
</code></pre></div><p>参数说明：</p><ul><li><code>-d</code>：用来设置编译输出的名称，可以是 <code>.class</code> 或 <code>.jar</code> 文件，也可以是目录</li><li><code>-include-runtime</code>：让 <code>.jar</code> 文件包含 Kotlin 运行库，从而可以直接运行</li></ul><p>如果不包含 Kotlin 运行库，需要运行时在你的 <code>classpath</code> 上。</p><p>或者也可以使用 Kotlin 工具执行：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>kotlin <span class="token parameter variable">-classpath</span> hello.jar HelloKt
</code></pre></div><h2 id="_1-5-脚本模式" tabindex="-1"><a class="header-anchor" href="#_1-5-脚本模式" aria-hidden="true">#</a> 1.5 脚本模式</h2><p>可以使用交互式解释器来执行：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>bin/kotlinc-jvm
</code></pre></div><p>也可以作为脚本执行：</p><div class="language-kotlin" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File

<span class="token keyword">val</span> folders <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listFiles</span> <span class="token punctuation">{</span> file <span class="token operator">-&gt;</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
folders<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> folder <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre></div><p>注意脚本文件后缀为 <code>.kts</code>，需要使用 <code>-script</code> 参数，执行命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>kotlinc <span class="token parameter variable">-script</span> list_folders.kts <span class="token operator">&lt;</span>path_to_folder<span class="token operator">&gt;</span>
</code></pre></div>`,24);function J(S,j){const e=l("router-link"),o=l("ExternalLinkIcon"),p=l("Badge");return r(),u("div",null,[k,n("nav",h,[n("ul",null,[n("li",null,[s(e,{to:"#_1-1-kotalin-简介"},{default:t(()=>[a("1.1 Kotalin 简介")]),_:1})]),n("li",null,[s(e,{to:"#_1-2-开发环境"},{default:t(()=>[a("1.2 开发环境")]),_:1})]),n("li",null,[s(e,{to:"#_1-3-hello-kotlin"},{default:t(()=>[a("1.3 Hello Kotlin")]),_:1})]),n("li",null,[s(e,{to:"#_1-4-命令行运行"},{default:t(()=>[a("1.4 命令行运行")]),_:1})]),n("li",null,[s(e,{to:"#_1-5-脚本模式"},{default:t(()=>[a("1.5 脚本模式")]),_:1})])])]),g,n("div",_,[f,n("ul",null,[n("li",null,[n("a",m,[a("Kotlin 语言官网"),s(o)])]),n("li",null,[n("a",v,[a("Kotlin 文档"),s(o)])]),n("li",null,[n("a",b,[a("Kotlin 中文文档"),s(o)]),a(),s(p,{type:"warning"},{default:t(()=>[a("推荐")]),_:1})]),n("li",null,[n("a",x,[a("Kotlin 在线运行工具"),s(o)]),a(),s(p,{type:"warning"},{default:t(()=>[a("推荐")]),_:1})])])]),K,n("p",null,[a("推荐使用 "),n("a",w,[a("IntelliJ IDEA"),s(o)]),a(" 开发 Kotlin 程序，如果您在开发安卓也可以直接使用 Android Studio。")]),y])}const A=i(d,[["render",J],["__file","index.html.vue"]]);export{A as default};
