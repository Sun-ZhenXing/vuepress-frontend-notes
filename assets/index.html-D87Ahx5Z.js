import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c,b as n,a as s,w as t,d as r,e}from"./app-BdnEjZx0.js";const i={},k=n("h1",{id:"3-kotlin-面向对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#3-kotlin-面向对象"},[n("span",null,"3. Kotlin 面向对象")])],-1),d={class:"table-of-contents"},u=r(`<h2 id="31-类" tabindex="-1"><a class="header-anchor" href="#31-类"><span>3.1 类</span></a></h2><p>Kotlin 类可以包含：构造函数和初始化代码块、函数、属性、内部类、对象声明。</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Apple <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>也可以定义空类：</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Empty
</code></pre></div><p>类的属性可以用关键字 <code>var</code> 声明为可变的，否则使用只读关键字 <code>val</code> 声明为不可变。</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Runoob <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;alex&quot;</span></span>
    <span class="token keyword">var</span> url<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;https://example.com/&quot;</span></span>
    <span class="token keyword">var</span> city<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Jiangsu&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre></div><p>创建类的实例不需要 <code>new</code> 关键字：</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> site <span class="token operator">=</span> <span class="token function">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>Kotlin 中的类可以有一个 <strong>主构造器</strong>，以及一个或多个 <strong>次构造器</strong>，主构造器是类头部的一部分，位于类名称之后:</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Person <span class="token keyword">constructor</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><p>如果主构造器没有任何注解，也没有任何可见度修饰符，那么 <code>constructor</code> 关键字可以省略：</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="32-属性" tabindex="-1"><a class="header-anchor" href="#32-属性"><span>3.2 属性</span></a></h2><p>属性支持 getter/setter：</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> <span class="token operator">&lt;</span>propertyName<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token operator">:</span> <span class="token operator">&lt;</span>PropertyType<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">=</span> <span class="token operator">&lt;</span>property_initializer<span class="token operator">&gt;</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token operator">&lt;</span>getter<span class="token operator">&gt;</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token operator">&lt;</span>setter<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre></div><p>getter 和 setter 都是可选的：</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> allByDefault<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token comment">// 错误：需要一个初始化语句，默认实现了 getter 和 setter 方法</span>
<span class="token keyword">var</span> initialized <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment">// 类型为 Int，默认实现了 getter 和 setter</span>
<span class="token keyword">val</span> simple<span class="token operator">:</span> Int<span class="token operator">?</span>       <span class="token comment">// 类型为 Int，默认实现 getter，但必须在构造函数中初始化</span>
<span class="token keyword">val</span> inferredType <span class="token operator">=</span> <span class="token number">1</span>   <span class="token comment">// 类型为 Int，默认实现 getter</span>
</code></pre></div><h2 id="33-继承" tabindex="-1"><a class="header-anchor" href="#33-继承"><span>3.3 继承</span></a></h2><p>Kotlin 中所有类都继承该 <code>Any</code> 类，它是所有类的超类，对于没有超类型声明的类是默认超类：</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Example <span class="token comment">// 从 Any 隐式继承</span>
</code></pre></div><p><code>Any</code> 默认提供了三个方法：</p><ul><li><code>equals()</code></li><li><code>hashCode()</code></li><li><code>toString()</code></li></ul><p>如果一个类要被继承，可以使用 <code>open</code> 关键字进行修饰：</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Base</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Int<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token function">Derived</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Base</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
</code></pre></div><h2 id="34-接口" tabindex="-1"><a class="header-anchor" href="#34-接口"><span>3.4 接口</span></a></h2><p>Kotlin 接口与 Java 类似，使用 <code>interface</code> 关键字定义接口，允许方法有默认实现：</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> MyInterface <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;foo&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>接口中的属性只能是抽象的，不允许初始化值，接口不会保存属性值，实现接口时，必须重写属性：</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> MyInterface <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token comment">// 抽象属性 name</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> MyImpl<span class="token operator">:</span> MyInterface <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;alex&quot;</span></span> <span class="token comment">// 重写属性</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="35-扩展" tabindex="-1"><a class="header-anchor" href="#35-扩展"><span>3.5 扩展</span></a></h2><p>Kotlin 可以对一个类的属性和方法进行扩展，且不需要继承或使用 Decorator 模式。扩展是一种静态行为，对被扩展的类代码本身不会造成任何影响。</p><p>扩展函数语法：</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> receiverType<span class="token punctuation">.</span><span class="token function">functionName</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body
<span class="token punctuation">}</span>
</code></pre></div>`,34);function g(m,h){const a=p("router-link");return l(),c("div",null,[k,n("nav",d,[n("ul",null,[n("li",null,[s(a,{to:"#31-类"},{default:t(()=>[e("3.1 类")]),_:1})]),n("li",null,[s(a,{to:"#32-属性"},{default:t(()=>[e("3.2 属性")]),_:1})]),n("li",null,[s(a,{to:"#33-继承"},{default:t(()=>[e("3.3 继承")]),_:1})]),n("li",null,[s(a,{to:"#34-接口"},{default:t(()=>[e("3.4 接口")]),_:1})]),n("li",null,[s(a,{to:"#35-扩展"},{default:t(()=>[e("3.5 扩展")]),_:1})])])]),u])}const f=o(i,[["render",g],["__file","index.html.vue"]]),w=JSON.parse('{"path":"/android/kotlin/chapter03/","title":"3. Kotlin 面向对象","lang":"zh-CN","frontmatter":{"description":"3. Kotlin 面向对象 3.1 类 Kotlin 类可以包含：构造函数和初始化代码块、函数、属性、内部类、对象声明。 也可以定义空类： 类的属性可以用关键字 var 声明为可变的，否则使用只读关键字 val 声明为不可变。 创建类的实例不需要 new 关键字： Kotlin 中的类可以有一个 主构造器，以及一个或多个 次构造器，主构造器是类头部的...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/android/kotlin/chapter03/"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"3. Kotlin 面向对象"}],["meta",{"property":"og:description","content":"3. Kotlin 面向对象 3.1 类 Kotlin 类可以包含：构造函数和初始化代码块、函数、属性、内部类、对象声明。 也可以定义空类： 类的属性可以用关键字 var 声明为可变的，否则使用只读关键字 val 声明为不可变。 创建类的实例不需要 new 关键字： Kotlin 中的类可以有一个 主构造器，以及一个或多个 次构造器，主构造器是类头部的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T11:44:04.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-04T11:44:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. Kotlin 面向对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-04T11:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"3.1 类","slug":"31-类","link":"#31-类","children":[]},{"level":2,"title":"3.2 属性","slug":"32-属性","link":"#32-属性","children":[]},{"level":2,"title":"3.3 继承","slug":"33-继承","link":"#33-继承","children":[]},{"level":2,"title":"3.4 接口","slug":"34-接口","link":"#34-接口","children":[]},{"level":2,"title":"3.5 扩展","slug":"35-扩展","link":"#35-扩展","children":[]}],"git":{"createdTime":1677158604000,"updatedTime":1714823044000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":1.91,"words":574},"filePathRelative":"android/kotlin/chapter03/index.md","localizedDate":"2023年2月23日","autoDesc":true}');export{f as comp,w as data};
