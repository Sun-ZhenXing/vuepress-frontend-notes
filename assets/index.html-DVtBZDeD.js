import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as p,c,b as t,a as n,w as o,e,d as u}from"./app-DaBZCpA_.js";const d="/vuepress-frontend-notes/assets/app-CguZbAC0.svg",h={},_=t("h1",{id:"1-了解同构渲染",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#1-了解同构渲染"},[t("span",null,"1. 了解同构渲染")])],-1),m={class:"table-of-contents"},x=t("h2",{id:"11-模板渲染",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#11-模板渲染"},[t("span",null,"1.1 模板渲染")])],-1),g=t("strong",null,"模板渲染",-1),f=u('<p>可以在哪些位置进行渲染？</p><ul><li>服务端渲染</li><li>客户端渲染</li><li>同构渲染</li></ul><p>使用同构渲染系统中的数据，部分可能由服务端去渲染，而另一部分由客户端渲染。</p><p>Nuxt3 即同构渲染框架，帮助我们快速开发同构渲染页面。</p><h2 id="12-服务端渲染" tabindex="-1"><a class="header-anchor" href="#12-服务端渲染"><span>1.2 服务端渲染</span></a></h2><p>早期我们使用服务端渲染，数据通过模板字符串进行拼接，生成 HTML 返回给客户端。</p><p>每次请求页面服务器都进行一次渲染，然后返回整个页面的数据。但是浏览器会直接得到 HTML 内容，显示更快。</p><p>这类系统主要使用预处理模板的技术（如 PHP、JSP 等），并使用 MVC 设计模式。</p><p>传统的服务端渲染的主要缺点如下：</p><ul><li>所有的渲染都发生在服务端，因此服务器压力较大</li><li>常常需要返回整个 HTML 数据，占用带宽</li></ul><h2 id="13-客户端渲染" tabindex="-1"><a class="header-anchor" href="#13-客户端渲染"><span>1.3 客户端渲染</span></a></h2><p>后来我们通过 AJAX 等相关的技术，通过服务器提供 JSON 格式的 API 接口，就可以在客户端渲染各种不同的数据。每次请求可以只请求必要数据，因而可以有更强的灵活性。</p><p>这类系统主要基于 SPA 类的框架（如 React、Vue 等），使用 MVVM 设计模式。</p><p>基于 MVVM 的客户端渲染的主要缺点如下：</p><ul><li>首屏渲染慢</li><li>不利于 SEO（搜索引擎优化）</li></ul><h2 id="14-nuxt3-用于" tabindex="-1"><a class="header-anchor" href="#14-nuxt3-用于"><span>1.4 Nuxt3 用于？</span></a></h2><figure><img src="'+d+'" alt="app" tabindex="0" loading="lazy"><figcaption>app</figcaption></figure>',17),N={href:"https://nuxt.com/docs/getting-started/views",target:"_blank",rel:"noopener noreferrer"},b=t("p",null,"Nuxt3 是基于 Vue3 的混合式框架，用于解决：",-1),v=t("ul",null,[t("li",null,"首屏渲染慢的问题"),t("li",null,"SEO 优化问题"),t("li",null,"同时兼备客户端渲染的优点")],-1),y={href:"https://nuxt.com/docs/getting-started/introduction",target:"_blank",rel:"noopener noreferrer"},k={href:"https://nuxt.com.cn/docs/getting-started/introduction",target:"_blank",rel:"noopener noreferrer"};function T(M,V){const l=r("router-link"),i=r("Badge"),a=r("ExternalLinkIcon");return p(),c("div",null,[_,t("nav",m,[t("ul",null,[t("li",null,[n(l,{to:"#11-模板渲染"},{default:o(()=>[e("1.1 模板渲染")]),_:1})]),t("li",null,[n(l,{to:"#12-服务端渲染"},{default:o(()=>[e("1.2 服务端渲染")]),_:1})]),t("li",null,[n(l,{to:"#13-客户端渲染"},{default:o(()=>[e("1.3 客户端渲染")]),_:1})]),t("li",null,[n(l,{to:"#14-nuxt3-用于"},{default:o(()=>[e("1.4 Nuxt3 用于？")]),_:1})])])]),x,t("p",null,[n(i,{type:"tip"},{default:o(()=>[e("定义")]),_:1}),e(),g,e(" 即动态网站使用相同的模板和不同的数据来生成不同的 HTML 页面。")]),f,t("blockquote",null,[t("p",null,[e("图片来源于："),t("a",N,[e("https://nuxt.com/docs/getting-started/views"),n(a)]),e("。")])]),b,v,t("p",null,[e("了解了基本概念之后，你可以在 "),t("a",y,[e("Nuxt 官方文档"),n(a)]),e(" 或 "),t("a",k,[e("Nuxt 中文文档"),n(a)]),e(" 中学习它的基本使用。")])])}const C=s(h,[["render",T],["__file","index.html.vue"]]),H=JSON.parse('{"path":"/nuxt/nuxt-tutorial/chapter01/","title":"1. 了解同构渲染","lang":"zh-CN","frontmatter":{"description":"1. 了解同构渲染 1.1 模板渲染 模板渲染 即动态网站使用相同的模板和不同的数据来生成不同的 HTML 页面。 可以在哪些位置进行渲染？ 服务端渲染 客户端渲染 同构渲染 使用同构渲染系统中的数据，部分可能由服务端去渲染，而另一部分由客户端渲染。 Nuxt3 即同构渲染框架，帮助我们快速开发同构渲染页面。 1.2 服务端渲染 早期我们使用服务端渲染...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/nuxt/nuxt-tutorial/chapter01/"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"1. 了解同构渲染"}],["meta",{"property":"og:description","content":"1. 了解同构渲染 1.1 模板渲染 模板渲染 即动态网站使用相同的模板和不同的数据来生成不同的 HTML 页面。 可以在哪些位置进行渲染？ 服务端渲染 客户端渲染 同构渲染 使用同构渲染系统中的数据，部分可能由服务端去渲染，而另一部分由客户端渲染。 Nuxt3 即同构渲染框架，帮助我们快速开发同构渲染页面。 1.2 服务端渲染 早期我们使用服务端渲染..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T11:44:04.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-04T11:44:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. 了解同构渲染\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-04T11:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1.1 模板渲染","slug":"11-模板渲染","link":"#11-模板渲染","children":[]},{"level":2,"title":"1.2 服务端渲染","slug":"12-服务端渲染","link":"#12-服务端渲染","children":[]},{"level":2,"title":"1.3 客户端渲染","slug":"13-客户端渲染","link":"#13-客户端渲染","children":[]},{"level":2,"title":"1.4 Nuxt3 用于？","slug":"14-nuxt3-用于","link":"#14-nuxt3-用于","children":[]}],"git":{"createdTime":1674788846000,"updatedTime":1714823044000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":1.7,"words":509},"filePathRelative":"nuxt/nuxt-tutorial/chapter01/index.md","localizedDate":"2023年1月27日","autoDesc":true}');export{C as comp,H as data};
