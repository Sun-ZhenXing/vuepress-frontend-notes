import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as c,c as r,b as n,a as t,w as o,e as a,d as p}from"./app-DaBZCpA_.js";const d={},u=n("h1",{id:"1-kotlin-教程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#1-kotlin-教程"},[n("span",null,"1. Kotlin 教程")])],-1),k={class:"table-of-contents"},h=p('<h2 id="11-kotalin-简介" tabindex="-1"><a class="header-anchor" href="#11-kotalin-简介"><span>1.1 Kotalin 简介</span></a></h2><p>Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，被称之为 Android 世界的 Swift，由 JetBrains 设计开发并开源。</p><p>Kotlin 可以编译成 Java 字节码，也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。</p><p>在 Google I/O 2017 中，Google 宣布 Kotlin 成为 Android 官方开发语言。</p><p>为什么选择 Kotlin？</p><ul><li>简洁: 大大减少样板代码的数量</li><li>安全: 避免空指针异常等整个类的错误</li><li>互操作性: 充分利用 JVM、Android 和浏览器的现有库。</li><li>工具友好: 可用任何 Java IDE 或者使用命令行构建</li></ul>',6),g={class:"hint-container tip"},f=n("p",{class:"hint-container-title"},"提示",-1),m={href:"https://kotlinlang.org/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://kotlinlang.org/docs/getting-started.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://book.kotlincn.net/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://play.kotlinlang.org/",target:"_blank",rel:"noopener noreferrer"},K=n("h2",{id:"12-开发环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#12-开发环境"},[n("span",null,"1.2 开发环境")])],-1),x={href:"https://www.jetbrains.com/idea/download/index.html",target:"_blank",rel:"noopener noreferrer"},y=p(`<p>创建项目流程：</p><ol><li>创建项目，选择 Java 项目，模板选择 Kotlin (Java) 即可</li><li>任意名称保存创建即可，主意要选择正确的 JDK 版本</li><li>等待 Sync 结束即可运行 Hello World</li></ol><h2 id="13-hello-kotlin" tabindex="-1"><a class="header-anchor" href="#13-hello-kotlin"><span>1.3 Hello Kotlin</span></a></h2><p>和 Java 不同的是，Kotlin 允许顶级的函数，因此 <code>main()</code> 函数可以这样写：</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> hello                       <span class="token comment">//  可选的包头</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 包级可见的函数，接受一个字符串数组作为参数</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello World!&quot;</span></span><span class="token punctuation">)</span>         <span class="token comment">// 分号可以省略</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果您习惯面向对象，可以这样：</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">Greeter</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Greeter</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;World!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// 创建一个对象不用 new 关键字</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="14-命令行运行" tabindex="-1"><a class="header-anchor" href="#14-命令行运行"><span>1.4 命令行运行</span></a></h2><p>在 Linux 上，可以用下面的命令安装 Kotlin 工具：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://get.sdkman.io <span class="token operator">|</span> <span class="token function">bash</span>
sdk <span class="token function">install</span> kotlin
</code></pre></div><p>编译应用：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kotlinc hello.kt -include-runtime <span class="token parameter variable">-d</span> hello.jar
</code></pre></div><p>参数说明：</p><ul><li><code>-d</code>：用来设置编译输出的名称，可以是 <code>.class</code> 或 <code>.jar</code> 文件，也可以是目录</li><li><code>-include-runtime</code>：让 <code>.jar</code> 文件包含 Kotlin 运行库，从而可以直接运行</li></ul><p>如果不包含 Kotlin 运行库，需要运行时在你的 <code>classpath</code> 上。</p><p>或者也可以使用 Kotlin 工具执行：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kotlin <span class="token parameter variable">-classpath</span> hello.jar HelloKt
</code></pre></div><h2 id="15-脚本模式" tabindex="-1"><a class="header-anchor" href="#15-脚本模式"><span>1.5 脚本模式</span></a></h2><p>可以使用交互式解释器来执行：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>bin/kotlinc-jvm
</code></pre></div><p>也可以作为脚本执行：</p><div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File

<span class="token keyword">val</span> folders <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listFiles</span> <span class="token punctuation">{</span> file <span class="token operator">-&gt;</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
folders<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> folder <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre></div><p>注意脚本文件后缀为 <code>.kts</code>，需要使用 <code>-script</code> 参数，执行命令：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kotlinc <span class="token parameter variable">-script</span> list_folders.kts <span class="token variable">$PATH_TO_FOLDER</span>
</code></pre></div>`,24);function J(w,S){const s=l("router-link"),e=l("ExternalLinkIcon");return c(),r("div",null,[u,n("nav",k,[n("ul",null,[n("li",null,[t(s,{to:"#11-kotalin-简介"},{default:o(()=>[a("1.1 Kotalin 简介")]),_:1})]),n("li",null,[t(s,{to:"#12-开发环境"},{default:o(()=>[a("1.2 开发环境")]),_:1})]),n("li",null,[t(s,{to:"#13-hello-kotlin"},{default:o(()=>[a("1.3 Hello Kotlin")]),_:1})]),n("li",null,[t(s,{to:"#14-命令行运行"},{default:o(()=>[a("1.4 命令行运行")]),_:1})]),n("li",null,[t(s,{to:"#15-脚本模式"},{default:o(()=>[a("1.5 脚本模式")]),_:1})])])]),h,n("div",g,[f,n("ul",null,[n("li",null,[n("a",m,[a("Kotlin 语言官网"),t(e)])]),n("li",null,[n("a",_,[a("Kotlin 文档"),t(e)])]),n("li",null,[n("a",v,[a("Kotlin 中文文档"),t(e)])]),n("li",null,[n("a",b,[a("Kotlin 在线运行工具"),t(e)])])])]),K,n("p",null,[a("推荐使用 "),n("a",x,[a("IntelliJ IDEA"),t(e)]),a(" 开发 Kotlin 程序，如果您在开发安卓也可以直接使用 Android Studio。")]),y])}const j=i(d,[["render",J],["__file","index.html.vue"]]),q=JSON.parse('{"path":"/android/kotlin/chapter01/","title":"1. Kotlin 教程","lang":"zh-CN","frontmatter":{"description":"1. Kotlin 教程 1.1 Kotalin 简介 Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，被称之为 Android 世界的 Swift，由 JetBrains 设计开发并开源。 Kotlin 可以编译成 Java 字节码，也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。 在 Google I/O 2...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/android/kotlin/chapter01/"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"1. Kotlin 教程"}],["meta",{"property":"og:description","content":"1. Kotlin 教程 1.1 Kotalin 简介 Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，被称之为 Android 世界的 Swift，由 JetBrains 设计开发并开源。 Kotlin 可以编译成 Java 字节码，也可以编译成 JavaScript，方便在没有 JVM 的设备上运行。 在 Google I/O 2..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-05T01:44:53.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-05T01:44:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. Kotlin 教程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-05T01:44:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1.1 Kotalin 简介","slug":"11-kotalin-简介","link":"#11-kotalin-简介","children":[]},{"level":2,"title":"1.2 开发环境","slug":"12-开发环境","link":"#12-开发环境","children":[]},{"level":2,"title":"1.3 Hello Kotlin","slug":"13-hello-kotlin","link":"#13-hello-kotlin","children":[]},{"level":2,"title":"1.4 命令行运行","slug":"14-命令行运行","link":"#14-命令行运行","children":[]},{"level":2,"title":"1.5 脚本模式","slug":"15-脚本模式","link":"#15-脚本模式","children":[]}],"git":{"createdTime":1677142315000,"updatedTime":1714873493000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":2}]},"readingTime":{"minutes":2.02,"words":607},"filePathRelative":"android/kotlin/chapter01/index.md","localizedDate":"2023年2月23日","autoDesc":true}');export{j as comp,q as data};
