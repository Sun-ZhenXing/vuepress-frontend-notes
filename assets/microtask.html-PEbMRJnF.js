import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as u,c as r,b as n,a,w as o,e as s,d as l}from"./app-DaBZCpA_.js";const d={},k=n("h1",{id:"javascript-中的任务和微任务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#javascript-中的任务和微任务"},[n("span",null,"JavaScript 中的任务和微任务")])],-1),v={class:"table-of-contents"},m=l(`<h2 id="1-引入" tabindex="-1"><a class="header-anchor" href="#1-引入"><span>1. 引入</span></a></h2><p>在下面的代码中，输出的顺序是怎样的？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1-2&#39;</span><span class="token punctuation">)</span>
    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2-1&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1-1&#39;</span><span class="token punctuation">)</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2-2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们执行代码：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">node</span> docs/notebook/js/src/microtask1.js
</code></pre></div><p>我们可以得到如下的输出：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">0</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span>
<span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span>
<span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>
<span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span>
</code></pre></div><p>如果需要仔细理解上述代码的执行过程，需要详细了解 JavaScript 中的任务和微任务。</p><p>有的地方将 <strong>任务</strong>（Task）称为 <strong>宏任务</strong>（MacroTask），本文只引用专业材料故只使用 <strong>任务</strong> 这一术语。</p><h2 id="2-任务和微任务" tabindex="-1"><a class="header-anchor" href="#2-任务和微任务"><span>2. 任务和微任务</span></a></h2><h3 id="21-任务" tabindex="-1"><a class="header-anchor" href="#21-任务"><span>2.1 任务</span></a></h3><p>一个任务就是由执行诸如从头执行一段程序、执行一个事件回调或一个 <code>setInterval</code> / <code>setTimeout</code> 被触发之类的标准机制而被调度的任意 JavaScript 代码。这些都在 <strong>任务队列</strong>（Task Queue）上被调度。<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><p>在以下时机，任务会被添加到任务队列：</p><ol><li>一段新程序或子程序被直接执行时（比如从一个控制台，或在一个 <code>&lt;script&gt;</code> 元素中运行代码）。</li><li>触发了一个事件，将其回调函数添加到任务队列时。</li><li>执行到一个由 <code>setTimeout()</code> 或 <code>setInterval()</code> 创建的事件，以致相应的回调函数被添加到任务队列时。</li></ol><p>事件循环驱动你的代码按照这些任务排队的顺序，一个接一个地处理它们。在当前迭代轮次中，只有那些当事件循环过程开始时 已经处于任务队列中 的任务会被执行。其余的任务不得不等待到下一次迭代。</p><h3 id="22-微任务" tabindex="-1"><a class="header-anchor" href="#22-微任务"><span>2.2 微任务</span></a></h3>`,16),h=n("strong",null,"微任务",-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/User_agent",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API",target:"_blank",rel:"noopener noreferrer"},_={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"Promise",-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver",target:"_blank",rel:"noopener noreferrer"},j={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"Window",-1),A={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Worker",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"Worker",-1),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/queueMicrotask",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"queueMicrotask()",-1),M=l(`<h3 id="23-任务和微任务的区别" tabindex="-1"><a class="header-anchor" href="#23-任务和微任务的区别"><span>2.3 任务和微任务的区别</span></a></h3><p>首先它们有一些共同点，例如它们都由位于某个队列的 JavaScript 代码组成并在合适的时候运行。但是，只有在迭代开始时队列中存在的任务才会被事件循环一个接一个地运行，这和处理微任务队列是殊为不同的。</p><p>有两点关键的区别。</p><p>首先，每当一个任务存在，事件循环都会检查该任务是否正把控制权交给其他 JavaScript 代码。如若不然，事件循环就会运行微任务队列中的所有微任务。接下来微任务循环会在事件循环的每次迭代中被处理多次，包括处理完事件和其他回调之后。</p><p>其次，如果一个微任务通过调用 <code>queueMicrotask()</code> 向队列中加入了更多的微任务，则那些新加入的微任务会早于下一个任务运行。这是因为事件循环会持续调用微任务直至队列中没有留存的，即使是在有更多微任务持续被加入的情况下。</p><div class="hint-container warning"><p class="hint-container-title">微任务无限递归</p><p>因为微任务自身可以入列更多的微任务，且事件循环会持续处理微任务直至队列为空，那么就存在一种使得事件循环无尽处理微任务的风险。</p></div><h2 id="3-一些练习" tabindex="-1"><a class="header-anchor" href="#3-一些练习"><span>3. 一些练习</span></a></h2><p>描述下列代码的输出结果。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点击查看答案</summary><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">3</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">4</span>
</code></pre></div></details><p>描述下列代码的输出结果。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> resolvePromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> resolvedPromise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// resolve(resolvedPromise) 相当于下面的代码</span>
  <span class="token comment">// Promise.resolve().then(() =&gt; resolvedPromise.then(resolve))</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span>resolvedPromise<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

resolvePromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;resolvePromise resolved&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> resolvedPromiseThen <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sync&#39;</span><span class="token punctuation">)</span>

resolvedPromiseThen<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise3&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),C={class:"hint-container details"},S=n("summary",null,"点击查看答案",-1),w=n("div",{class:"language-javascript","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,`sync
end
promise1
promise2
resolvePromise resolved
promise3
`)])],-1),z=n("p",null,"首先运行所有同步代码，然后运行微任务队列中的所有微任务。",-1),I=n("p",null,"初始的微任务队列如下，使用行号表示：",-1),N=n("p",null,[s("下面弹出 "),n("strong",null,"任务 8"),s("，由于 "),n("strong",null,"任务 8"),s(" 中包含一个 "),n("code",null,"Promise.resolve"),s("，然后将 "),n("strong",null,"任务 5"),s(" 入队：")],-1),W=n("p",null,[s("下面弹出 "),n("strong",null,"任务 12"),s("，打印 "),n("code",null,"promise1"),s("，然后将 "),n("strong",null,"任务 9"),s(" 入队：")],-1),D=n("p",null,[s("下面弹出 "),n("strong",null,"任务 18"),s("，打印 "),n("code",null,"promise2"),s("，然后将 "),n("strong",null,"任务 20"),s(" 入队：")],-1),L=n("p",null,[s("下面弹出 "),n("strong",null,"任务 5"),s("，打印 "),n("code",null,"resolvePromise resolved"),s("，然后弹出 "),n("strong",null,"任务 20"),s("，打印 "),n("code",null,"promise3"),s("。")],-1),q=n("hr",{class:"footnotes-sep"},null,-1),V={class:"footnotes"},F={class:"footnotes-list"},B={id:"footnote1",class:"footnote-item"},O={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide",target:"_blank",rel:"noopener noreferrer"},U=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function Z(G,E){const e=c("router-link"),t=c("ExternalLinkIcon"),p=c("Mermaid");return u(),r("div",null,[k,n("nav",v,[n("ul",null,[n("li",null,[a(e,{to:"#1-引入"},{default:o(()=>[s("1. 引入")]),_:1})]),n("li",null,[a(e,{to:"#2-任务和微任务"},{default:o(()=>[s("2. 任务和微任务")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#21-任务"},{default:o(()=>[s("2.1 任务")]),_:1})]),n("li",null,[a(e,{to:"#22-微任务"},{default:o(()=>[s("2.2 微任务")]),_:1})]),n("li",null,[a(e,{to:"#23-任务和微任务的区别"},{default:o(()=>[s("2.3 任务和微任务的区别")]),_:1})])])]),n("li",null,[a(e,{to:"#3-一些练习"},{default:o(()=>[s("3. 一些练习")]),_:1})])])]),m,n("p",null,[s("一个 "),h,s("（MicroTask）就是一个简短的函数，当创建该微任务的函数执行之后，并且只有当 Javascript 调用栈为空，而控制权尚未返还给被 "),n("a",g,[s("用户代理"),a(t)]),s(" 用来驱动脚本执行环境的事件循环之前，该微任务才会被执行。事件循环既可能是浏览器的主事件循环也可能是被一个 "),n("a",b,[s("Web Worker"),a(t)]),s(" 所驱动的事件循环。这使得给定的函数在没有其他脚本执行干扰的情况下运行，也保证了微任务能在用户代理有机会对该微任务带来的行为做出反应之前运行。")]),n("p",null,[s("JavaScript 中的 "),n("a",_,[f,a(t)]),s(" 和 "),n("a",y,[s("Mutation Observer API"),a(t)]),s(" 都使用微任务队列去运行它们的回调函数，但当能够推迟工作直到当前事件循环过程完结时，也是可以执行微任务的时机。为了允许第三方库、框架、polyfill 能使用微任务，在 "),n("a",j,[P,a(t)]),s(" 和 "),n("a",A,[J,a(t)]),s(" 接口上暴露了 "),n("a",T,[x,a(t)]),s(" 方法。")]),M,n("details",C,[S,w,z,I,a(p,{id:"mermaid-110",code:"eJxLL0osyFDwCeJSAAILjWglC6VYTTDH0AjIMzSCc0GShmBZiFoFXV07oCIIZcEFACucDbA="}),N,a(p,{id:"mermaid-114",code:"eJxLL0osyFDwCeJSAAJDI41oJUMjpVhNCNcCxLWAcU2BPFMQB6pWQVfXDqgGTJlyAQArMg2n"}),W,a(p,{id:"mermaid-118",code:"eJxLL0osyFDwCeJSAAJDC41oJUMLpVhNMNcUyDMFcaCSCrq6dgqmXAAh8wnP"}),D,a(p,{id:"mermaid-122",code:"eJxLL0osyFDwCeJSAAJTjWglU6VYTTDHyADIMzIAcSGSCrq6dkBRLgAfygm6"}),L]),q,n("section",V,[n("ol",F,[n("li",B,[n("p",null,[s("在 JavaScript 中通过 queueMicrotask() 使用微任务，MDN，"),n("a",O,[s("https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide"),a(t)]),s(),U])])])])])}const X=i(d,[["render",Z],["__file","microtask.html.vue"]]),R=JSON.parse('{"path":"/notebook/js/microtask.html","title":"JavaScript 中的任务和微任务","lang":"zh-CN","frontmatter":{"description":"JavaScript 中的任务和微任务 1. 引入 在下面的代码中，输出的顺序是怎样的？ 下面我们执行代码： 我们可以得到如下的输出： 如果需要仔细理解上述代码的执行过程，需要详细了解 JavaScript 中的任务和微任务。 有的地方将 任务（Task）称为 宏任务（MacroTask），本文只引用专业材料故只使用 任务 这一术语。 2. 任务和微任...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/notebook/js/microtask.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"JavaScript 中的任务和微任务"}],["meta",{"property":"og:description","content":"JavaScript 中的任务和微任务 1. 引入 在下面的代码中，输出的顺序是怎样的？ 下面我们执行代码： 我们可以得到如下的输出： 如果需要仔细理解上述代码的执行过程，需要详细了解 JavaScript 中的任务和微任务。 有的地方将 任务（Task）称为 宏任务（MacroTask），本文只引用专业材料故只使用 任务 这一术语。 2. 任务和微任..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T11:44:04.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-04T11:44:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 中的任务和微任务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-04T11:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 引入","slug":"1-引入","link":"#1-引入","children":[]},{"level":2,"title":"2. 任务和微任务","slug":"2-任务和微任务","link":"#2-任务和微任务","children":[{"level":3,"title":"2.1 任务","slug":"21-任务","link":"#21-任务","children":[]},{"level":3,"title":"2.2 微任务","slug":"22-微任务","link":"#22-微任务","children":[]},{"level":3,"title":"2.3 任务和微任务的区别","slug":"23-任务和微任务的区别","link":"#23-任务和微任务的区别","children":[]}]},{"level":2,"title":"3. 一些练习","slug":"3-一些练习","link":"#3-一些练习","children":[]}],"git":{"createdTime":1688379013000,"updatedTime":1714823044000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":4.31,"words":1294},"filePathRelative":"notebook/js/microtask.md","localizedDate":"2023年7月3日","autoDesc":true}');export{X as comp,R as data};
