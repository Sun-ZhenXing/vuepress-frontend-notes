import{_ as D,r,o as t,c as i,b as s,a,w as e,d as n,e as c}from"./app-rPvAhQef.js";const y={},d=s("h1",{id:"javascript-中的任务和微任务",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#javascript-中的任务和微任务","aria-hidden":"true"},"#"),n(" JavaScript 中的任务和微任务")],-1),C={class:"table-of-contents"},v=c(`<h2 id="1-引入" tabindex="-1"><a class="header-anchor" href="#1-引入" aria-hidden="true">#</a> 1. 引入</h2><p>在下面的代码中，输出的顺序是怎样的？</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">app</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;0&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;1-2&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;2-1&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;1&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;1-1&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;2-2&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;2&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#DCDCAA;">app</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span></code></pre></div><p>下面我们执行代码：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">node</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">docs/notebook/js/src/microtask1.js</span></span>
<span class="line"></span></code></pre></div><p>我们可以得到如下的输出：</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#B5CEA8;">2</span></span>
<span class="line"><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">2</span></span>
<span class="line"><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">2</span></span>
<span class="line"></span></code></pre></div><p>如果需要仔细理解上述代码的执行过程，需要详细了解 JavaScript 中的任务和微任务。</p><p>有的地方将 <strong>任务</strong>（Task）称为 <strong>宏任务</strong>（MacroTask），本文只引用专业材料故只使用 <strong>任务</strong> 这一术语。</p><h2 id="2-任务和微任务" tabindex="-1"><a class="header-anchor" href="#2-任务和微任务" aria-hidden="true">#</a> 2. 任务和微任务</h2><h3 id="21-任务" tabindex="-1"><a class="header-anchor" href="#21-任务" aria-hidden="true">#</a> 2.1 任务</h3><p>一个任务就是由执行诸如从头执行一段程序、执行一个事件回调或一个 <code>setInterval</code> / <code>setTimeout</code> 被触发之类的标准机制而被调度的任意 JavaScript 代码。这些都在 <strong>任务队列</strong>（Task Queue）上被调度。<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><p>在以下时机，任务会被添加到任务队列：</p><ol><li>一段新程序或子程序被直接执行时（比如从一个控制台，或在一个 <code>&lt;script&gt;</code> 元素中运行代码）。</li><li>触发了一个事件，将其回调函数添加到任务队列时。</li><li>执行到一个由 <code>setTimeout()</code> 或 <code>setInterval()</code> 创建的事件，以致相应的回调函数被添加到任务队列时。</li></ol><p>事件循环驱动你的代码按照这些任务排队的顺序，一个接一个地处理它们。在当前迭代轮次中，只有那些当事件循环过程开始时 已经处于任务队列中 的任务会被执行。其余的任务不得不等待到下一次迭代。</p><h3 id="22-微任务" tabindex="-1"><a class="header-anchor" href="#22-微任务" aria-hidden="true">#</a> 2.2 微任务</h3>`,16),u=s("strong",null,"微任务",-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/User_agent",target:"_blank",rel:"noopener noreferrer"},A={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer"},E=s("code",null,"Promise",-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver",target:"_blank",rel:"noopener noreferrer"},_={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"Window",-1),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Worker",target:"_blank",rel:"noopener noreferrer"},F=s("code",null,"Worker",-1),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/queueMicrotask",target:"_blank",rel:"noopener noreferrer"},P=s("code",null,"queueMicrotask()",-1),B=c(`<h3 id="23-任务和微任务的区别" tabindex="-1"><a class="header-anchor" href="#23-任务和微任务的区别" aria-hidden="true">#</a> 2.3 任务和微任务的区别</h3><p>首先它们有一些共同点，例如它们都由位于某个队列的 JavaScript 代码组成并在合适的时候运行。但是，只有在迭代开始时队列中存在的任务才会被事件循环一个接一个地运行，这和处理微任务队列是殊为不同的。</p><p>有两点关键的区别。</p><p>首先，每当一个任务存在，事件循环都会检查该任务是否正把控制权交给其他 JavaScript 代码。如若不然，事件循环就会运行微任务队列中的所有微任务。接下来微任务循环会在事件循环的每次迭代中被处理多次，包括处理完事件和其他回调之后。</p><p>其次，如果一个微任务通过调用 <code>queueMicrotask()</code> 向队列中加入了更多的微任务，则那些新加入的微任务会早于下一个任务运行。这是因为事件循环会持续调用微任务直至队列中没有留存的，即使是在有更多微任务持续被加入的情况下。</p><div class="hint-container warning"><p class="hint-container-title">微任务无限递归</p><p>因为微任务自身可以入列更多的微任务，且事件循环会持续处理微任务直至队列为空，那么就存在一种使得事件循环无尽处理微任务的风险。</p></div><h2 id="3-一些练习" tabindex="-1"><a class="header-anchor" href="#3-一些练习" aria-hidden="true">#</a> 3. 一些练习</h2><p>描述下列代码的输出结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">p</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">p1</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#DCDCAA;">setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">      })</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">p1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">p</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>点击查看答案</summary><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#B5CEA8;">3</span></span>
<span class="line"><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#B5CEA8;">2</span></span>
<span class="line"><span style="color:#B5CEA8;">4</span></span>
<span class="line"></span></code></pre></div></details><p>描述下列代码的输出结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">resolvePromise</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">resolvedPromise</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// resolve(resolvedPromise) 相当于下面的代码</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// Promise.resolve().then(() =&gt; resolvedPromise.then(resolve))</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolvedPromise</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">resolvePromise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;resolvePromise resolved&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">resolvedPromiseThen</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;promise1&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;sync&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">resolvedPromiseThen</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;promise2&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;promise3&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;end&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),x={class:"hint-container details"},M=c(`<summary>点击查看答案</summary><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">sync</span></span>
<span class="line"><span style="color:#9CDCFE;">end</span></span>
<span class="line"><span style="color:#9CDCFE;">promise1</span></span>
<span class="line"><span style="color:#9CDCFE;">promise2</span></span>
<span class="line"><span style="color:#9CDCFE;">resolvePromise</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">resolved</span></span>
<span class="line"><span style="color:#9CDCFE;">promise3</span></span>
<span class="line"></span></code></pre></div><p>首先运行所有同步代码，然后运行微任务队列中的所有微任务。</p><p>初始的微任务队列如下，使用行号表示：</p>`,4),J=s("p",null,[n("下面弹出 "),s("strong",null,"任务 8"),n("，由于 "),s("strong",null,"任务 8"),n(" 中包含一个 "),s("code",null,"Promise.resolve"),n("，然后将 "),s("strong",null,"任务 5"),n(" 入队：")],-1),I=s("p",null,[n("下面弹出 "),s("strong",null,"任务 12"),n("，打印 "),s("code",null,"promise1"),n("，然后将 "),s("strong",null,"任务 9"),n(" 入队：")],-1),j=s("p",null,[n("下面弹出 "),s("strong",null,"任务 18"),n("，打印 "),s("code",null,"promise2"),n("，然后将 "),s("strong",null,"任务 20"),n(" 入队：")],-1),z=s("p",null,[n("下面弹出 "),s("strong",null,"任务 5"),n("，打印 "),s("code",null,"resolvePromise resolved"),n("，然后弹出 "),s("strong",null,"任务 20"),n("，打印 "),s("code",null,"promise3"),n("。")],-1),T=s("hr",{class:"footnotes-sep"},null,-1),W={class:"footnotes"},N={class:"footnotes-list"},S={id:"footnote1",class:"footnote-item"},L={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide",target:"_blank",rel:"noopener noreferrer"},w=s("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function V(q,U){const o=r("router-link"),l=r("ExternalLinkIcon"),p=r("Mermaid");return t(),i("div",null,[d,s("nav",C,[s("ul",null,[s("li",null,[a(o,{to:"#1-引入"},{default:e(()=>[n("1. 引入")]),_:1})]),s("li",null,[a(o,{to:"#2-任务和微任务"},{default:e(()=>[n("2. 任务和微任务")]),_:1}),s("ul",null,[s("li",null,[a(o,{to:"#21-任务"},{default:e(()=>[n("2.1 任务")]),_:1})]),s("li",null,[a(o,{to:"#22-微任务"},{default:e(()=>[n("2.2 微任务")]),_:1})]),s("li",null,[a(o,{to:"#23-任务和微任务的区别"},{default:e(()=>[n("2.3 任务和微任务的区别")]),_:1})])])]),s("li",null,[a(o,{to:"#3-一些练习"},{default:e(()=>[n("3. 一些练习")]),_:1})])])]),v,s("p",null,[n("一个 "),u,n("（MicroTask）就是一个简短的函数，当创建该微任务的函数执行之后，并且只有当 Javascript 调用栈为空，而控制权尚未返还给被 "),s("a",h,[n("用户代理"),a(l)]),n(" 用来驱动脚本执行环境的事件循环之前，该微任务才会被执行。事件循环既可能是浏览器的主事件循环也可能是被一个 "),s("a",A,[n("Web Worker"),a(l)]),n(" 所驱动的事件循环。这使得给定的函数在没有其他脚本执行干扰的情况下运行，也保证了微任务能在用户代理有机会对该微任务带来的行为做出反应之前运行。")]),s("p",null,[n("JavaScript 中的 "),s("a",m,[E,a(l)]),n(" 和 "),s("a",g,[n("Mutation Observer API"),a(l)]),n(" 都使用微任务队列去运行它们的回调函数，但当能够推迟工作直到当前事件循环过程完结时，也是可以执行微任务的时机。为了允许第三方库、框架、polyfill 能使用微任务，在 "),s("a",_,[b,a(l)]),n(" 和 "),s("a",f,[F,a(l)]),n(" 接口上暴露了 "),s("a",k,[P,a(l)]),n(" 方法。")]),B,s("details",x,[M,a(p,{id:"mermaid-110",code:"eJxLL0osyFDwCeJSAAILjWglC6VYTTDH0AjIMzSCc0GShmBZiFoFXV07oCIIZcEFACucDbA="}),J,a(p,{id:"mermaid-114",code:"eJxLL0osyFDwCeJSAAJDI41oJUMjpVhNCNcCxLWAcU2BPFMQB6pWQVfXDqgGTJlyAQArMg2n"}),I,a(p,{id:"mermaid-118",code:"eJxLL0osyFDwCeJSAAJDC41oJUMLpVhNMNcUyDMFcaCSCrq6dgqmXAAh8wnP"}),j,a(p,{id:"mermaid-122",code:"eJxLL0osyFDwCeJSAAJTjWglU6VYTTDHyADIMzIAcSGSCrq6dkBRLgAfygm6"}),z]),T,s("section",W,[s("ol",N,[s("li",S,[s("p",null,[n("在 JavaScript 中通过 queueMicrotask() 使用微任务，MDN，"),s("a",L,[n("https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide"),a(l)]),n(),w])])])])])}const O=D(y,[["render",V],["__file","microtask.html.vue"]]);export{O as default};
