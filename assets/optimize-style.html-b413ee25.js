import{_ as o,M as l,p as c,q as d,Q as a,N as e,V as s,t,a1 as p}from"./framework-7b83bea1.js";const r={},i=a("h1",{id:"android-样式优化",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#android-样式优化","aria-hidden":"true"},"#"),t(" Android 样式优化")],-1),u={class:"table-of-contents"},h=p(`<h2 id="_1-actionbar" tabindex="-1"><a class="header-anchor" href="#_1-actionbar" aria-hidden="true">#</a> 1. ActionBar</h2><h3 id="_1-1-如何隐藏导航栏" tabindex="-1"><a class="header-anchor" href="#_1-1-如何隐藏导航栏" aria-hidden="true">#</a> 1.1 如何隐藏导航栏</h3><p>通过更改继承的主题即可，在 <code>themes.xml</code>，默认情况下为：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Theme.Calc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Theme.MaterialComponents.DayNight.DarkActionBar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>将 <code>DarkActionBar</code> 修改为 <code>NoActionBar</code> 即可。</p><h3 id="_1-2-去除导航栏阴影" tabindex="-1"><a class="header-anchor" href="#_1-2-去除导航栏阴影" aria-hidden="true">#</a> 1.2 去除导航栏阴影</h3><p>在 <code>themes.xml</code> 中添加：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android:windowContentOverlay<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>@null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>并在对应的 Activity 的 <code>onCreate</code> 函数中添加：</p><div class="language-kotlin" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// remove actionbar shadow</span>
supportActionBar<span class="token operator">?</span><span class="token punctuation">.</span>elevation <span class="token operator">=</span> <span class="token number">0.0f</span>
</code></pre></div><h2 id="_2-如何自定义图标" tabindex="-1"><a class="header-anchor" href="#_2-如何自定义图标" aria-hidden="true">#</a> 2. 如何自定义图标</h2><p>在 <strong>res</strong> 文件夹上右键，<strong>New</strong> -&gt; <strong>Image Asset</strong>，可以设置前景和背景，可以指定一个资源，也可以指定一个矢量图或普通图像然后自动生成一个图标。</p><div class="hint-container warning"><p class="hint-container-title">资源错误</p><p>Android Stdio 会自动将 SVG 转换为资源文件，但启动时可能报错找不到资源，这是因为 Android Studio 没有生成 XML 声明，需要手动加入：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</code></pre></div><p>将上面一行代码粘贴到报错资源的第一行即可。</p></div><h2 id="_3-edittext" tabindex="-1"><a class="header-anchor" href="#_3-edittext" aria-hidden="true">#</a> 3. EditText</h2><h3 id="_3-1-常见属性" tabindex="-1"><a class="header-anchor" href="#_3-1-常见属性" aria-hidden="true">#</a> 3.1 常见属性</h3><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td><code>android:background=&quot;@null&quot;</code></td><td>去除下划线</td></tr><tr><td><code>android:cursorVisible=&quot;false&quot;</code></td><td>隐藏光标</td></tr><tr><td><code>android:hint=&quot;@string/search_hint&quot;</code></td><td>设置提示文字</td></tr><tr><td><code>android:inputType=&quot;text&quot;</code></td><td>设置输入类型</td></tr></tbody></table>`,16);function k(_,g){const n=l("router-link");return c(),d("div",null,[i,a("nav",u,[a("ul",null,[a("li",null,[e(n,{to:"#_1-actionbar"},{default:s(()=>[t("1. ActionBar")]),_:1}),a("ul",null,[a("li",null,[e(n,{to:"#_1-1-如何隐藏导航栏"},{default:s(()=>[t("1.1 如何隐藏导航栏")]),_:1})]),a("li",null,[e(n,{to:"#_1-2-去除导航栏阴影"},{default:s(()=>[t("1.2 去除导航栏阴影")]),_:1})])])]),a("li",null,[e(n,{to:"#_2-如何自定义图标"},{default:s(()=>[t("2. 如何自定义图标")]),_:1})]),a("li",null,[e(n,{to:"#_3-edittext"},{default:s(()=>[t("3. EditText")]),_:1}),a("ul",null,[a("li",null,[e(n,{to:"#_3-1-常见属性"},{default:s(()=>[t("3.1 常见属性")]),_:1})])])])])]),h])}const x=o(r,[["render",k],["__file","optimize-style.html.vue"]]);export{x as default};
