import{_ as D,r as o,o as r,c,d as s,e as n,b as a,w as e,f as t}from"./app-a4fc4acc.js";const i={},y={id:"usestorage",tabindex:"-1"},d=s("a",{class:"header-anchor",href:"#usestorage","aria-hidden":"true"},"#",-1),C={href:"https://vueuse.org/core/useStorage/",target:"_blank",rel:"noopener noreferrer"},u={class:"table-of-contents"},v=t(`<h2 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h2><p>响应式的 <code>localStorage</code> / <code>sessionStorage</code>。</p><h2 id="_2-使用示例" tabindex="-1"><a class="header-anchor" href="#_2-使用示例" aria-hidden="true">#</a> 2. 使用示例</h2><p>响应式的 <code>localStorage</code> / <code>sessionStorage</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">useStorage</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;@vueuse/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// bind object</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useStorage</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;my-store&#39;</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">hello:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;hi&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">greeting:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;Hello&#39;</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// bind boolean</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">flag</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useStorage</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;my-flag&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// returns Ref&lt;boolean&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// bind number</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">count</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useStorage</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;my-count&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// returns Ref&lt;number&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// bind string with SessionStorage</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">id</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useStorage</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;my-id&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;some-string-id&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">sessionStorage</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// returns Ref&lt;string&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// delete data from storage</span></span>
<span class="line"><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-合并缺省值" tabindex="-1"><a class="header-anchor" href="#_3-合并缺省值" aria-hidden="true">#</a> 3. 合并缺省值</h2><p>默认情况下，如果键已经存在，那么 <code>useStorage</code> 将使用来自存储的值，并忽略默认值。请注意，当你向默认值添加更多的属性时，如果客户端的存储没有该键，则该键可能是未定义的。</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">localStorage</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setItem</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;my-store&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;{&quot;hello&quot;: &quot;hello&quot;}&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useStorage</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;my-store&#39;</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">hello:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;hi&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">greeting:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;hello&#39;</span><span style="color:#D4D4D4;"> }, </span><span style="color:#9CDCFE;">localStorage</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">greeting</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// undefined, since the value is not presented in storage</span></span>
<span class="line"></span></code></pre></div><p>为了解决这个问题，可以传递 <code>mergeDefaults</code> 选项：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">localStorage</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setItem</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;my-store&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;{&quot;hello&quot;: &quot;nihao&quot;}&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useStorage</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&#39;my-store&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">hello:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;hi&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">greeting:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;hello&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">localStorage</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">mergeDefaults:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">hello</span><span style="color:#D4D4D4;">)    </span><span style="color:#6A9955;">// &#39;nihao&#39;, from storage</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">greeting</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// &#39;hello&#39;, from merged default value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当设置为 <code>true</code> 时，它将对对象执行 <strong>浅层合并</strong>。你可以传递一个函数来执行自定义的合并（例如，深度合并），例如：</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">state</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useStorage</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&#39;my-store&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">hello:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;hi&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">greeting:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;hello&#39;</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">localStorage</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#DCDCAA;">mergeDefaults</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">storageValue</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">defaults</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">deepMerge</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">defaults</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">storageValue</span><span style="color:#D4D4D4;">) }</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="_4-自定义序列化" tabindex="-1"><a class="header-anchor" href="#_4-自定义序列化" aria-hidden="true">#</a> 4. 自定义序列化</h2><p>默认情况下，<code>useStorage</code> 会根据提供的默认值的数据类型，智能地使用相应的序列化器。例如，<code>JSON.stringify</code> / <code>JSON.parse</code> 将被用于对象，<code>Number.toString</code> / <code>parseFloat</code> 用于数字，等等。</p><p>你也可以提供你自己的序列化函数给 <code>useStorage</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">useStorage</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;@vueuse/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">useStorage</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&#39;key&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  {},</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">serializer:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#DCDCAA;">read</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;"> ? </span><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">parse</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;">) : </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#DCDCAA;">write</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">stringify</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，当你提供 <code>null</code> 作为默认值时，<code>useStorage</code> 不能从它那里假设数据类型。在这种情况下，你可以提供一个自定义的序列化器，或者明确地重新使用内置的序列化器。</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">StorageSerializers</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">useStorage</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;@vueuse/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">objectLike</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useStorage</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;key&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">serializer:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">StorageSerializers</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">object</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#9CDCFE;">objectLike</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">foo:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;bar&#39;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"></span></code></pre></div>`,18);function E(g,m){const p=o("ExternalLinkIcon"),l=o("router-link");return r(),c("div",null,[s("h1",y,[d,n(),s("a",C,[n("useStorage"),a(p)])]),s("nav",u,[s("ul",null,[s("li",null,[a(l,{to:"#_1-介绍"},{default:e(()=>[n("1. 介绍")]),_:1})]),s("li",null,[a(l,{to:"#_2-使用示例"},{default:e(()=>[n("2. 使用示例")]),_:1})]),s("li",null,[a(l,{to:"#_3-合并缺省值"},{default:e(()=>[n("3. 合并缺省值")]),_:1})]),s("li",null,[a(l,{to:"#_4-自定义序列化"},{default:e(()=>[n("4. 自定义序列化")]),_:1})])])]),v])}const F=D(i,[["render",E],["__file","useStorage.html.vue"]]);export{F as default};
