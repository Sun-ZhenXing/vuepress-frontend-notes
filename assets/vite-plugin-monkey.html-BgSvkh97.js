import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as u,b as n,a,w as e,e as s,d as o}from"./app-C-lF8Tfs.js";const r={},d=n("h1",{id:"vite-开发-tampermonkey-脚本",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vite-开发-tampermonkey-脚本"},[n("span",null,"Vite 开发 Tampermonkey 脚本")])],-1),k={class:"table-of-contents"},v=n("h2",{id:"1-介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#1-介绍"},[n("span",null,"1. 介绍")])],-1),m=n("p",null,[n("code",null,"vite-plugin-monkey"),s(" 是一个基于 Vite 的油猴脚本开发工具，可以使用 Vite 的开发模式开发油猴脚本，支持热更新。")],-1),b={href:"https://github.com/lisonge/vite-plugin-monkey/blob/main/README_zh.md",target:"_blank",rel:"noopener noreferrer"},g=o(`<p>使用模板快速创建项目：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> create monkey
</code></pre></div><p>添加到现有项目：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> vite-plugin-monkey
</code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>vite-plugin-monkey</code> 必须是插件列表的最后一项。</p></div><h2 id="2-使用" tabindex="-1"><a class="header-anchor" href="#2-使用"><span>2. 使用</span></a></h2><p>下面我们使用 Vue + TypeScript 模板开发一个油猴脚本。使用其他模板与之类似，如果你没有复杂的需求可以使用 Vanilla 模板。</p><h3 id="21-配置" tabindex="-1"><a class="header-anchor" href="#21-配置"><span>2.1 配置</span></a></h3><p>如果你希望脚本尽可能早地执行，例如你希望替换内置变量实现拦截网络请求，可以配置 <code>@run-at</code> 为 <code>document-start</code>。但是这样会出现一个问题，由于脚本是在 <code>DOMContentLoaded</code> 之前执行的，所以无法获取到 <code>unsafeWindow.document</code> 对象。</p><p>所以我们在页面 DOM 准备好时再挂载 Vue 实例，这样可以确保脚本能正常执行。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>unsafeWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token string">&#39;complete&#39;</span><span class="token punctuation">)</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span>
      unsafeWindow<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> unsafeWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
  app<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;my-tamper-app&#39;</span><span class="token punctuation">)</span>
  unsafeWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>
  <span class="token keyword">return</span> app
<span class="token punctuation">}</span>

<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样脚本仍然会在进入页面时立即执行 <code>mount()</code> 之前的代码，然后等待页面 DOM 准备好时再执行 <code>mount()</code> 挂载 Vue 实例。</p><h3 id="22-cdn-引入" tabindex="-1"><a class="header-anchor" href="#22-cdn-引入"><span>2.2 CDN 引入</span></a></h3><p>Vue 默认以 CDN 的形式引入，如果不使用 CDN 我们打包看一下大小：</p><div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>dist/monkey-test.user.js  167.24 kB │ gzip: 38.03 kB
</code></pre></div><p>下面是默认的状态下打包：</p><div class="language-console" data-ext="console" data-title="console"><pre class="language-console"><code>dist/monkey-test.user.js  8.44 kB │ gzip: 3.47 kB
</code></pre></div><p>对比不使用 CDN，有几十倍的差距。</p><p>由于 jsDelivr 在大陆速度较慢，如果你的目标用户在大陆，可以考虑国内的 CDN，如 <code>npmmirror</code>、<code>staticfile</code>、<code>baomitu</code>、<code>bootcdn</code> 等。如果你使用的库很少见，可以试着在 <code>npmmirror</code> 上找。</p><p>需要注意不同 CDN 提供商的文件名和路径可能不同，例如下面对比 <code>vue</code> 的引入：</p><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  externalGlobals<span class="token operator">:</span> <span class="token punctuation">{</span>
    vue<span class="token operator">:</span> cdn<span class="token punctuation">.</span><span class="token function">staticfile</span><span class="token punctuation">(</span><span class="token string">&#39;Vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vue.runtime.global.prod.min.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  externalGlobals<span class="token operator">:</span> <span class="token punctuation">{</span>
    vue<span class="token operator">:</span> cdn<span class="token punctuation">.</span><span class="token function">npmmirror</span><span class="token punctuation">(</span><span class="token string">&#39;Vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dist/vue.runtime.global.prod.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>部分 <code>.min.js</code> 文件是由 CDN 提供商自行压缩，可以根据需求选择。</p><h3 id="23-代码压缩" tabindex="-1"><a class="header-anchor" href="#23-代码压缩"><span>2.3 代码压缩</span></a></h3>`,24),y={href:"https://greasyfork.org/zh-CN/help/code-rules",target:"_blank",rel:"noopener noreferrer"},f=o(`<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  build<span class="token operator">:</span> <span class="token punctuation">{</span>
    minify<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="24-自动导入" tabindex="-1"><a class="header-anchor" href="#24-自动导入"><span>2.4 自动导入</span></a></h3><p>导入 <code>GM_*</code> 方法需要默认从 <code>$</code> 内导入，也可以开启自动导入。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">monkey</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      server<span class="token operator">:</span> <span class="token punctuation">{</span>
        mountGmApi<span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法会将变量直接绑定到全局对象 <code>globalThis</code>。</p><p>下面推荐使用 <code>unplugin-auto-import</code> 插件实现自动导入：</p><p>安装插件：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> unplugin-auto-import
</code></pre></div><p>引入：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> monkey<span class="token punctuation">,</span> <span class="token punctuation">{</span> util <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-monkey&#39;</span>
<span class="token keyword">import</span> AutoImport <span class="token keyword">from</span> <span class="token string">&#39;unplugin-auto-import/vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">AutoImport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      imports<span class="token operator">:</span> <span class="token punctuation">[</span>util<span class="token punctuation">.</span>unimportPreset<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">monkey</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="3-常见功能实现" tabindex="-1"><a class="header-anchor" href="#3-常见功能实现"><span>3. 常见功能实现</span></a></h2><h3 id="31-全局存储" tabindex="-1"><a class="header-anchor" href="#31-全局存储"><span>3.1 全局存储</span></a></h3><p>我们常常需要在脚本内储存一些数据，以便下次打开网页时可以读取到。如果我们使用 <code>localStorage</code>，这些数据只会在同一个网站共享，不同网站无法访问，还可能污染原网站的数据。</p><p>Tampermonkey 提供了 <code>GM_getValue</code> 和 <code>GM_setValue</code> 方法，可以在油猴脚本内全局储存数据。</p><p>下面我们创建 <code>src/composables/useMonkeyStore.ts</code> 来封装一个响应式的油猴脚本存储钩子：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Ref<span class="token punctuation">,</span> UnwrapRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GM_getValue<span class="token punctuation">,</span> GM_setValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;$&#39;</span>

<span class="token doc-comment comment">/**
 * Tampermonkey 存储钩子
 * <span class="token keyword">@param</span> <span class="token parameter">key</span> 存储键名称
 * <span class="token keyword">@param</span> <span class="token parameter">defaultValue</span> 默认值
 * <span class="token keyword">@returns</span> ref
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useMonkeyStore</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> defaultValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UnwrapRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> gmValue <span class="token operator">=</span> <span class="token generic-function"><span class="token function">GM_getValue</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue<span class="token punctuation">)</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>gmValue<span class="token punctuation">)</span>
  <span class="token function">watch</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">GM_setValue</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> deep<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们常常希望创建一些全局共享的数据。有时需要响应式地进行持久化，这个时候我们可以用 <code>@vueuse/core</code> 中的 <code>createGlobalState()</code> 函数创建全局状态。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createGlobalState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useMonkeyStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./useMonkeyStore&#39;</span>

<span class="token doc-comment comment">/**
 * 全局状态，但是不会持久化
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> useActivated <span class="token operator">=</span> <span class="token function">createGlobalState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    activated<span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
 * 全局配置，可放置到公共配置文件中
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> DefaultConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  isDark<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  isShowLogo<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  isShowTitle<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 全局配置，将响应式地持久化到 Tampermonkey 中
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> useConfig <span class="token operator">=</span> <span class="token function">createGlobalState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    options<span class="token operator">:</span> <span class="token function">useMonkeyStore</span><span class="token punctuation">(</span><span class="token string">&#39;myOptions&#39;</span><span class="token punctuation">,</span> DefaultConfig<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者我们创建一个通用的钩子：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * Tampermonkey 全局存储状态钩子
 * <span class="token keyword">@param</span> <span class="token parameter">key</span> 存储键名称
 * <span class="token keyword">@param</span> <span class="token parameter">defaultValue</span> 默认值
 * <span class="token keyword">@param</span> <span class="token parameter">exportName</span> 导出名称，如果不填则默认为 \`key\`
 * <span class="token keyword">@returns</span> 导出的 \`<span class="token punctuation">{</span> [exportName ?? key]: ref <span class="token punctuation">}</span>\`
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useGlobalState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> defaultValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> exportName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">createGlobalState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>exportName <span class="token operator">??</span> key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token function">useMonkeyStore</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue<span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这种响应式只能在同一个网页实现响应式，在不同网页想要实现响应需要，请继续看下面的监听变量的实现。</p><h3 id="32-监听变量" tabindex="-1"><a class="header-anchor" href="#32-监听变量"><span>3.2 监听变量</span></a></h3><h3 id="33-元素拖拽" tabindex="-1"><a class="header-anchor" href="#33-元素拖拽"><span>3.3 元素拖拽</span></a></h3><p>如果你希望开发一个可以拖拽的工具包，悬浮于目标网页之上，那么你很可能需要 <code>useDraggable</code> 钩子，它可以让你的元素拖拽起来。</p>`,24),h={href:"https://vueuse.org/",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"@vueuse/core",-1),x={href:"https://vueuse.org/core/useDraggable/",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"useDraggable",-1),D=o(`<div class="language-typescript" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> style <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useDraggable</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  preventDefault<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  draggingElement<span class="token operator">:</span> unsafeWindow<span class="token punctuation">,</span>
  handle<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,1),E=n("li",null,[n("code",null,"target"),s("：被移动的目标元素")],-1),T=n("li",null,[n("code",null,"options.preventDefault"),s("：是否阻止默认事件")],-1),V=n("li",null,[n("code",null,"options.draggingElement"),s("：指定为目标窗口")],-1),M=n("li",null,[n("code",null,"options.handle"),s("：被拖拽的元素，默认为 "),n("code",null,"target")],-1),C={href:"https://vueuse.org/core/useDraggable/",target:"_blank",rel:"noopener noreferrer"},S=o(`<p>需要将 <code>style</code> 绑定到目标元素的 <code>style</code> 属性上，且需要设置 <code>position: absolute</code> 或 <code>position: fixed</code>。</p><p>下面是作者自己实现的 <code>useDraggable</code> 钩子，更简单容易理解，与框架无关。</p><details class="hint-container details"><summary>useDraggable.ts</summary><p>通过调用 <code>destroy()</code> 方法可以销毁事件监听器。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 支持元素拖拽
 * <span class="token keyword">@param</span> <span class="token parameter">handleElement</span> 可拖拽元素
 * <span class="token keyword">@param</span> <span class="token parameter">targetElement</span> 被拖拽目标元素，需要 \`position: absolute\` 或 \`position: fixed\`
 * <span class="token keyword">@param</span> <span class="token parameter">draggingDoc</span> 事件监听器所在的文档
 * <span class="token keyword">@param</span> <span class="token parameter">initX</span> 初始位置 \`x\` (px)
 * <span class="token keyword">@param</span> <span class="token parameter">initY</span> 初始位置 \`y\` (px)
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useDraggable</span><span class="token punctuation">(</span>handleElement<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> targetElement<span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> draggingDoc<span class="token operator">?</span><span class="token operator">:</span> Document<span class="token punctuation">,</span> initX<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> initY<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> offsetX <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> offsetY <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> doc <span class="token operator">=</span> draggingDoc <span class="token operator">??</span> globalThis<span class="token punctuation">.</span>document

  <span class="token comment">// 当鼠标按下时，开始拖拽</span>
  handleElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousedown&#39;</span><span class="token punctuation">,</span> dragStart<span class="token punctuation">)</span>

  <span class="token keyword">function</span> <span class="token function">dragStart</span><span class="token punctuation">(</span>event<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    offsetX <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> targetElement<span class="token punctuation">.</span>offsetLeft
    offsetY <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> targetElement<span class="token punctuation">.</span>offsetTop
    doc<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> drag<span class="token punctuation">)</span>
    doc<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseup&#39;</span><span class="token punctuation">,</span> dragEnd<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 拖拽过程中的处理函数</span>
  <span class="token keyword">function</span> <span class="token function">drag</span><span class="token punctuation">(</span>event<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    targetElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>clientX <span class="token operator">-</span> offsetX<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span>
    targetElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>clientY <span class="token operator">-</span> offsetY<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 拖拽结束时的处理函数</span>
  <span class="token keyword">function</span> <span class="token function">dragEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doc<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> drag<span class="token punctuation">)</span>
    doc<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseup&#39;</span><span class="token punctuation">,</span> dragEnd<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 设置初始位置</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>initX <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
    targetElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>initX<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>initY <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
    targetElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>initY<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span>

  <span class="token comment">// 销毁时移除事件监听器</span>
  <span class="token keyword">function</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    handleElement<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousedown&#39;</span><span class="token punctuation">,</span> dragStart<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    destroy<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="34-网络请求" tabindex="-1"><a class="header-anchor" href="#34-网络请求"><span>3.4 网络请求</span></a></h3><p>如果你需要模拟当前网页的请求，可以直接使用 <code>unsafeWindow.fetch()</code> 方法或者 <code>unsafeWindow.XMLHttpRequest()</code> 对象。</p><p>下面是一个请求示例：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">MyParams</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> MyParams<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Response<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> queryString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>p <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://example.com/api?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>queryString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> unsafeWindow<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    method<span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    credentials<span class="token operator">:</span> <span class="token string">&#39;include&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> response
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果网站的鉴权使用的是 Cookie，要带上 <code>credentials: &#39;include&#39;</code>，才会携带 Cookie 进行请求。如果网站使用的是 Token，可以在请求头中添加 <code>Authorization</code> 字段。</p><p>如果你需要更加强大的请求方式，如发起跨域请求，可以使用 Tampermonkey 提供的 <code>GM_xmlhttpRequest()</code> 方法。</p><p>由于部分 Cookie 是 <code>HttpOnly</code> 的，无法通过 <code>document.cookie</code> 获取。因此使用自定义的 <code>GM_xmlhttpRequest()</code> 并不能模拟当前网页的请求，因为受保护的 Cookie 脚本是无法获取的。</p><h3 id="35-模拟表单输入" tabindex="-1"><a class="header-anchor" href="#35-模拟表单输入"><span>3.5 模拟表单输入</span></a></h3><p>由于现在许多网站都使用了 React 或 Vue，所以直接设置表单元素的值可能无效，不会被响应式系统接收到，所以我们需要模拟输入。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ReactInputDom</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLInputElement</span> <span class="token punctuation">{</span>
  _valueTracker<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 模拟输入框操作
 * <span class="token keyword">@param</span> <span class="token parameter">inputDom</span> 输入 DOM
 * <span class="token keyword">@param</span> <span class="token parameter">text</span> 修改的文本
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">simulateInputValue</span><span class="token punctuation">(</span>inputDom<span class="token operator">:</span> HTMLTextAreaElement <span class="token operator">|</span> HTMLInputElement<span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> lastValue <span class="token operator">=</span> inputDom<span class="token punctuation">.</span>value
  inputDom<span class="token punctuation">.</span>value <span class="token operator">=</span> text
  <span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> bubbles<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// For React</span>
  <span class="token keyword">const</span> tracker <span class="token operator">=</span> <span class="token punctuation">(</span>inputDom <span class="token keyword">as</span> ReactInputDom<span class="token punctuation">)</span><span class="token punctuation">.</span>_valueTracker
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tracker<span class="token punctuation">)</span>
    tracker<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>lastValue<span class="token punctuation">)</span>

  inputDom<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 模拟键盘回车
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">simulateEnter</span><span class="token punctuation">(</span>inputDom<span class="token operator">:</span> HTMLTextAreaElement <span class="token operator">|</span> HTMLInputElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> event<span class="token operator">:</span> KeyboardEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyboardEvent</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    bubbles<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    cancelable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    key<span class="token operator">:</span> <span class="token string">&#39;Enter&#39;</span><span class="token punctuation">,</span>
    code<span class="token operator">:</span> <span class="token string">&#39;Enter&#39;</span><span class="token punctuation">,</span>
    charCode<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
    keyCode<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  inputDom<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="36-拦截请求" tabindex="-1"><a class="header-anchor" href="#36-拦截请求"><span>3.6 拦截请求</span></a></h3><p>一般拦截请求都是靠重写 <code>XMLHttpRequest</code> 对象和 <code>fetch</code> 方法来实现的，所以这种方法只能拦截 Ajax 请求，不能拦截 <code>document</code> / <code>script</code> / <code>ws</code> 等请求。</p><p>如果需要拦截复杂的请求需要重写更复杂的对象。例如拦截 JSONP 请求，需要知道当前网页是如何创建 <code>&lt;script&gt;</code> 元素的。</p><p>在拦截之前，我们希望我们的脚本尽可能早地执行，因此我们需要配置 <code>@run-at</code> 为 <code>document-start</code>，这样我们的脚本会在 <code>DOMContentLoaded</code> 之前执行。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// vite.config.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">monkey</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      userscript<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;run-at&#39;</span><span class="token operator">:</span> <span class="token string">&#39;document-start&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们重写 <code>fetch</code> 方法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> originFetch <span class="token operator">=</span> fetch
unsafeWindow<span class="token punctuation">.</span><span class="token function-variable function">fetch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">originFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/api\\/test</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> responseClone <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> responseClone<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">// 此处可以修改数据</span>
      res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> responseNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
      <span class="token keyword">return</span> responseNew
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> response
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总之，重写请求方法可以完成取消请求、拦截请求、修改数据、修改结果等任何操作。</p><p>重写 <code>XMLHttpRequest</code> 对象也是类似的，但是更加复杂，还好我们可以借助第三方库来实现。</p>`,22),R={href:"https://github.com/wendux/ajax-hook",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"ajax-hook",-1),N=n("code",null,"XMLHttpRequest",-1),G=n("code",null,"ajax-hook",-1),X=o(`<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> ajax-hook
</code></pre></div><p>示例代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> proxy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ajax-hook&#39;</span>

<span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">//请求发起前进入</span>
  <span class="token function-variable function">onRequest</span><span class="token operator">:</span> <span class="token punctuation">(</span>config<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
    handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//请求发生错误时进入，比如超时</span>
  <span class="token comment">// 注意，不包括 HTTP 状态码错误，如 404、500</span>
  <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
    handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//请求成功后进入</span>
  <span class="token function-variable function">onResponse</span><span class="token operator">:</span> <span class="token punctuation">(</span>response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>response<span class="token punctuation">)</span>
    handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外也可以使用更高级的 <code>hook()</code> 函数来拦截各个请求阶段的回调。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">hook</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 参数 \`xhr\` 为原生 XHR 对象</span>
  <span class="token function-variable function">onload</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this 为代理 XHR 对象</span>
    <span class="token comment">// 原生 XHR 对象扩展了一个 \`getProxy()\` 方法，调用它可以获取代理 XHR 对象</span>
    <span class="token comment">// this === xhr.getProxy()</span>
    <span class="token comment">// 可以通过代理 XHR 对象的 \`xhr\` 属性获取原生 XHR 对象</span>
    <span class="token comment">// this.xhr === xhr</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;onload called&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function H(A,j){const t=c("router-link"),p=c("ExternalLinkIcon");return i(),u("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[a(t,{to:"#1-介绍"},{default:e(()=>[s("1. 介绍")]),_:1})]),n("li",null,[a(t,{to:"#2-使用"},{default:e(()=>[s("2. 使用")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#21-配置"},{default:e(()=>[s("2.1 配置")]),_:1})]),n("li",null,[a(t,{to:"#22-cdn-引入"},{default:e(()=>[s("2.2 CDN 引入")]),_:1})]),n("li",null,[a(t,{to:"#23-代码压缩"},{default:e(()=>[s("2.3 代码压缩")]),_:1})]),n("li",null,[a(t,{to:"#24-自动导入"},{default:e(()=>[s("2.4 自动导入")]),_:1})])])]),n("li",null,[a(t,{to:"#3-常见功能实现"},{default:e(()=>[s("3. 常见功能实现")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#31-全局存储"},{default:e(()=>[s("3.1 全局存储")]),_:1})]),n("li",null,[a(t,{to:"#32-监听变量"},{default:e(()=>[s("3.2 监听变量")]),_:1})]),n("li",null,[a(t,{to:"#33-元素拖拽"},{default:e(()=>[s("3.3 元素拖拽")]),_:1})]),n("li",null,[a(t,{to:"#34-网络请求"},{default:e(()=>[s("3.4 网络请求")]),_:1})]),n("li",null,[a(t,{to:"#35-模拟表单输入"},{default:e(()=>[s("3.5 模拟表单输入")]),_:1})]),n("li",null,[a(t,{to:"#36-拦截请求"},{default:e(()=>[s("3.6 拦截请求")]),_:1})])])])])]),v,m,n("p",null,[s("参见 "),n("a",b,[s("中文文档"),a(p)]),s(" 了解更多。")]),g,n("p",null,[s("默认情况下代码不会压缩，这是考虑到 Greasy Fork 的 "),n("a",y,[s("代码规则"),a(p)]),s("：提交到 Greasy Fork 的代码不得混淆或最小化。如果你不打算提交到 Greasy Fork 等平台，可以开启打码压缩：")]),f,n("p",null,[s("推荐使用 "),n("a",h,[w,a(p)]),s(" 中的 "),n("a",x,[_,a(p)]),s(" 钩子，它可以让你的元素拖拽起来。")]),D,n("ul",null,[E,T,V,M,n("li",null,[s("其他参数参见 "),n("a",C,[s("useDraggable"),a(p)]),s(" 文档")])]),S,n("p",null,[n("a",R,[L,a(p)]),s(" 是一个可以拦截 "),N,s(" 对象的库，兼容 ES5 与 ES6。下面安装 "),G,s("：")]),X])}const I=l(r,[["render",H],["__file","vite-plugin-monkey.html.vue"]]),O=JSON.parse('{"path":"/notebook/library/tampermonkey/vite-plugin-monkey.html","title":"Vite 开发 Tampermonkey 脚本","lang":"zh-CN","frontmatter":{"description":"Vite 开发 Tampermonkey 脚本 1. 介绍 vite-plugin-monkey 是一个基于 Vite 的油猴脚本开发工具，可以使用 Vite 的开发模式开发油猴脚本，支持热更新。 参见 中文文档 了解更多。 使用模板快速创建项目： 添加到现有项目： 注意 vite-plugin-monkey 必须是插件列表的最后一项。 2. 使用 下...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/notebook/library/tampermonkey/vite-plugin-monkey.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"Vite 开发 Tampermonkey 脚本"}],["meta",{"property":"og:description","content":"Vite 开发 Tampermonkey 脚本 1. 介绍 vite-plugin-monkey 是一个基于 Vite 的油猴脚本开发工具，可以使用 Vite 的开发模式开发油猴脚本，支持热更新。 参见 中文文档 了解更多。 使用模板快速创建项目： 添加到现有项目： 注意 vite-plugin-monkey 必须是插件列表的最后一项。 2. 使用 下..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-05T01:44:53.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-05T01:44:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vite 开发 Tampermonkey 脚本\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-05T01:44:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 介绍","slug":"1-介绍","link":"#1-介绍","children":[]},{"level":2,"title":"2. 使用","slug":"2-使用","link":"#2-使用","children":[{"level":3,"title":"2.1 配置","slug":"21-配置","link":"#21-配置","children":[]},{"level":3,"title":"2.2 CDN 引入","slug":"22-cdn-引入","link":"#22-cdn-引入","children":[]},{"level":3,"title":"2.3 代码压缩","slug":"23-代码压缩","link":"#23-代码压缩","children":[]},{"level":3,"title":"2.4 自动导入","slug":"24-自动导入","link":"#24-自动导入","children":[]}]},{"level":2,"title":"3. 常见功能实现","slug":"3-常见功能实现","link":"#3-常见功能实现","children":[{"level":3,"title":"3.1 全局存储","slug":"31-全局存储","link":"#31-全局存储","children":[]},{"level":3,"title":"3.2 监听变量","slug":"32-监听变量","link":"#32-监听变量","children":[]},{"level":3,"title":"3.3 元素拖拽","slug":"33-元素拖拽","link":"#33-元素拖拽","children":[]},{"level":3,"title":"3.4 网络请求","slug":"34-网络请求","link":"#34-网络请求","children":[]},{"level":3,"title":"3.5 模拟表单输入","slug":"35-模拟表单输入","link":"#35-模拟表单输入","children":[]},{"level":3,"title":"3.6 拦截请求","slug":"36-拦截请求","link":"#36-拦截请求","children":[]}]}],"git":{"createdTime":1699773694000,"updatedTime":1714873493000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":8.28,"words":2483},"filePathRelative":"notebook/library/tampermonkey/vite-plugin-monkey.md","localizedDate":"2023年11月12日","autoDesc":true}');export{I as comp,O as data};
