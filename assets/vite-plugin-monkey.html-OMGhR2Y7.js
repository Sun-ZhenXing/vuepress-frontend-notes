import{_ as c,r as D,o as t,c as r,b as s,a,w as p,d as n,e}from"./app-rPvAhQef.js";const y={},i=s("h1",{id:"vite-开发-tampermonkey-脚本",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#vite-开发-tampermonkey-脚本","aria-hidden":"true"},"#"),n(" Vite 开发 Tampermonkey 脚本")],-1),C={class:"table-of-contents"},d=s("h2",{id:"1-介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#1-介绍","aria-hidden":"true"},"#"),n(" 1. 介绍")],-1),u=s("p",null,[s("code",null,"vite-plugin-monkey"),n(" 是一个基于 Vite 的油猴脚本开发工具，可以使用 Vite 的开发模式开发油猴脚本，支持热更新。")],-1),E={href:"https://github.com/lisonge/vite-plugin-monkey/blob/main/README_zh.md",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>使用模板快速创建项目：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pnpm</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">create</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">monkey</span></span>
<span class="line"></span></code></pre></div><p>添加到现有项目：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pnpm</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">add</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-D</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">vite-plugin-monkey</span></span>
<span class="line"></span></code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>vite-plugin-monkey</code> 必须是插件列表的最后一项。</p></div><h2 id="2-使用" tabindex="-1"><a class="header-anchor" href="#2-使用" aria-hidden="true">#</a> 2. 使用</h2><p>下面我们使用 Vue + TypeScript 模板开发一个油猴脚本。使用其他模板与之类似，如果你没有复杂的需求可以使用 Vanilla 模板。</p><h3 id="21-配置" tabindex="-1"><a class="header-anchor" href="#21-配置" aria-hidden="true">#</a> 2.1 配置</h3><p>如果你希望脚本尽可能早地执行，例如你希望替换内置变量实现拦截网络请求，可以配置 <code>@run-at</code> 为 <code>document-start</code>。但是这样会出现一个问题，由于脚本是在 <code>DOMContentLoaded</code> 之前执行的，所以无法获取到 <code>unsafeWindow.document</code> 对象。</p><p>所以我们在页面 DOM 准备好时再挂载 Vue 实例，这样可以确保脚本能正常执行。</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createApp</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">App</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">unsafeWindow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">readyState</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;complete&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">unsafeWindow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">window</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;load&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">app</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">unsafeWindow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createElement</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;div&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setAttribute</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;id&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;my-tamper-app&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">unsafeWindow</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">document</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">body</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">append</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">app</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">createApp</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">App</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">mount</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">())</span></span>
<span class="line"></span></code></pre></div><p>这样脚本仍然会在进入页面时立即执行 <code>mount()</code> 之前的代码，然后等待页面 DOM 准备好时再执行 <code>mount()</code> 挂载 Vue 实例。</p><h3 id="22-cdn-引入" tabindex="-1"><a class="header-anchor" href="#22-cdn-引入" aria-hidden="true">#</a> 2.2 CDN 引入</h3><p>Vue 默认以 CDN 的形式引入，如果不使用 CDN 我们打包看一下大小：</p><div class="language-console" data-ext="console"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">dist/monkey-test.user.js  167.24 kB │ gzip: 38.03 kB</span></span>
<span class="line"></span></code></pre></div><p>下面是默认的状态下打包：</p><div class="language-console" data-ext="console"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">dist/monkey-test.user.js  8.44 kB │ gzip: 3.47 kB</span></span>
<span class="line"></span></code></pre></div><p>对比不使用 CDN，有几十倍的差距。</p><p>由于 jsDelivr 在大陆速度较慢，如果你的目标用户在大陆，可以考虑国内的 CDN，如 <code>npmmirror</code>、<code>staticfile</code>、<code>baomitu</code>、<code>bootcdn</code> 等。如果你使用的库很少见，可以试着在 <code>npmmirror</code> 上找。</p><p>需要注意不同 CDN 提供商的文件名和路径可能不同，例如下面对比 <code>vue</code> 的引入：</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C8C8C8;">externalGlobals</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C8C8C8;">vue</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">cdn</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">staticfile</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Vue&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;vue.runtime.global.prod.min.js&#39;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C8C8C8;">externalGlobals</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C8C8C8;">vue</span><span style="color:#D4D4D4;">: </span><span style="color:#9CDCFE;">cdn</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">npmmirror</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Vue&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;dist/vue.runtime.global.prod.js&#39;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>部分 <code>.min.js</code> 文件是由 CDN 提供商自行压缩，可以根据需求选择。</p><h3 id="23-代码压缩" tabindex="-1"><a class="header-anchor" href="#23-代码压缩" aria-hidden="true">#</a> 2.3 代码压缩</h3>`,24),m={href:"https://greasyfork.org/zh-CN/help/code-rules",target:"_blank",rel:"noopener noreferrer"},F=e(`<div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// vite.config.ts</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">defineConfig</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">build:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">minify:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><h3 id="24-自动导入" tabindex="-1"><a class="header-anchor" href="#24-自动导入" aria-hidden="true">#</a> 2.4 自动导入</h3><p>导入 <code>GM_*</code> 方法需要默认从 <code>$</code> 内导入，也可以开启自动导入。</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// vite.config.ts</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">defineConfig</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">plugins:</span><span style="color:#D4D4D4;"> [</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">monkey</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">server:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">mountGmApi:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span></span>
<span class="line"><span style="color:#D4D4D4;">      },</span></span>
<span class="line"><span style="color:#D4D4D4;">    }),</span></span>
<span class="line"><span style="color:#D4D4D4;">  ],</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><p>这种方法会将变量直接绑定到全局对象 <code>globalThis</code>。</p><p>下面推荐使用 <code>unplugin-auto-import</code> 插件实现自动导入：</p><p>安装插件：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pnpm</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">add</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-D</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">unplugin-auto-import</span></span>
<span class="line"></span></code></pre></div><p>引入：</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// vite.config.ts</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">defineConfig</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;vite&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">monkey</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">util</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;vite-plugin-monkey&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">AutoImport</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;unplugin-auto-import/vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">defineConfig</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">plugins:</span><span style="color:#D4D4D4;"> [</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">AutoImport</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">imports:</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">util</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">unimportPreset</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">    }),</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">monkey</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#D4D4D4;">    }),</span></span>
<span class="line"><span style="color:#D4D4D4;">  ],</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="3-常见功能实现" tabindex="-1"><a class="header-anchor" href="#3-常见功能实现" aria-hidden="true">#</a> 3. 常见功能实现</h2><h3 id="31-全局存储" tabindex="-1"><a class="header-anchor" href="#31-全局存储" aria-hidden="true">#</a> 3.1 全局存储</h3><p>我们常常需要在脚本内储存一些数据，以便下次打开网页时可以读取到。如果我们使用 <code>localStorage</code>，这些数据只会在同一个网站共享，不同网站无法访问，还可能污染原网站的数据。</p><p>Tampermonkey 提供了 <code>GM_getValue</code> 和 <code>GM_setValue</code> 方法，可以在油猴脚本内全局储存数据。</p><p>下面我们创建 <code>src/composables/useMonkeyStore.ts</code> 来封装一个响应式的油猴脚本存储钩子：</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">ref</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">watch</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">type</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">Ref</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">UnwrapRef</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">GM_getValue</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">GM_setValue</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;$&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * Tampermonkey 存储钩子</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">key</span><span style="color:#6A9955;"> 存储键名称</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">defaultValue</span><span style="color:#6A9955;"> 默认值</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@returns</span><span style="color:#6A9955;"> ref</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">useMonkeyStore</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">defaultValue</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">Ref</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">UnwrapRef</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">gmValue</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">GM_getValue</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">defaultValue</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">gmValue</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">watch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">GM_setValue</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }, { </span><span style="color:#9CDCFE;">deep:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">value</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>我们常常希望创建一些全局共享的数据。有时需要响应式地进行持久化，这个时候我们可以用 <code>@vueuse/core</code> 中的 <code>createGlobalState()</code> 函数创建全局状态。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createGlobalState</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;@vueuse/core&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">ref</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">useMonkeyStore</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;./useMonkeyStore&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * 全局状态，但是不会持久化</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">useActivated</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createGlobalState</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">activated:</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ref</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * 全局配置，可放置到公共配置文件中</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">DefaultConfig</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">isDark:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">isShowLogo:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">isShowTitle:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * 全局配置，将响应式地持久化到 Tampermonkey 中</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">useConfig</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createGlobalState</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">options:</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">useMonkeyStore</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;myOptions&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">DefaultConfig</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者我们创建一个通用的钩子：</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * Tampermonkey 全局存储状态钩子</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">key</span><span style="color:#6A9955;"> 存储键名称</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">defaultValue</span><span style="color:#6A9955;"> 默认值</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">exportName</span><span style="color:#6A9955;"> 导出名称，如果不填则默认为 \`key\`</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@returns</span><span style="color:#6A9955;"> 导出的 \`{ [exportName ?? key]: ref }\`</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">useGlobalState</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">defaultValue</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">exportName</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">symbol</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">createGlobalState</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">[exportName </span><span style="color:#D4D4D4;">??</span><span style="color:#9CDCFE;"> key]:</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">useMonkeyStore</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">defaultValue</span><span style="color:#D4D4D4;">) }</span></span>
<span class="line"><span style="color:#D4D4D4;">  })()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>注意这种响应式只能在同一个网页实现响应式，在不同网页想要实现响应需要，请继续看下面的监听变量的实现。</p><h3 id="32-监听变量" tabindex="-1"><a class="header-anchor" href="#32-监听变量" aria-hidden="true">#</a> 3.2 监听变量</h3><h3 id="33-元素拖拽" tabindex="-1"><a class="header-anchor" href="#33-元素拖拽" aria-hidden="true">#</a> 3.3 元素拖拽</h3><p>如果你希望开发一个可以拖拽的工具包，悬浮于目标网页之上，那么你很可能需要 <code>useDraggable</code> 钩子，它可以让你的元素拖拽起来。</p>`,24),A={href:"https://vueuse.org/",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"@vueuse/core",-1),h={href:"https://vueuse.org/core/useDraggable/",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"useDraggable",-1),f=e(`<div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">x</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">y</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">style</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">useDraggable</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">preventDefault:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">draggingElement:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">unsafeWindow</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">handle</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div>`,1),k=s("li",null,[s("code",null,"target"),n("：被移动的目标元素")],-1),x=s("li",null,[s("code",null,"options.preventDefault"),n("：是否阻止默认事件")],-1),_=s("li",null,[s("code",null,"options.draggingElement"),n("：指定为目标窗口")],-1),B=s("li",null,[s("code",null,"options.handle"),n("：被拖拽的元素，默认为 "),s("code",null,"target")],-1),w={href:"https://vueuse.org/core/useDraggable/",target:"_blank",rel:"noopener noreferrer"},M=e(`<p>需要将 <code>style</code> 绑定到目标元素的 <code>style</code> 属性上，且需要设置 <code>position: absolute</code> 或 <code>position: fixed</code>。</p><p>下面是作者自己实现的 <code>useDraggable</code> 钩子，更简单容易理解，与框架无关。</p><details class="hint-container details"><summary>useDraggable.ts</summary><p>通过调用 <code>destroy()</code> 方法可以销毁事件监听器。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * 支持元素拖拽</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">handleElement</span><span style="color:#6A9955;"> 可拖拽元素</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">targetElement</span><span style="color:#6A9955;"> 被拖拽目标元素，需要 \`position: absolute\` 或 \`position: fixed\`</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">draggingDoc</span><span style="color:#6A9955;"> 事件监听器所在的文档</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">initX</span><span style="color:#6A9955;"> 初始位置 \`x\` (px)</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">initY</span><span style="color:#6A9955;"> 初始位置 \`y\` (px)</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">useDraggable</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">handleElement</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">HTMLElement</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">targetElement</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">HTMLElement</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">draggingDoc</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">Document</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">initX</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">initY</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">offsetX</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">offsetY</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">doc</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">draggingDoc</span><span style="color:#D4D4D4;"> ?? </span><span style="color:#9CDCFE;">globalThis</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">document</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 当鼠标按下时，开始拖拽</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">handleElement</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;mousedown&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">dragStart</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">dragStart</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">MouseEvent</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">preventDefault</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">offsetX</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">clientX</span><span style="color:#D4D4D4;"> - </span><span style="color:#9CDCFE;">targetElement</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">offsetLeft</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">offsetY</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">clientY</span><span style="color:#D4D4D4;"> - </span><span style="color:#9CDCFE;">targetElement</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">offsetTop</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">doc</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;mousemove&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">drag</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">doc</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;mouseup&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">dragEnd</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 拖拽过程中的处理函数</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">drag</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">MouseEvent</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">preventDefault</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">targetElement</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">style</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">\`</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">clientX</span><span style="color:#D4D4D4;"> - </span><span style="color:#9CDCFE;">offsetX</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">px\`</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">targetElement</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">style</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">top</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">\`</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">clientY</span><span style="color:#D4D4D4;"> - </span><span style="color:#9CDCFE;">offsetY</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">px\`</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 拖拽结束时的处理函数</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">dragEnd</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">doc</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">removeEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;mousemove&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">drag</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">doc</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">removeEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;mouseup&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">dragEnd</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 设置初始位置</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">initX</span><span style="color:#D4D4D4;"> !== </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">targetElement</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">style</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">\`</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">initX</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">px\`</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">initY</span><span style="color:#D4D4D4;"> !== </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">targetElement</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">style</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">top</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">\`</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">initY</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">px\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 销毁时移除事件监听器</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">destroy</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">handleElement</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">removeEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;mousedown&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">dragStart</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">destroy</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="34-网络请求" tabindex="-1"><a class="header-anchor" href="#34-网络请求" aria-hidden="true">#</a> 3.4 网络请求</h3><p>如果你需要模拟当前网页的请求，可以直接使用 <code>unsafeWindow.fetch()</code> 方法或者 <code>unsafeWindow.XMLHttpRequest()</code> 对象。</p><p>下面是一个请求示例：</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">MyParams</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">request</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">MyParams</span><span style="color:#D4D4D4;">&gt;(</span><span style="color:#9CDCFE;">params</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Response</span><span style="color:#D4D4D4;">&gt; {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">queryString</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">URLSearchParams</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">unknown</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Record</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">&gt;).</span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">url</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">\`https://example.com/api?</span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">queryString</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">response</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">unsafeWindow</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fetch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">method:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;GET&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">headers:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&#39;Content-Type&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;application/json&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    },</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">credentials:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;include&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">response</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>如果网站的鉴权使用的是 Cookie，要带上 <code>credentials: &#39;include&#39;</code>，才会携带 Cookie 进行请求。如果网站使用的是 Token，可以在请求头中添加 <code>Authorization</code> 字段。</p><p>如果你需要更加强大的请求方式，如发起跨域请求，可以使用 Tampermonkey 提供的 <code>GM_xmlhttpRequest()</code> 方法。</p><p>由于部分 Cookie 是 <code>HttpOnly</code> 的，无法通过 <code>document.cookie</code> 获取。因此使用自定义的 <code>GM_xmlhttpRequest()</code> 并不能模拟当前网页的请求，因为受保护的 Cookie 脚本是无法获取的。</p><h3 id="35-模拟表单输入" tabindex="-1"><a class="header-anchor" href="#35-模拟表单输入" aria-hidden="true">#</a> 3.5 模拟表单输入</h3><p>由于现在许多网站都使用了 React 或 Vue，所以直接设置表单元素的值可能无效，不会被响应式系统接收到，所以我们需要模拟输入。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ReactInputDom</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HTMLInputElement</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">_valueTracker</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">setValue</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">void</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * 模拟输入框操作</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">inputDom</span><span style="color:#6A9955;"> 输入 DOM</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">text</span><span style="color:#6A9955;"> 修改的文本</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">simulateInputValue</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">inputDom</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">HTMLTextAreaElement</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">HTMLInputElement</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">text</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">lastValue</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">inputDom</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">inputDom</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">text</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">event</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Event</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;input&#39;</span><span style="color:#D4D4D4;">, { </span><span style="color:#9CDCFE;">bubbles:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// For React</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">tracker</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">inputDom</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ReactInputDom</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">_valueTracker</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">tracker</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">tracker</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setValue</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">lastValue</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">inputDom</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">dispatchEvent</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * 模拟键盘回车</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">simulateEnter</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">inputDom</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">HTMLTextAreaElement</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">HTMLInputElement</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">event</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">KeyboardEvent</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">KeyboardEvent</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;keydown&#39;</span><span style="color:#D4D4D4;">, {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">bubbles:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">cancelable:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">key:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;Enter&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">code:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;Enter&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">charCode:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">13</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">keyCode:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">13</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">inputDom</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">dispatchEvent</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="36-拦截请求" tabindex="-1"><a class="header-anchor" href="#36-拦截请求" aria-hidden="true">#</a> 3.6 拦截请求</h3><p>一般拦截请求都是靠重写 <code>XMLHttpRequest</code> 对象和 <code>fetch</code> 方法来实现的，所以这种方法只能拦截 Ajax 请求，不能拦截 <code>document</code> / <code>script</code> / <code>ws</code> 等请求。</p><p>如果需要拦截复杂的请求需要重写更复杂的对象。例如拦截 JSONP 请求，需要知道当前网页是如何创建 <code>&lt;script&gt;</code> 元素的。</p><p>在拦截之前，我们希望我们的脚本尽可能早地执行，因此我们需要配置 <code>@run-at</code> 为 <code>document-start</code>，这样我们的脚本会在 <code>DOMContentLoaded</code> 之前执行。</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// vite.config.ts</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">defineConfig</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">plugins:</span><span style="color:#D4D4D4;"> [</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">monkey</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">userscript:</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#CE9178;">&#39;run-at&#39;</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;document-start&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">      },</span></span>
<span class="line"><span style="color:#D4D4D4;">    }),</span></span>
<span class="line"><span style="color:#D4D4D4;">  ],</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><p>下面我们重写 <code>fetch</code> 方法：</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">originFetch</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">fetch</span></span>
<span class="line"><span style="color:#9CDCFE;">unsafeWindow</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fetch</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">originFetch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">match</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#D7BA7D;">\\/</span><span style="color:#D16969;">api</span><span style="color:#D7BA7D;">\\/</span><span style="color:#D16969;">test/</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">responseClone</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">clone</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">responseClone</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">json</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#6A9955;">// 此处可以修改数据</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;...&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">responseNew</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Response</span><span style="color:#D4D4D4;">(</span><span style="color:#4FC1FF;">JSON</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">stringify</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">), </span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">responseNew</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">​</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>总之，重写请求方法可以完成取消请求、拦截请求、修改数据、修改结果等任何操作。</p><p>重写 <code>XMLHttpRequest</code> 对象也是类似的，但是更加复杂，还好我们可以借助第三方库来实现。</p>`,22),T={href:"https://github.com/wendux/ajax-hook",target:"_blank",rel:"noopener noreferrer"},V=s("code",null,"ajax-hook",-1),S=s("code",null,"XMLHttpRequest",-1),R=s("code",null,"ajax-hook",-1),L=e(`<div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pnpm</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">add</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-D</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ajax-hook</span></span>
<span class="line"></span></code></pre></div><p>示例代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">proxy</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;ajax-hook&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">proxy</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">//请求发起前进入</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">onRequest</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">config</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">handler</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">config</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">handler</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">config</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">//请求发生错误时进入，比如超时</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 注意，不包括 HTTP 状态码错误，如 404、500</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">onError</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">handler</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">handler</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">//请求成功后进入</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">onResponse</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">handler</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">handler</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外也可以使用更高级的 <code>hook()</code> 函数来拦截各个请求阶段的回调。</p><div class="language-typescript" data-ext="ts"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">hook</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 参数 \`xhr\` 为原生 XHR 对象</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">onload</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">xhr</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// this 为代理 XHR 对象</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 原生 XHR 对象扩展了一个 \`getProxy()\` 方法，调用它可以获取代理 XHR 对象</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// this === xhr.getProxy()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 可以通过代理 XHR 对象的 \`xhr\` 属性获取原生 XHR 对象</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// this.xhr === xhr</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;onload called&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">false</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div>`,5);function G(N,H){const l=D("router-link"),o=D("ExternalLinkIcon");return t(),r("div",null,[i,s("nav",C,[s("ul",null,[s("li",null,[a(l,{to:"#1-介绍"},{default:p(()=>[n("1. 介绍")]),_:1})]),s("li",null,[a(l,{to:"#2-使用"},{default:p(()=>[n("2. 使用")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#21-配置"},{default:p(()=>[n("2.1 配置")]),_:1})]),s("li",null,[a(l,{to:"#22-cdn-引入"},{default:p(()=>[n("2.2 CDN 引入")]),_:1})]),s("li",null,[a(l,{to:"#23-代码压缩"},{default:p(()=>[n("2.3 代码压缩")]),_:1})]),s("li",null,[a(l,{to:"#24-自动导入"},{default:p(()=>[n("2.4 自动导入")]),_:1})])])]),s("li",null,[a(l,{to:"#3-常见功能实现"},{default:p(()=>[n("3. 常见功能实现")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#31-全局存储"},{default:p(()=>[n("3.1 全局存储")]),_:1})]),s("li",null,[a(l,{to:"#32-监听变量"},{default:p(()=>[n("3.2 监听变量")]),_:1})]),s("li",null,[a(l,{to:"#33-元素拖拽"},{default:p(()=>[n("3.3 元素拖拽")]),_:1})]),s("li",null,[a(l,{to:"#34-网络请求"},{default:p(()=>[n("3.4 网络请求")]),_:1})]),s("li",null,[a(l,{to:"#35-模拟表单输入"},{default:p(()=>[n("3.5 模拟表单输入")]),_:1})]),s("li",null,[a(l,{to:"#36-拦截请求"},{default:p(()=>[n("3.6 拦截请求")]),_:1})])])])])]),d,u,s("p",null,[n("参见 "),s("a",E,[n("中文文档"),a(o)]),n(" 了解更多。")]),v,s("p",null,[n("默认情况下代码不会压缩，这是考虑到 Greasy Fork 的 "),s("a",m,[n("代码规则"),a(o)]),n("：提交到 Greasy Fork 的代码不得混淆或最小化。如果你不打算提交到 Greasy Fork 等平台，可以开启打码压缩：")]),F,s("p",null,[n("推荐使用 "),s("a",A,[b,a(o)]),n(" 中的 "),s("a",h,[g,a(o)]),n(" 钩子，它可以让你的元素拖拽起来。")]),f,s("ul",null,[k,x,_,B,s("li",null,[n("其他参数参见 "),s("a",w,[n("useDraggable"),a(o)]),n(" 文档")])]),M,s("p",null,[s("a",T,[V,a(o)]),n(" 是一个可以拦截 "),S,n(" 对象的库，兼容 ES5 与 ES6。下面安装 "),R,n("：")]),L])}const j=c(y,[["render",G],["__file","vite-plugin-monkey.html.vue"]]);export{j as default};
