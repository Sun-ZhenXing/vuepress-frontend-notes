import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as u,b as n,a,w as p,e as s,d as o}from"./app-C-lF8Tfs.js";const r={},k=n("h1",{id:"websocket",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#websocket"},[n("span",null,"WebSocket")])],-1),d={class:"table-of-contents"},v=o('<h2 id="1-websocket-简介" tabindex="-1"><a class="header-anchor" href="#1-websocket-简介"><span>1. WebSocket 简介</span></a></h2><p>本文参考地址在页面最下方。<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p>',2),b={href:"https://websocket.org/",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,[s("这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用 "),n("em",null,"轮询"),s("：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。")],-1),g=n("p",null,"轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开），我们在这种场景下使用 WebSocket 可以显著提升性能。",-1),h=n("p",null,"WebSocket 协议在 2008 年诞生，2011 年成为国际标准。所有浏览器都已经支持了。",-1),w={href:"https://en.wikipedia.org/wiki/Push_technology",target:"_blank",rel:"noopener noreferrer"},f=o(`<p>其他特点包括：</p><ol><li>建立在 TCP 协议之上，服务器端的实现比较容易</li><li>与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器</li><li>数据格式比较轻量，性能开销小，通信高效</li><li>可以发送文本，也可以发送二进制数据</li><li>没有同源限制，客户端可以与任意服务器通信</li><li>协议标识符是 <code>ws</code>（如果加密，则为 <code>wss</code>），服务器网址就是 URL</li></ol><p>例如 <code>ws://example.com/some/path</code> 就是 WebSocket 的一个地址。</p><p>WebSocket 连接也是由一个标准的 HTTP 请求发起，格式如下：</p><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>GET ws<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3000/ws/chat HTTP/1.1
<span class="token key atrule">Host</span><span class="token punctuation">:</span> localhost
<span class="token key atrule">Upgrade</span><span class="token punctuation">:</span> websocket
<span class="token key atrule">Connection</span><span class="token punctuation">:</span> Upgrade
<span class="token key atrule">Origin</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3000</span>
<span class="token key atrule">Sec-WebSocket-Key</span><span class="token punctuation">:</span> client<span class="token punctuation">-</span>random<span class="token punctuation">-</span>string
<span class="token key atrule">Sec-WebSocket-Version</span><span class="token punctuation">:</span> <span class="token number">13</span>
</code></pre></div><p>支持 Websocket 的服务器在收到请求后会返回一个响应，格式如下：</p><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>HTTP/1.1 101 Switching Protocols
<span class="token key atrule">Upgrade</span><span class="token punctuation">:</span> websocket
<span class="token key atrule">Connection</span><span class="token punctuation">:</span> Upgrade
<span class="token key atrule">Sec-WebSocket-Accept</span><span class="token punctuation">:</span> server<span class="token punctuation">-</span>random<span class="token punctuation">-</span>string
</code></pre></div><h2 id="2-客户端的简单示例" tabindex="-1"><a class="header-anchor" href="#2-客户端的简单示例"><span>2. 客户端的简单示例</span></a></h2>`,8),_={href:"http://jsbin.com/muqamiqimu/edit?js,console",target:"_blank",rel:"noopener noreferrer"},y=o(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;wss://echo.websocket.org&#39;</span><span class="token punctuation">)</span>

ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connection open ...&#39;</span><span class="token punctuation">)</span>
  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello WebSockets!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Received Message:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
  ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connection closed.&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="3-客户端的-api" tabindex="-1"><a class="header-anchor" href="#3-客户端的-api"><span>3. 客户端的 API</span></a></h2><h3 id="31-websocket-构造函数" tabindex="-1"><a class="header-anchor" href="#31-websocket-构造函数"><span>3.1 <code>WebSocket</code> 构造函数</span></a></h3>`,3),S={href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"WebSocket",-1),W=n("code",null,"WebSocket",-1),x=o(`<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:8080&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>执行上面语句之后，客户端就会与服务器进行连接。</p>`,2),T={href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"WebSocket",-1),P=o(`<h3 id="32-wsreadystate" tabindex="-1"><a class="header-anchor" href="#32-wsreadystate"><span>3.2 <code>ws.readyState</code></span></a></h3><p><code>readyState</code> 属性返回实例对象的当前状态，共有四种：</p><ul><li><code>CONNECTING</code>：值为 0，表示正在连接</li><li><code>OPEN</code>：值为 1，表示连接成功，可以通信了</li><li><code>CLOSING</code>：值为 2，表示连接正在关闭</li><li><code>CLOSED</code>：值为 3，表示连接已经关闭，或者打开连接失败</li></ul><p>下面是一个示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>ws<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> WebSocket<span class="token punctuation">.</span><span class="token constant">CONNECTING</span><span class="token operator">:</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">break</span>
  <span class="token keyword">case</span> WebSocket<span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token operator">:</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">break</span>
  <span class="token keyword">case</span> WebSocket<span class="token punctuation">.</span><span class="token constant">CLOSING</span><span class="token operator">:</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">break</span>
  <span class="token keyword">case</span> WebSocket<span class="token punctuation">.</span><span class="token constant">CLOSED</span><span class="token operator">:</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">break</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token comment">// 不可能执行到这里</span>
    <span class="token keyword">break</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="33-wsonopen" tabindex="-1"><a class="header-anchor" href="#33-wsonopen"><span>3.3 <code>ws.onopen</code></span></a></h3><p>实例对象的 <code>onopen</code> 属性，用于指定连接成功后的回调函数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello Server!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果要指定多个回调函数，可以使用 <code>addEventListener</code> 方法。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello Server!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="34-wsonclose" tabindex="-1"><a class="header-anchor" href="#34-wsonclose"><span>3.4 <code>ws.onclose</code></span></a></h3><p>实例对象的 <code>onclose</code> 属性，用于指定连接关闭后的回调函数。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> code <span class="token operator">=</span> event<span class="token punctuation">.</span>code
  <span class="token keyword">const</span> reason <span class="token operator">=</span> event<span class="token punctuation">.</span>reason
  <span class="token keyword">const</span> wasClean <span class="token operator">=</span> event<span class="token punctuation">.</span>wasClean
  <span class="token comment">// 处理关闭连接事件</span>
<span class="token punctuation">}</span>

ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> code <span class="token operator">=</span> event<span class="token punctuation">.</span>code
  <span class="token keyword">const</span> reason <span class="token operator">=</span> event<span class="token punctuation">.</span>reason
  <span class="token keyword">const</span> wasClean <span class="token operator">=</span> event<span class="token punctuation">.</span>wasClean
  <span class="token comment">// 处理关闭连接事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="35-wsonmessage" tabindex="-1"><a class="header-anchor" href="#35-wsonmessage"><span>3.5 <code>ws.onmessage</code></span></a></h3><p>实例对象的 <code>onmessage</code> 属性，用于指定收到服务器数据后的回调函数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token comment">// 处理数据</span>
<span class="token punctuation">}</span>

ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data
  <span class="token comment">// 处理数据</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>注意，服务器数据可能是文本，也可能是二进制数据（<code>blob</code> 对象或 <code>Arraybuffer</code> 对象）。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> event<span class="token punctuation">.</span>data <span class="token operator">===</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Received data string&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>data <span class="token keyword">instanceof</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> buffer <span class="token operator">=</span> event<span class="token punctuation">.</span>data
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Received arraybuffer&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了动态判断收到的数据类型，也可以使用 <code>binaryType</code> 属性，显式指定收到的二进制数据类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 收到的是 blob 数据</span>
ws<span class="token punctuation">.</span>binaryType <span class="token operator">=</span> <span class="token string">&#39;blob&#39;</span>
ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>size<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 收到的是 ArrayBuffer 数据</span>
ws<span class="token punctuation">.</span>binaryType <span class="token operator">=</span> <span class="token string">&#39;arraybuffer&#39;</span>
ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="36-wssend" tabindex="-1"><a class="header-anchor" href="#36-wssend"><span>3.6 <code>ws.send()</code></span></a></h3><p>实例对象的 <code>send()</code> 方法用于向服务器发送数据。</p><p>发送文本的例子：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;your message&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>发送 <code>Blob</code> 对象的例子：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> file <span class="token operator">=</span> document
  <span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input[type=&quot;file&quot;]&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
</code></pre></div><p>发送 <code>ArrayBuffer</code> 对象的例子：</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 发送 canvas ImageData，数据类型 ArrayBuffer</span>
<span class="token keyword">const</span> img <span class="token operator">=</span> canvas_context<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> binary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> img<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  binary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> img<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>binary<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span>
</code></pre></div><h3 id="37-wsbufferedamount" tabindex="-1"><a class="header-anchor" href="#37-wsbufferedamount"><span>3.7 <code>ws.bufferedAmount</code></span></a></h3><p>实例对象的 <code>bufferedAmount</code> 属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>bufferedAmount <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 发送完毕</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 发送还没结束</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="38-wsonerror" tabindex="-1"><a class="header-anchor" href="#38-wsonerror"><span>3.8 <code>ws.onerror</code></span></a></h3><p>实例对象的 <code>onerror</code> 属性，用于指定报错时的回调函数。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理错误</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理错误</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="4-websocket-服务器" tabindex="-1"><a class="header-anchor" href="#4-websocket-服务器"><span>4. WebSocket 服务器</span></a></h2><p>WebSocket 协议需要服务器支持。各种服务器的实现，可以查看维基百科的列表。</p><p>常用的 Node 实现有以下三种：</p>`,37),C={href:"https://github.com/uWebSockets/uWebSockets",target:"_blank",rel:"noopener noreferrer"},E={href:"http://socket.io/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/theturtle32/WebSocket-Node",target:"_blank",rel:"noopener noreferrer"},H=n("h2",{id:"5-unix-风格的-websocket-服务器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#5-unix-风格的-websocket-服务器"},[n("span",null,"5. Unix 风格的 WebSocket 服务器")])],-1),I={href:"http://websocketd.com/",target:"_blank",rel:"noopener noreferrer"},q=o(`<p>举例来说，下面是一个 Bash 脚本 <code>counter.sh</code>：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token builtin class-name">echo</span> <span class="token number">1</span>
<span class="token function">sleep</span> <span class="token number">1</span>

<span class="token builtin class-name">echo</span> <span class="token number">2</span>
<span class="token function">sleep</span> <span class="token number">1</span>

<span class="token builtin class-name">echo</span> <span class="token number">3</span>
</code></pre></div><p>命令行下运行这个脚本，会输出 <code>1</code>、<code>2</code>、<code>3</code>，每个值之间间隔 1 秒。</p><p>现在，启动 <code>websocketd</code>，指定这个脚本作为服务：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>websocketd <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">8080</span> <span class="token function">bash</span> ./counter.sh
</code></pre></div><p>上面的命令会启动一个 WebSocket 服务器，端口是 8080。每当客户端连接这个服务器，就会执行 <code>counter.sh</code> 脚本，并将它的输出推送给客户端。</p><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:8080/&#39;</span><span class="token punctuation">)</span>

ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上面是客户端的 JavaScript 代码，运行之后会在控制台依次输出 <code>1</code>、<code>2</code>、<code>3</code>。</p><p>有了它，就可以很方便地将命令行的输出，发给浏览器：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>websocketd <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">8080</span> <span class="token function">ls</span>
</code></pre></div><p>上面的命令会执行 <code>ls</code> 命令，从而将当前目录的内容，发给浏览器。使用这种方式实时监控服务器，简直是轻而易举。</p>`,11),L={class:"hint-container info"},O=n("p",{class:"hint-container-title"},"有关项目",-1),B={href:"https://github.com/joewalnes/web-vmstats",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/joewalnes/websocketd/tree/master/examples/bash",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/joewalnes/websocketd/blob/master/examples/bash/greeter.sh",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/joewalnes/websocketd/blob/master/examples/bash/chat.sh",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"websocketd",-1),V={href:"https://github.com/joewalnes/websocketd/blob/master/examples/nodejs/greeter.js",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"greeter.js",-1),Z=o(`<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>

process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;readable&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> chunk <span class="token operator">=</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;data: &#39;</span> <span class="token operator">+</span> chunk<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>启动这个脚本的命令如下：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>websocketd <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">8080</span> <span class="token function">node</span> ./greeter.js
</code></pre></div>`,3),J={href:"https://github.com/joewalnes/websocketd/tree/master/examples",target:"_blank",rel:"noopener noreferrer"},M=o(`<h2 id="6-node-的-websocket-协议" tabindex="-1"><a class="header-anchor" href="#6-node-的-websocket-协议"><span>6. Node 的 WebSocket 协议</span></a></h2><p>安装 WebSocket 包：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i ws
</code></pre></div><p>服务端：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// server.js</span>
<span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> WebSocketServer <span class="token operator">=</span> WebSocket<span class="token punctuation">.</span>Server

<span class="token comment">// 创建 websocket 服务器 监听在 3000 端口</span>
<span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 每隔 1 秒给连接方报一次数</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// client.js</span>
<span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:3000&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 接受</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
  <span class="token comment">// 当数字达到 10 时，断开连接</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">)</span>
    ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>功能扩充：我们让双方一来一回通信，下面是服务端代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// server.js</span>
<span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> WebSocketServer <span class="token operator">=</span> WebSocket<span class="token punctuation">.</span>Server

<span class="token comment">// 创建 websocket 服务器 监听在 3000 端口</span>
<span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 服务器被客户端连接</span>
wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 接收客户端信息并把信息返回发送</span>
    ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[SERVER] error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// client.js</span>
<span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:3000&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 发送</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 接受</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器：上面的 WebSocket 客户端，是基于 Node.js 构建的，通常 WebSocket 的应用场景，更多时候面对的客户端是浏览器，我们下面来一个 JavaScript 版本的 <code>client.js</code>：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>WebSocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 浏览器提供 WebSocket 对象</span>
    <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:3000&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// 发送</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 接收</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">mes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>mes<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>mes<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="7-附录" tabindex="-1"><a class="header-anchor" href="#7-附录"><span>7. 附录</span></a></h2>`,14),K={class:"hint-container info"},X=n("p",{class:"hint-container-title"},"推荐学习",-1),Y={href:"https://www.liaoxuefeng.com/wiki/1022910821149312/1103303693824096",target:"_blank",rel:"noopener noreferrer"},$=n("hr",{class:"footnotes-sep"},null,-1),F={class:"footnotes"},Q={class:"footnotes-list"},nn={id:"footnote1",class:"footnote-item"},sn={href:"https://www.ruanyifeng.com/blog/2017/05/websocket.html",target:"_blank",rel:"noopener noreferrer"},an=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),en={id:"footnote2",class:"footnote-item"},tn={href:"https://www.jmjc.tech/less/114",target:"_blank",rel:"noopener noreferrer"},pn=n("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1);function on(cn,ln){const t=c("router-link"),e=c("ExternalLinkIcon");return i(),u("div",null,[k,n("nav",d,[n("ul",null,[n("li",null,[a(t,{to:"#1-websocket-简介"},{default:p(()=>[s("1. WebSocket 简介")]),_:1})]),n("li",null,[a(t,{to:"#2-客户端的简单示例"},{default:p(()=>[s("2. 客户端的简单示例")]),_:1})]),n("li",null,[a(t,{to:"#3-客户端的-api"},{default:p(()=>[s("3. 客户端的 API")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#31-websocket-构造函数"},{default:p(()=>[s("3.1 WebSocket 构造函数")]),_:1})]),n("li",null,[a(t,{to:"#32-wsreadystate"},{default:p(()=>[s("3.2 ws.readyState")]),_:1})]),n("li",null,[a(t,{to:"#33-wsonopen"},{default:p(()=>[s("3.3 ws.onopen")]),_:1})]),n("li",null,[a(t,{to:"#34-wsonclose"},{default:p(()=>[s("3.4 ws.onclose")]),_:1})]),n("li",null,[a(t,{to:"#35-wsonmessage"},{default:p(()=>[s("3.5 ws.onmessage")]),_:1})]),n("li",null,[a(t,{to:"#36-wssend"},{default:p(()=>[s("3.6 ws.send()")]),_:1})]),n("li",null,[a(t,{to:"#37-wsbufferedamount"},{default:p(()=>[s("3.7 ws.bufferedAmount")]),_:1})]),n("li",null,[a(t,{to:"#38-wsonerror"},{default:p(()=>[s("3.8 ws.onerror")]),_:1})])])]),n("li",null,[a(t,{to:"#4-websocket-服务器"},{default:p(()=>[s("4. WebSocket 服务器")]),_:1})]),n("li",null,[a(t,{to:"#5-unix-风格的-websocket-服务器"},{default:p(()=>[s("5. Unix 风格的 WebSocket 服务器")]),_:1})]),n("li",null,[a(t,{to:"#6-node-的-websocket-协议"},{default:p(()=>[s("6. Node 的 WebSocket 协议")]),_:1})]),n("li",null,[a(t,{to:"#7-附录"},{default:p(()=>[s("7. 附录")]),_:1})])])]),v,n("p",null,[n("a",b,[s("WebSocket"),a(e)]),s(" 是一种网络通信协议，由于 HTTP 不支持服务端主动推送，WebSocket 就是为了解决这个问题诞生的。")]),m,g,h,n("p",null,[s("它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于 "),n("a",w,[s("服务器推送技术"),a(e)]),s(" 的一种。")]),f,n("p",null,[s("下面是一个网页脚本的例子，"),n("a",_,[s("在线示例"),a(e)]),s("：")]),y,n("p",null,[n("a",S,[j,a(e)]),s(" 对象作为一个构造函数，用于新建 "),W,s(" 实例。")]),x,n("p",null,[s("实例对象的所有属性和方法清单，参见 "),n("a",T,[N,a(e)]),s("。")]),P,n("ul",null,[n("li",null,[n("a",C,[s("µWebSockets"),a(e)])]),n("li",null,[n("a",E,[s("Socket.IO"),a(e)])]),n("li",null,[n("a",A,[s("WebSocket-Node"),a(e)])])]),H,n("p",null,[n("a",I,[s("Websocketd"),a(e)]),s(" 的最大特点，就是后台脚本不限语言，标准输入（stdin）就是 WebSocket 的输入，标准输出（stdout）就是 WebSocket 的输出。")]),q,n("div",L,[O,n("p",null,[n("a",B,[s("joewalnes/web-vmstats"),a(e)]),s(" 监视服务器运行项目。")])]),n("p",null,[s("更多的用法可以参考 "),n("a",U,[s("官方示例"),a(e)]),s("：")]),n("ul",null,[n("li",null,[n("a",D,[s("Bash 脚本读取客户端输入的例子"),a(e)])]),n("li",null,[n("a",R,[s("五行代码实现一个最简单的聊天服务器"),a(e)])])]),n("p",null,[z,s(" 的实质，就是命令行的 WebSocket 代理。只要命令行可以执行的程序，都可以通过它与浏览器进行 WebSocket 通信。下面是一个 Node 实现的 Echo 服务 "),n("a",V,[G,a(e)]),s("：")]),Z,n("p",null,[s("官方仓库还有 "),n("a",J,[s("其他各种语言的例子"),a(e)]),s("。")]),M,n("div",K,[X,n("p",null,[s("廖雪峰的官方网站："),n("a",Y,[s("WebSocket 教程"),a(e)]),s("。")])]),$,n("section",F,[n("ol",Q,[n("li",nn,[n("p",null,[s("阮一峰的网络日志，"),n("a",sn,[s("https://www.ruanyifeng.com/blog/2017/05/websocket.html"),a(e)]),s(),an])]),n("li",en,[n("p",null,[s("简明教程：Node.js WebSocket 协议，"),n("a",tn,[s("https://www.jmjc.tech/less/114"),a(e)]),s(),pn])])])])])}const kn=l(r,[["render",on],["__file","websocket.html.vue"]]),dn=JSON.parse('{"path":"/notebook/js/websocket.html","title":"WebSocket","lang":"zh-CN","frontmatter":{"description":"WebSocket 1. WebSocket 简介 本文参考地址在页面最下方。[1][2] WebSocket 是一种网络通信协议，由于 HTTP 不支持服务端主动推送，WebSocket 就是为了解决这个问题诞生的。 这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用 轮询：每隔一段时候，就发出一个询问，了解服...","head":[["meta",{"property":"og:url","content":"https://blog.alexsun.top/vuepress-frontend-notes/vuepress-frontend-notes/notebook/js/websocket.html"}],["meta",{"property":"og:site_name","content":"前端笔记"}],["meta",{"property":"og:title","content":"WebSocket"}],["meta",{"property":"og:description","content":"WebSocket 1. WebSocket 简介 本文参考地址在页面最下方。[1][2] WebSocket 是一种网络通信协议，由于 HTTP 不支持服务端主动推送，WebSocket 就是为了解决这个问题诞生的。 这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用 轮询：每隔一段时候，就发出一个询问，了解服..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-04T11:44:04.000Z"}],["meta",{"property":"article:author","content":"鸭梨"}],["meta",{"property":"article:modified_time","content":"2024-05-04T11:44:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebSocket\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-04T11:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鸭梨\\",\\"url\\":\\"https://blog.alexsun.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. WebSocket 简介","slug":"1-websocket-简介","link":"#1-websocket-简介","children":[]},{"level":2,"title":"2. 客户端的简单示例","slug":"2-客户端的简单示例","link":"#2-客户端的简单示例","children":[]},{"level":2,"title":"3. 客户端的 API","slug":"3-客户端的-api","link":"#3-客户端的-api","children":[{"level":3,"title":"3.1 WebSocket 构造函数","slug":"31-websocket-构造函数","link":"#31-websocket-构造函数","children":[]},{"level":3,"title":"3.2 ws.readyState","slug":"32-wsreadystate","link":"#32-wsreadystate","children":[]},{"level":3,"title":"3.3 ws.onopen","slug":"33-wsonopen","link":"#33-wsonopen","children":[]},{"level":3,"title":"3.4 ws.onclose","slug":"34-wsonclose","link":"#34-wsonclose","children":[]},{"level":3,"title":"3.5 ws.onmessage","slug":"35-wsonmessage","link":"#35-wsonmessage","children":[]},{"level":3,"title":"3.6 ws.send()","slug":"36-wssend","link":"#36-wssend","children":[]},{"level":3,"title":"3.7 ws.bufferedAmount","slug":"37-wsbufferedamount","link":"#37-wsbufferedamount","children":[]},{"level":3,"title":"3.8 ws.onerror","slug":"38-wsonerror","link":"#38-wsonerror","children":[]}]},{"level":2,"title":"4. WebSocket 服务器","slug":"4-websocket-服务器","link":"#4-websocket-服务器","children":[]},{"level":2,"title":"5. Unix 风格的 WebSocket 服务器","slug":"5-unix-风格的-websocket-服务器","link":"#5-unix-风格的-websocket-服务器","children":[]},{"level":2,"title":"6. Node 的 WebSocket 协议","slug":"6-node-的-websocket-协议","link":"#6-node-的-websocket-协议","children":[]},{"level":2,"title":"7. 附录","slug":"7-附录","link":"#7-附录","children":[]}],"git":{"createdTime":1678754046000,"updatedTime":1714823044000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":7.21,"words":2162},"filePathRelative":"notebook/js/websocket.md","localizedDate":"2023年3月14日","autoDesc":true}');export{kn as comp,dn as data};
