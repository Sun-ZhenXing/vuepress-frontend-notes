import{_ as D,r as c,o as t,c as r,d as s,b as a,w as o,e as n,f as p}from"./app-72961842.js";const i={},y=s("h1",{id:"websocket",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#websocket","aria-hidden":"true"},"#"),n(" WebSocket")],-1),d={class:"table-of-contents"},C=p('<h2 id="_1-websocket-简介" tabindex="-1"><a class="header-anchor" href="#_1-websocket-简介" aria-hidden="true">#</a> 1. WebSocket 简介</h2><p>本文参考地址在页面最下方。<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p>',2),v={href:"https://websocket.org/",target:"_blank",rel:"noopener noreferrer"},b=s("p",null,[n("这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用 "),s("em",null,"轮询"),n("：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。")],-1),u=s("p",null,"轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开），我们在这种场景下使用 WebSocket 可以显著提升性能。",-1),E=s("p",null,"WebSocket 协议在 2008 年诞生，2011 年成为国际标准。所有浏览器都已经支持了。",-1),h={href:"https://en.wikipedia.org/wiki/Push_technology",target:"_blank",rel:"noopener noreferrer"},m=p(`<p>其他特点包括：</p><ol><li>建立在 TCP 协议之上，服务器端的实现比较容易</li><li>与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器</li><li>数据格式比较轻量，性能开销小，通信高效</li><li>可以发送文本，也可以发送二进制数据</li><li>没有同源限制，客户端可以与任意服务器通信</li><li>协议标识符是 <code>ws</code>（如果加密，则为 <code>wss</code>），服务器网址就是 URL</li></ol><p>例如 <code>ws://example.com/some/path</code> 就是 WebSocket 的一个地址。</p><p>WebSocket 连接也是由一个标准的 HTTP 请求发起，格式如下：</p><div class="language-yaml" data-ext="yml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#CE9178;">GET ws://localhost:3000/ws/chat HTTP/1.1</span></span>
<span class="line"><span style="color:#569CD6;">Host</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">localhost</span></span>
<span class="line"><span style="color:#569CD6;">Upgrade</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">websocket</span></span>
<span class="line"><span style="color:#569CD6;">Connection</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">Upgrade</span></span>
<span class="line"><span style="color:#569CD6;">Origin</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">http://localhost:3000</span></span>
<span class="line"><span style="color:#569CD6;">Sec-WebSocket-Key</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">client-random-string</span></span>
<span class="line"><span style="color:#569CD6;">Sec-WebSocket-Version</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">13</span></span>
<span class="line"></span></code></pre></div><p>支持 Websocket 的服务器在收到请求后会返回一个响应，格式如下：</p><div class="language-yaml" data-ext="yml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#CE9178;">HTTP/1.1 101 Switching Protocols</span></span>
<span class="line"><span style="color:#569CD6;">Upgrade</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">websocket</span></span>
<span class="line"><span style="color:#569CD6;">Connection</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">Upgrade</span></span>
<span class="line"><span style="color:#569CD6;">Sec-WebSocket-Accept</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">server-random-string</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-客户端的简单示例" tabindex="-1"><a class="header-anchor" href="#_2-客户端的简单示例" aria-hidden="true">#</a> 2. 客户端的简单示例</h2>`,8),F={href:"http://jsbin.com/muqamiqimu/edit?js,console",target:"_blank",rel:"noopener noreferrer"},k=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">ws</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">WebSocket</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;wss://echo.websocket.org&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onopen</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Connection open ...&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Hello WebSockets!&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onmessage</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Received Message:&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onclose</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Connection closed.&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-客户端的-api" tabindex="-1"><a class="header-anchor" href="#_3-客户端的-api" aria-hidden="true">#</a> 3. 客户端的 API</h2><h3 id="_3-1-websocket-构造函数" tabindex="-1"><a class="header-anchor" href="#_3-1-websocket-构造函数" aria-hidden="true">#</a> 3.1 <code>WebSocket</code> 构造函数</h3>`,3),A={href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"WebSocket",-1),_=s("code",null,"WebSocket",-1),w=p(`<div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">ws</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">WebSocket</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ws://localhost:8080&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p>执行上面语句之后，客户端就会与服务器进行连接。</p>`,2),f={href:"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket",target:"_blank",rel:"noopener noreferrer"},x=s("code",null,"WebSocket",-1),S=p(`<h3 id="_3-2-ws-readystate" tabindex="-1"><a class="header-anchor" href="#_3-2-ws-readystate" aria-hidden="true">#</a> 3.2 <code>ws.readyState</code></h3><p><code>readyState</code> 属性返回实例对象的当前状态，共有四种：</p><ul><li><code>CONNECTING</code>：值为 0，表示正在连接</li><li><code>OPEN</code>：值为 1，表示连接成功，可以通信了</li><li><code>CLOSING</code>：值为 2，表示连接正在关闭</li><li><code>CLOSED</code>：值为 3，表示连接已经关闭，或者打开连接失败</li></ul><p>下面是一个示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">switch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">readyState</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">WebSocket</span><span style="color:#D4D4D4;">.</span><span style="color:#4FC1FF;">CONNECTING</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">break</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">WebSocket</span><span style="color:#D4D4D4;">.</span><span style="color:#4FC1FF;">OPEN</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">break</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">WebSocket</span><span style="color:#D4D4D4;">.</span><span style="color:#4FC1FF;">CLOSING</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">break</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">WebSocket</span><span style="color:#D4D4D4;">.</span><span style="color:#4FC1FF;">CLOSED</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// ...</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">break</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 不可能执行到这里</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">break</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-ws-onopen" tabindex="-1"><a class="header-anchor" href="#_3-3-ws-onopen" aria-hidden="true">#</a> 3.3 <code>ws.onopen</code></h3><p>实例对象的 <code>onopen</code> 属性，用于指定连接成功后的回调函数。</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onopen</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Hello Server!&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>如果要指定多个回调函数，可以使用 <code>addEventListener</code> 方法。</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;open&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Hello Server!&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-4-ws-onclose" tabindex="-1"><a class="header-anchor" href="#_3-4-ws-onclose" aria-hidden="true">#</a> 3.4 <code>ws.onclose</code></h3><p>实例对象的 <code>onclose</code> 属性，用于指定连接关闭后的回调函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onclose</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">code</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">code</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">reason</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">reason</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">wasClean</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">wasClean</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 处理关闭连接事件</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;close&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">code</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">code</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">reason</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">reason</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">wasClean</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">wasClean</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 处理关闭连接事件</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-ws-onmessage" tabindex="-1"><a class="header-anchor" href="#_3-5-ws-onmessage" aria-hidden="true">#</a> 3.5 <code>ws.onmessage</code></h3><p>实例对象的 <code>onmessage</code> 属性，用于指定收到服务器数据后的回调函数。</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onmessage</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">data</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 处理数据</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;message&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">data</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 处理数据</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><p>注意，服务器数据可能是文本，也可能是二进制数据（<code>blob</code> 对象或 <code>Arraybuffer</code> 对象）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onmessage</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">String</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Received data string&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ArrayBuffer</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">buffer</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Received arraybuffer&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了动态判断收到的数据类型，也可以使用 <code>binaryType</code> 属性，显式指定收到的二进制数据类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// 收到的是 blob 数据</span></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">binaryType</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;blob&#39;</span></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onmessage</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">size</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 收到的是 ArrayBuffer 数据</span></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">binaryType</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;arraybuffer&#39;</span></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onmessage</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">byteLength</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-ws-send" tabindex="-1"><a class="header-anchor" href="#_3-6-ws-send" aria-hidden="true">#</a> 3.6 <code>ws.send()</code></h3><p>实例对象的 <code>send()</code> 方法用于向服务器发送数据。</p><p>发送文本的例子：</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;your message&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p>发送 <code>Blob</code> 对象的例子：</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">file</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">document</span></span>
<span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#DCDCAA;">querySelector</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;input[type=&quot;file&quot;]&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#9CDCFE;">files</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">file</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p>发送 <code>ArrayBuffer</code> 对象的例子：</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// 发送 canvas ImageData，数据类型 ArrayBuffer</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">img</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">canvas_context</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getImageData</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">400</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">320</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">binary</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Uint8Array</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">img</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">img</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; ++</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">binary</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">img</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">binary</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">buffer</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-7-ws-bufferedamount" tabindex="-1"><a class="header-anchor" href="#_3-7-ws-bufferedamount" aria-hidden="true">#</a> 3.7 <code>ws.bufferedAmount</code></h3><p>实例对象的 <code>bufferedAmount</code> 属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">data</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ArrayBuffer</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10000000</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">socket</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">bufferedAmount</span><span style="color:#D4D4D4;"> === </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 发送完毕</span></span>
<span class="line"><span style="color:#D4D4D4;">} </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 发送还没结束</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-8-ws-onerror" tabindex="-1"><a class="header-anchor" href="#_3-8-ws-onerror" aria-hidden="true">#</a> 3.8 <code>ws.onerror</code></h3><p>实例对象的 <code>onerror</code> 属性，用于指定报错时的回调函数。</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onerror</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 处理错误</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addEventListener</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;error&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 处理错误</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span></code></pre></div><h2 id="_4-websocket-服务器" tabindex="-1"><a class="header-anchor" href="#_4-websocket-服务器" aria-hidden="true">#</a> 4. WebSocket 服务器</h2><p>WebSocket 协议需要服务器支持。各种服务器的实现，可以查看维基百科的列表。</p><p>常用的 Node 实现有以下三种：</p>`,37),W={href:"https://github.com/uWebSockets/uWebSockets",target:"_blank",rel:"noopener noreferrer"},j={href:"http://socket.io/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/theturtle32/WebSocket-Node",target:"_blank",rel:"noopener noreferrer"},T=s("h2",{id:"_5-unix-风格的-websocket-服务器",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-unix-风格的-websocket-服务器","aria-hidden":"true"},"#"),n(" 5. Unix 风格的 WebSocket 服务器")],-1),N={href:"http://websocketd.com/",target:"_blank",rel:"noopener noreferrer"},P=p(`<p>举例来说，下面是一个 Bash 脚本 <code>counter.sh</code>：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">echo</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#DCDCAA;">sleep</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">echo</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">2</span></span>
<span class="line"><span style="color:#DCDCAA;">sleep</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">echo</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">3</span></span>
<span class="line"></span></code></pre></div><p>命令行下运行这个脚本，会输出 <code>1</code>、<code>2</code>、<code>3</code>，每个值之间间隔 1 秒。</p><p>现在，启动 <code>websocketd</code>，指定这个脚本作为服务：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">websocketd</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--port=8080</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bash</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">./counter.sh</span></span>
<span class="line"></span></code></pre></div><p>上面的命令会启动一个 WebSocket 服务器，端口是 8080。每当客户端连接这个服务器，就会执行 <code>counter.sh</code> 脚本，并将它的输出推送给客户端。</p><div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">ws</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">WebSocket</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ws://localhost:8080/&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onmessage</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>上面是客户端的 JavaScript 代码，运行之后会在控制台依次输出 <code>1</code>、<code>2</code>、<code>3</code>。</p><p>有了它，就可以很方便地将命令行的输出，发给浏览器：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">websocketd</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--port=8080</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ls</span></span>
<span class="line"></span></code></pre></div><p>上面的命令会执行 <code>ls</code> 命令，从而将当前目录的内容，发给浏览器。使用这种方式实时监控服务器，简直是轻而易举。</p>`,11),I={class:"hint-container info"},H=s("p",{class:"hint-container-title"},"有关项目",-1),L={href:"https://github.com/joewalnes/web-vmstats",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/joewalnes/websocketd/tree/master/examples/bash",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/joewalnes/websocketd/blob/master/examples/bash/greeter.sh",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/joewalnes/websocketd/blob/master/examples/bash/chat.sh",target:"_blank",rel:"noopener noreferrer"},R=s("code",null,"websocketd",-1),V={href:"https://github.com/joewalnes/websocketd/blob/master/examples/nodejs/greeter.js",target:"_blank",rel:"noopener noreferrer"},G=s("code",null,"greeter.js",-1),z=p(`<div class="language-javascript" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">process</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">stdin</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setEncoding</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;utf8&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">process</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">stdin</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">on</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;readable&#39;</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">chunk</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">process</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">stdin</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">read</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">chunk</span><span style="color:#D4D4D4;"> !== </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">process</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">stdout</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">write</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;data: &#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">chunk</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><p>启动这个脚本的命令如下：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">websocketd</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--port=8080</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">node</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">./greeter.js</span></span>
<span class="line"></span></code></pre></div>`,3),J={href:"https://github.com/joewalnes/websocketd/tree/master/examples",target:"_blank",rel:"noopener noreferrer"},K=p(`<h2 id="_6-node-的-websocket-协议" tabindex="-1"><a class="header-anchor" href="#_6-node-的-websocket-协议" aria-hidden="true">#</a> 6. Node 的 WebSocket 协议</h2><p>安装 WebSocket 包：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">npm</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">i</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ws</span></span>
<span class="line"></span></code></pre></div><p>服务端：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// server.js</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">WebSocket</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ws&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">WebSocketServer</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">WebSocket</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Server</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 创建 websocket 服务器 监听在 3000 端口</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">wss</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">WebSocketServer</span><span style="color:#D4D4D4;">({ </span><span style="color:#9CDCFE;">port:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">3000</span><span style="color:#D4D4D4;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">wss</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">on</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;connection&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">setInterval</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) </span><span style="color:#6A9955;">// 每隔 1 秒给连接方报一次数</span></span>
<span class="line"><span style="color:#D4D4D4;">  }, </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// client.js</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">WebSocket</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ws&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">ws</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">WebSocket</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ws://localhost:3000&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 接受</span></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">on</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;message&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 当数字达到 10 时，断开连接</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;close&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>功能扩充：我们让双方一来一回通信，下面是服务端代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// server.js</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">WebSocket</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ws&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">WebSocketServer</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">WebSocket</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Server</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 创建 websocket 服务器 监听在 3000 端口</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">wss</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">WebSocketServer</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">port:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">3000</span><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 服务器被客户端连接</span></span>
<span class="line"><span style="color:#9CDCFE;">wss</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">on</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;connection&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 接收客户端信息并把信息返回发送</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">on</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;message&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">          </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">\`[SERVER] error: </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">err</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// client.js</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">WebSocket</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ws&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">ws</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">WebSocket</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ws://localhost:3000&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 发送</span></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">on</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;open&#39;</span><span style="color:#D4D4D4;">, () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Hello&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 接受</span></span>
<span class="line"><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">on</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;message&#39;</span><span style="color:#D4D4D4;">, (</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器：上面的 WebSocket 客户端，是基于 Node.js 构建的，通常 WebSocket 的应用场景，更多时候面对的客户端是浏览器，我们下面来一个 JavaScript 版本的 <code>client.js</code>：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;!</span><span style="color:#569CD6;">DOCTYPE</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">html</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">html</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">head</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">title</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">WebSocket</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">title</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">head</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;text/javascript&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 浏览器提供 WebSocket 对象</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">WebSocket</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;ws://localhost:3000&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 发送</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onopen</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">send</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;hello&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 接收</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">onmessage</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">mes</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#DCDCAA;">alert</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">mes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">mes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;hello&#39;</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">ws</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">close</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">body</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">html</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-附录" tabindex="-1"><a class="header-anchor" href="#_7-附录" aria-hidden="true">#</a> 7. 附录</h2>`,14),M={class:"hint-container info"},Y=s("p",{class:"hint-container-title"},"推荐学习",-1),$={href:"https://www.liaoxuefeng.com/wiki/1022910821149312/1103303693824096",target:"_blank",rel:"noopener noreferrer"},Q=s("hr",{class:"footnotes-sep"},null,-1),X={class:"footnotes"},Z={class:"footnotes-list"},ss={id:"footnote1",class:"footnote-item"},ns={href:"https://www.ruanyifeng.com/blog/2017/05/websocket.html",target:"_blank",rel:"noopener noreferrer"},as=s("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),ls={id:"footnote2",class:"footnote-item"},es={href:"https://www.jmjc.tech/less/114",target:"_blank",rel:"noopener noreferrer"},os=s("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1);function ps(cs,Ds){const e=c("router-link"),l=c("ExternalLinkIcon");return t(),r("div",null,[y,s("nav",d,[s("ul",null,[s("li",null,[a(e,{to:"#_1-websocket-简介"},{default:o(()=>[n("1. WebSocket 简介")]),_:1})]),s("li",null,[a(e,{to:"#_2-客户端的简单示例"},{default:o(()=>[n("2. 客户端的简单示例")]),_:1})]),s("li",null,[a(e,{to:"#_3-客户端的-api"},{default:o(()=>[n("3. 客户端的 API")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_3-1-websocket-构造函数"},{default:o(()=>[n("3.1 WebSocket 构造函数")]),_:1})]),s("li",null,[a(e,{to:"#_3-2-ws-readystate"},{default:o(()=>[n("3.2 ws.readyState")]),_:1})]),s("li",null,[a(e,{to:"#_3-3-ws-onopen"},{default:o(()=>[n("3.3 ws.onopen")]),_:1})]),s("li",null,[a(e,{to:"#_3-4-ws-onclose"},{default:o(()=>[n("3.4 ws.onclose")]),_:1})]),s("li",null,[a(e,{to:"#_3-5-ws-onmessage"},{default:o(()=>[n("3.5 ws.onmessage")]),_:1})]),s("li",null,[a(e,{to:"#_3-6-ws-send"},{default:o(()=>[n("3.6 ws.send()")]),_:1})]),s("li",null,[a(e,{to:"#_3-7-ws-bufferedamount"},{default:o(()=>[n("3.7 ws.bufferedAmount")]),_:1})]),s("li",null,[a(e,{to:"#_3-8-ws-onerror"},{default:o(()=>[n("3.8 ws.onerror")]),_:1})])])]),s("li",null,[a(e,{to:"#_4-websocket-服务器"},{default:o(()=>[n("4. WebSocket 服务器")]),_:1})]),s("li",null,[a(e,{to:"#_5-unix-风格的-websocket-服务器"},{default:o(()=>[n("5. Unix 风格的 WebSocket 服务器")]),_:1})]),s("li",null,[a(e,{to:"#_6-node-的-websocket-协议"},{default:o(()=>[n("6. Node 的 WebSocket 协议")]),_:1})]),s("li",null,[a(e,{to:"#_7-附录"},{default:o(()=>[n("7. 附录")]),_:1})])])]),C,s("p",null,[s("a",v,[n("WebSocket"),a(l)]),n(" 是一种网络通信协议，由于 HTTP 不支持服务端主动推送，WebSocket 就是为了解决这个问题诞生的。")]),b,u,E,s("p",null,[n("它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于 "),s("a",h,[n("服务器推送技术"),a(l)]),n(" 的一种。")]),m,s("p",null,[n("下面是一个网页脚本的例子，"),s("a",F,[n("在线示例"),a(l)]),n("：")]),k,s("p",null,[s("a",A,[g,a(l)]),n(" 对象作为一个构造函数，用于新建 "),_,n(" 实例。")]),w,s("p",null,[n("实例对象的所有属性和方法清单，参见 "),s("a",f,[x,a(l)]),n("。")]),S,s("ul",null,[s("li",null,[s("a",W,[n("µWebSockets"),a(l)])]),s("li",null,[s("a",j,[n("Socket.IO"),a(l)])]),s("li",null,[s("a",B,[n("WebSocket-Node"),a(l)])])]),T,s("p",null,[s("a",N,[n("Websocketd"),a(l)]),n(" 的最大特点，就是后台脚本不限语言，标准输入（stdin）就是 WebSocket 的输入，标准输出（stdout）就是 WebSocket 的输出。")]),P,s("div",I,[H,s("p",null,[s("a",L,[n("joewalnes/web-vmstats"),a(l)]),n(" 监视服务器运行项目。")])]),s("p",null,[n("更多的用法可以参考 "),s("a",q,[n("官方示例"),a(l)]),n("：")]),s("ul",null,[s("li",null,[s("a",O,[n("Bash 脚本读取客户端输入的例子"),a(l)])]),s("li",null,[s("a",U,[n("五行代码实现一个最简单的聊天服务器"),a(l)])])]),s("p",null,[R,n(" 的实质，就是命令行的 WebSocket 代理。只要命令行可以执行的程序，都可以通过它与浏览器进行 WebSocket 通信。下面是一个 Node 实现的 Echo 服务 "),s("a",V,[G,a(l)]),n("：")]),z,s("p",null,[n("官方仓库还有 "),s("a",J,[n("其他各种语言的例子"),a(l)]),n("。")]),K,s("div",M,[Y,s("p",null,[n("廖雪峰的官方网站："),s("a",$,[n("WebSocket 教程"),a(l)]),n("。")])]),Q,s("section",X,[s("ol",Z,[s("li",ss,[s("p",null,[n("阮一峰的网络日志，"),s("a",ns,[n("https://www.ruanyifeng.com/blog/2017/05/websocket.html"),a(l)]),n(),as])]),s("li",ls,[s("p",null,[n("简明教程：Node.js WebSocket 协议，"),s("a",es,[n("https://www.jmjc.tech/less/114"),a(l)]),n(),os])])])])])}const rs=D(i,[["render",ps],["__file","websocket.html.vue"]]);export{rs as default};
